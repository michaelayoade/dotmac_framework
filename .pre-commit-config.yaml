# Pre-commit hooks for DotMac Framework
# Ensures code quality before commits

repos:
  # Built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Black - code formatting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88]

  # Ruff - fast Python linter with complexity checks
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        # This will catch complexity violations and fail the commit
        
      - id: ruff-format
        # Additional formatting that goes beyond black

  # MyPy - static type checking (gradual adoption)
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args: [--no-error-summary, --show-error-codes]
        additional_dependencies: [
          types-redis,
          types-requests,
          pydantic,
          sqlalchemy-stubs,
        ]
        # Allow failures during gradual adoption
        verbose: true
        pass_filenames: false

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [--skip, "B101,B601"]  # Skip assert and shell usage in tests
        exclude: ^tests/

  # Check Python dependencies for known vulnerabilities
  - repo: https://github.com/gitguardian/ggshield
    rev: v1.24.0
    hooks:
      - id: ggshield
        language: python
        stages: [commit]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck

  # Complexity monitoring (informational)
  - repo: local
    hooks:
      - id: complexity-check
        name: Complexity Check
        entry: python -c "
import subprocess
import sys

# Run ruff complexity check
result = subprocess.run([
    'ruff', 'check', '.', 
    '--select', 'C901,PLR0913,PLR0915',
    '--output-format', 'text'
], capture_output=True, text=True)

if result.stdout:
    print('üö® Complexity violations found:')
    print(result.stdout)
    print('Please refactor complex functions before committing.')
    sys.exit(1)
else:
    print('‚úÖ No complexity violations found.')
"
        language: python
        pass_filenames: false
        always_run: true

  # Custom hook to enforce py.typed markers
  - repo: local
    hooks:
      - id: check-py-typed
        name: Check py.typed markers
        entry: python -c "
import sys
from pathlib import Path

errors = []
for package_dir in Path('.').glob('dotmac_*'):
    if package_dir.is_dir() and (package_dir / 'pyproject.toml').exists():
        py_typed_locations = [
            package_dir / package_dir.name / 'py.typed',
            package_dir / 'src' / package_dir.name / 'py.typed'
        ]
        
        if not any(loc.exists() for loc in py_typed_locations):
            errors.append(f'Missing py.typed marker in {package_dir.name}')

if errors:
    print('‚ùå py.typed marker issues:')
    for error in errors:
        print(f'  {error}')
    print('Run: touch {package}/py.typed to fix')
    sys.exit(1)
else:
    print('‚úÖ All packages have py.typed markers.')
"
        language: python
        pass_filenames: false
        always_run: true

# Configuration
default_language_version:
  python: python3.11

# Skip certain hooks on specific file types
exclude: |
  (?x)^(
    migrations/.*|
    alembic/versions/.*|
    .*\.min\.(js|css)|
    .*-lock\.json|
    .*\.lock
  )$