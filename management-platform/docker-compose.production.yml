version: '3.8'

# Production Docker Compose Configuration
# Multi-cloud ready, enterprise-grade deployment

services:
  # Load Balancer & Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: dotmac-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/production/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/production/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    networks:
      - dotmac-frontend
      - dotmac-backend
    depends_on:
      - mgmt-api
      - frontend-apps
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Primary Database
  postgres-primary:
    image: postgres:15-alpine
    container_name: dotmac-postgres-primary
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./deployment/production/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./deployment/production/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./deployment/production/scripts/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql:ro
    ports:
      - "5432:5432"
    networks:
      - dotmac-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # PostgreSQL Read Replica
  postgres-replica:
    image: postgres:15-alpine
    container_name: dotmac-postgres-replica
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
      POSTGRES_PRIMARY_HOST: postgres-primary
      POSTGRES_PRIMARY_PORT: 5432
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./deployment/production/postgres/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh:ro
    ports:
      - "5433:5432"
    networks:
      - dotmac-backend
    depends_on:
      - postgres-primary
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cluster - Master
  redis-master:
    image: redis:7-alpine
    container_name: dotmac-redis-master
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_master_data:/data
      - ./deployment/production/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - dotmac-backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Sentinel for High Availability
  redis-sentinel:
    image: redis:7-alpine
    container_name: dotmac-redis-sentinel
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./deployment/production/redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf:ro
    ports:
      - "26379:26379"
    networks:
      - dotmac-backend
    depends_on:
      - redis-master
    restart: unless-stopped

  # OpenBao Secrets Management
  openbao:
    image: quay.io/openbao/openbao:latest
    container_name: dotmac-openbao-prod
    cap_add:
      - IPC_LOCK
    environment:
      BAO_DISABLE_MLOCK: "false"
      BAO_LOG_LEVEL: ${VAULT_LOG_LEVEL:-info}
    volumes:
      - openbao_data:/openbao/data
      - openbao_logs:/openbao/logs
      - ./deployment/production/openbao/config.hcl:/openbao/config/config.hcl:ro
      - ./deployment/production/ssl:/openbao/ssl:ro
    ports:
      - "8200:8200"
    networks:
      - dotmac-backend
    restart: unless-stopped
    command: server
    healthcheck:
      test: ["CMD", "bao", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Management Platform API - Production
  mgmt-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: dotmac/management-platform:${IMAGE_TAG:-latest}
    container_name: dotmac-mgmt-api-prod
    environment:
      # Core Configuration
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: json
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-primary:5432/${POSTGRES_DB}?sslmode=require
      DATABASE_POOL_SIZE: 20
      DATABASE_MAX_OVERFLOW: 30
      
      # Cache
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379/0
      REDIS_MAX_CONNECTIONS: 100
      
      # Background Jobs
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis-master:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis-master:6379/2
      CELERY_WORKER_CONCURRENCY: 8
      
      # Secrets Management
      VAULT_URL: https://openbao:8200
      VAULT_TOKEN: ${VAULT_TOKEN}
      
      # Monitoring
      SIGNOZ_ENDPOINT: ${SIGNOZ_ENDPOINT}
      SIGNOZ_ACCESS_TOKEN: ${SIGNOZ_ACCESS_TOKEN}
      ENABLE_METRICS: "true"
      
      # External Services
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      
      # CORS & Security
      CORS_ORIGINS: ${CORS_ORIGINS}
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_PER_MINUTE: 1000
      
      # Multi-tenant Configuration
      ENABLE_TENANT_ISOLATION: "true"
      MAX_TENANTS_PER_INSTANCE: ${MAX_TENANTS_PER_INSTANCE:-1000}
      
      # Feature Flags
      FEATURE_ADVANCED_ANALYTICS_ENABLED: "true"
      FEATURE_CUSTOM_BRANDING_ENABLED: "true"
      FEATURE_API_RATE_LIMITING_ENABLED: "true"
      FEATURE_AUDIT_LOGGING_ENABLED: "true"
      
    volumes:
      - mgmt_api_logs:/app/logs
      - mgmt_api_uploads:/app/uploads
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For deployment orchestration
    ports:
      - "8000:8000"
    networks:
      - dotmac-backend
      - dotmac-frontend
    depends_on:
      - postgres-primary
      - redis-master
      - openbao
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      replicas: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Celery Workers - Background Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: dotmac/management-platform:${IMAGE_TAG:-latest}
    container_name: dotmac-celery-worker-prod
    environment:
      # Inherit from mgmt-api with worker-specific overrides
      <<: *mgmt-api-environment
      CELERY_WORKER_CONCURRENCY: 8
      CELERY_WORKER_MAX_TASKS_PER_CHILD: 1000
    volumes:
      - mgmt_api_logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - dotmac-backend
    depends_on:
      - postgres-primary
      - redis-master
      - mgmt-api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      replicas: 4
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=8 --max-tasks-per-child=1000
    healthcheck:
      test: ["CMD", "celery", "-A", "app.workers.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat - Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: dotmac/management-platform:${IMAGE_TAG:-latest}
    container_name: dotmac-celery-beat-prod
    environment:
      <<: *mgmt-api-environment
    volumes:
      - mgmt_api_logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - dotmac-backend
    depends_on:
      - postgres-primary
      - redis-master
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      replicas: 1
    command: celery -A app.workers.celery_app beat --loglevel=info --pidfile=/tmp/celerybeat.pid

  # Frontend Applications (Combined)
  frontend-apps:
    build:
      context: ../frontend
      dockerfile: Dockerfile.production
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_SIGNOZ_URL: ${NEXT_PUBLIC_SIGNOZ_URL}
    image: dotmac/frontend-apps:${IMAGE_TAG:-latest}
    container_name: dotmac-frontend-prod
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_SIGNOZ_URL: ${NEXT_PUBLIC_SIGNOZ_URL}
    ports:
      - "3000:3000"
    networks:
      - dotmac-frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      replicas: 2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: dotmac-prometheus-prod
    volumes:
      - ./deployment/production/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./deployment/production/monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - dotmac-monitoring
      - dotmac-backend
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  grafana:
    image: grafana/grafana:latest
    container_name: dotmac-grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SMTP_ENABLED: "true"
      GF_SMTP_HOST: ${SMTP_HOST}:${SMTP_PORT}
      GF_SMTP_USER: ${SMTP_USERNAME}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: ${SMTP_FROM_ADDRESS}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/production/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/production/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - dotmac-monitoring
      - dotmac-frontend
    depends_on:
      - prometheus
    restart: unless-stopped

  alertmanager:
    image: prom/alertmanager:latest
    container_name: dotmac-alertmanager-prod
    volumes:
      - ./deployment/production/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - dotmac-monitoring
    restart: unless-stopped

  # Log Management
  loki:
    image: grafana/loki:latest
    container_name: dotmac-loki-prod
    volumes:
      - ./deployment/production/logging/loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - dotmac-monitoring
    restart: unless-stopped
    command: -config.file=/etc/loki/loki-config.yml

  promtail:
    image: grafana/promtail:latest
    container_name: dotmac-promtail-prod
    volumes:
      - ./deployment/production/logging/promtail-config.yml:/etc/promtail/promtail-config.yml:ro
      - /var/log:/var/log:ro
      - mgmt_api_logs:/app/logs:ro
      - nginx_logs:/nginx/logs:ro
    networks:
      - dotmac-monitoring
    depends_on:
      - loki
    restart: unless-stopped
    command: -config.file=/etc/promtail/promtail-config.yml

  # Backup Service
  backup-service:
    build:
      context: ./deployment/production/backup
      dockerfile: Dockerfile
    container_name: dotmac-backup-service
    environment:
      POSTGRES_HOST: postgres-primary
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: redis-master
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      BACKUP_S3_BUCKET: ${BACKUP_S3_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-"0 2 * * *"}
    volumes:
      - backup_data:/backups
      - postgres_primary_data:/postgres-data:ro
      - redis_master_data:/redis-data:ro
    networks:
      - dotmac-backend
    depends_on:
      - postgres-primary
      - redis-master
    restart: unless-stopped

# Network Configuration
networks:
  dotmac-frontend:
    driver: bridge
    name: dotmac-frontend
    ipam:
      config:
        - subnet: 172.20.0.0/24
  
  dotmac-backend:
    driver: bridge
    name: dotmac-backend
    ipam:
      config:
        - subnet: 172.21.0.0/24
  
  dotmac-monitoring:
    driver: bridge
    name: dotmac-monitoring
    ipam:
      config:
        - subnet: 172.22.0.0/24

# Volume Configuration
volumes:
  # Database Storage
  postgres_primary_data:
    name: dotmac-postgres-primary-data
  postgres_replica_data:
    name: dotmac-postgres-replica-data
  
  # Cache Storage
  redis_master_data:
    name: dotmac-redis-master-data
  
  # Application Storage
  mgmt_api_logs:
    name: dotmac-mgmt-api-logs
  mgmt_api_uploads:
    name: dotmac-mgmt-api-uploads
  celery_beat_data:
    name: dotmac-celery-beat-data
  
  # Secrets Management
  openbao_data:
    name: dotmac-openbao-data
  openbao_logs:
    name: dotmac-openbao-logs
  
  # Monitoring Storage
  prometheus_data:
    name: dotmac-prometheus-data
  grafana_data:
    name: dotmac-grafana-data
  alertmanager_data:
    name: dotmac-alertmanager-data
  loki_data:
    name: dotmac-loki-data
  
  # Web Server
  nginx_cache:
    name: dotmac-nginx-cache
  nginx_logs:
    name: dotmac-nginx-logs
  
  # Backup Storage
  backup_data:
    name: dotmac-backup-data

# YAML Anchors for Environment Variables
x-mgmt-api-environment: &mgmt-api-environment
  ENVIRONMENT: production
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  LOG_FORMAT: json
  SECRET_KEY: ${SECRET_KEY}
  JWT_SECRET_KEY: ${JWT_SECRET_KEY}
  DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-primary:5432/${POSTGRES_DB}?sslmode=require
  REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379/0
  CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis-master:6379/1
  CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis-master:6379/2
  VAULT_URL: https://openbao:8200
  VAULT_TOKEN: ${VAULT_TOKEN}
  SIGNOZ_ENDPOINT: ${SIGNOZ_ENDPOINT}
  SIGNOZ_ACCESS_TOKEN: ${SIGNOZ_ACCESS_TOKEN}