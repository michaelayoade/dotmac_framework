[tool.poetry]
name = "dotmac-management-platform"
version = "0.1.0"
description = "Multi-tenant SaaS platform for deploying and managing DotMac ISP Framework instances"
authors = ["DotMac Team"]
readme = "README.md"
packages = [
    {include = "app"},
    {include = "mgmt", from = "src"}
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
pydantic = {extras = ["email"], version = "^2.4.2"}
pydantic-settings = "^2.0.3"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.23"}
alembic = "^1.12.1"
asyncpg = "^0.29.0"
redis = {extras = ["hiredis"], version = "^5.0.1"}
celery = {extras = ["redis"], version = "^5.3.4"}
httpx = "^0.25.2"
jinja2 = "^3.1.2"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.6"
email-validator = "^2.1.0"
structlog = "^23.2.0"
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-instrumentation-fastapi = "^0.42b0"
opentelemetry-instrumentation-sqlalchemy = "^0.42b0"
opentelemetry-instrumentation-redis = "^0.42b0"
opentelemetry-instrumentation-httpx = "^0.42b0"
opentelemetry-exporter-otlp = "^1.21.0"
hvac = "^2.0.0"  # HashiCorp Vault client (compatible with OpenBao)
ansible = "^8.5.0"
python-terraform = "^0.10.1"  # For OpenTofu interaction
kubernetes = "^28.1.0"
docker = "^6.1.3"
stripe = "^7.5.0"
sendgrid = "^6.10.0"
twilio = "^8.10.0"
boto3 = "^1.34.0"
azure-identity = "^1.15.0"
azure-mgmt-compute = "^30.3.0"
google-cloud-compute = "^1.14.1"
python-digitalocean = "^1.17.0"
prometheus-client = "^0.19.0"
psutil = "^5.9.6"

[tool.poetry.group.dev.dependencies]
# Core testing framework
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
pytest-html = "^4.1.1"
pytest-timeout = "^2.2.0"
pytest-json-report = "^1.5.0"

# AI-First Testing Dependencies
hypothesis = "^6.88.0"  # Property-based testing
pydantic-factories = "^1.17.0"  # AI-friendly test data generation
responses = "^0.24.0"  # HTTP API mocking
freezegun = "^1.2.2"  # Time mocking for consistent tests
factory-boy = "^3.3.0"
faker = "^20.1.0"
httpx = "^0.25.2"

# Code quality and formatting
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
pre-commit = "^3.5.0"

# Performance testing
locust = "^2.17.0"  # Load testing

# Documentation
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.6"

[tool.poetry.group.security.dependencies]
bandit = {extras = ["toml"], version = "^1.7.5"}
safety = "^2.3.5"
semgrep = "^1.45.0"
pip-audit = "^2.6.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "terraform.*",
    "hvac.*",
    "ansible.*",
    "docker.*",
    "digitalocean.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Test execution configuration - AI-first approach
addopts = [
    "-v",  # verbose output
    "--tb=short",  # shorter tracebacks
    "--strict-markers",  # ensure all markers are declared
    "--strict-config",  # strict configuration
    "--cov=app",  # coverage tracking - Management Platform
    "--cov=src/mgmt",  # coverage tracking - MGT services
    "--cov-report=term-missing",  # show missing lines
    "--cov-report=html:htmlcov",  # HTML coverage report
    "--cov-report=xml:coverage.xml",  # XML for CI
    "--cov-report=json:coverage.json",  # JSON for tooling
    "--cov-fail-under=85",  # higher minimum coverage for SaaS platform
    "--cov-branch",  # branch coverage
    "--durations=10",  # show 10 slowest tests
    "--html=test-reports/report.html",  # HTML test report
    "--json-report --json-report-file=test-reports/report.json",  # JSON report
]

# Async support
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Test timeout (10 minutes max for SaaS orchestration tests)
timeout = 600
timeout_method = "thread"

# AI-First Test Markers - Business outcome focused
markers = [
    # AI-First Test Types (Primary)
    "property_based: Property-based tests - AI-generated test cases with hypothesis",
    "behavior: Business behavior tests - test business outcomes, not implementation", 
    "contract: API contract tests - schema and interface validation",
    "smoke_critical: Critical smoke tests - revenue-critical paths only",
    
    # Test types by scope
    "unit: Unit tests - fast, isolated, no external dependencies",
    "integration: Integration tests - test component interactions",
    "e2e: End-to-end tests - full user workflow testing",
    "performance: Performance and load testing",
    "security: Security and vulnerability testing",
    
    # Test characteristics
    "slow: Tests that take more than 10 seconds",
    "fast: Tests that complete in under 2 seconds",
    "database: Tests that require database connection",
    "redis: Tests that require Redis connection",
    "external: Tests that require external services",
    "api: API endpoint testing",
    "docker: Tests that require Docker environment",
    
    # SaaS Business Logic Areas (Revenue Critical)
    "tenant_billing: Tenant billing and subscription tests - REVENUE CRITICAL",
    "plugin_licensing: Plugin licensing and usage billing - REVENUE CRITICAL",
    "deployment_orchestration: Kubernetes tenant deployment tests",
    "multi_tenant_isolation: Multi-tenant security isolation tests",
    "saas_monitoring: SaaS monitoring and health checks",
    "reseller_commissions: Reseller commission calculation - REVENUE CRITICAL",
    "usage_tracking: Usage-based billing tracking - REVENUE CRITICAL",
    "tenant_provisioning: Tenant provisioning and lifecycle",
    "secrets_management: OpenBao secrets management tests",
    "cross_platform_config: Cross-platform configuration orchestration",
    
    # Infrastructure and Platform
    "kubernetes: Kubernetes orchestration tests",
    "openbao: OpenBao/Vault integration tests",
    "signoz: SignOz observability tests",
    "terraform: Infrastructure provisioning tests",
    "disaster_recovery: Disaster recovery and backup tests",
    
    # Environment markers
    "local: Tests that run in local environment only",
    "ci: Tests that should run in CI environment",
    "staging: Tests for staging environment",
    "production: Tests safe for production environment",
    
    # Test data requirements
    "fixtures: Tests that require test fixtures",
    "cleanup: Tests that require cleanup after execution",
    "isolated: Tests that must run in isolation",
    "tenant_isolation: Tests validating multi-tenant isolation",
    "revenue_critical: Tests that validate revenue-generating functionality",
]

# Logging configuration for tests
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Filter warnings
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
]

# Test data configuration
tmp_path_retention_policy = "failed"  # Keep temp files for failed tests
tmp_path_retention_count = 3

[tool.coverage.run]
source = ["app", "src/mgmt"]
omit = [
    "*/tests/*",
    "*/migrations/*", 
    "*/__pycache__/*",
    "*/conftest.py",
    "*/test_*.py",
    "*_test.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection in test files
severity = "medium"

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

[tool.safety]
# Configuration for Safety vulnerability scanning
ignore = []  # Add CVE IDs to ignore if needed
audit-and-monitor = true
continue-on-error = false

[tool.semgrep]
# Configuration for Semgrep static analysis
rules = [
    "p/security-audit",
    "p/secrets", 
    "p/python",
    "p/owasp-top-ten",
    "p/dockerfile"
]