apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: dotmac-mgmt
  labels:
    app.kubernetes.io/name: celery-worker
    app.kubernetes.io/component: worker
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: celery-worker
      app.kubernetes.io/component: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: celery-worker
        app.kubernetes.io/component: worker
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"  
        prometheus.io/port: "9540"
    spec:
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: celery-worker
        image: dotmac/management-platform:latest
        imagePullPolicy: Always
        command: ["celery", "-A", "app.workers.celery_app", "worker", "--loglevel=info", "--concurrency=8"]
        ports:
        - containerPort: 9540
          name: metrics
          protocol: TCP
        env:
        - name: WORKER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: mgmt-platform-config
        - secretRef:
            name: mgmt-platform-secrets
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
        - name: docker-sock
          mountPath: /var/run/docker.sock
          readOnly: false
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          exec:
            command: ["celery", "-A", "app.workers.celery_app", "inspect", "ping", "-d", "celery@$(hostname)"]
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command: ["celery", "-A", "app.workers.celery_app", "inspect", "active", "-d", "celery@$(hostname)"]
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - celery-worker
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  namespace: dotmac-mgmt
  labels:
    app.kubernetes.io/name: celery-beat
    app.kubernetes.io/component: scheduler
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 1  # Only one beat scheduler
  strategy:
    type: Recreate  # Ensure only one beat runs at a time
  selector:
    matchLabels:
      app.kubernetes.io/name: celery-beat
      app.kubernetes.io/component: scheduler
  template:
    metadata:
      labels:
        app.kubernetes.io/name: celery-beat
        app.kubernetes.io/component: scheduler
        app.kubernetes.io/version: "1.0.0"
    spec:
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: celery-beat
        image: dotmac/management-platform:latest
        imagePullPolicy: Always
        command: ["celery", "-A", "app.workers.celery_app", "beat", "--loglevel=info"]
        env:
        - name: BEAT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: mgmt-platform-config
        - secretRef:
            name: mgmt-platform-secrets
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: beat-schedule
          mountPath: /app/celerybeat-schedule
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command: ["pgrep", "-f", "celery.*beat"]
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command: ["pgrep", "-f", "celery.*beat"]
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: logs
        emptyDir: {}
      - name: beat-schedule
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 60

---
# Celery Flower for monitoring (optional)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-flower
  namespace: dotmac-mgmt
  labels:
    app.kubernetes.io/name: celery-flower
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: celery-flower
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: celery-flower
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/version: "1.0.0"
    spec:
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: celery-flower
        image: dotmac/management-platform:latest
        imagePullPolicy: Always
        command: ["celery", "-A", "app.workers.celery_app", "flower", "--port=5555"]
        ports:
        - containerPort: 5555
          name: http
          protocol: TCP
        envFrom:
        - configMapRef:
            name: mgmt-platform-config
        - secretRef:
            name: mgmt-platform-secrets
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 5555
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 5555
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: tmp
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: celery-flower
  namespace: dotmac-mgmt
  labels:
    app.kubernetes.io/name: celery-flower
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 5555
    targetPort: 5555
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: celery-flower
    app.kubernetes.io/component: monitoring

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: celery-worker-hpa
  namespace: dotmac-mgmt
  labels:
    app.kubernetes.io/name: celery-worker
    app.kubernetes.io/component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: celery-worker
  minReplicas: 3
  maxReplicas: 15
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 25
        periodSeconds: 120