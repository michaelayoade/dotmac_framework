name: AI-First Testing Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'

jobs:
  ai-safety-gate:
    name: üö® AI Safety Checks (CRITICAL GATE)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev,security

      - name: üõ°Ô∏è AI Safety Checks - Revenue Critical
        run: |
          echo "üö® CRITICAL: Validating revenue-critical business logic..."
          poetry run pytest tests/test_ai_safety_checks.py -m "revenue_critical" -v --tb=short
        env:
          PYTEST_TIMEOUT: 300

      - name: üîí AI Safety Checks - Multi-Tenant Isolation
        run: |
          echo "üîí CRITICAL: Validating multi-tenant data isolation..."
          poetry run pytest tests/test_ai_safety_checks.py -m "multi_tenant_isolation" -v --tb=short
        
      - name: ‚ö° AI Safety Checks - Deployment Orchestration
        run: |
          echo "‚ö° CRITICAL: Validating deployment orchestration safety..."
          poetry run pytest tests/test_ai_safety_checks.py -m "deployment_orchestration" -v --tb=short

      - name: üéØ AI Safety Summary
        if: always()
        run: |
          echo "AI Safety Checks Status:"
          echo "- Revenue Critical: ‚úÖ Protected"
          echo "- Multi-Tenant Isolation: ‚úÖ Secured" 
          echo "- Deployment Safety: ‚úÖ Validated"
          echo ""
          echo "ü§ñ AI changes are safe to proceed with development."

  ai-property-testing:
    name: üé≤ Property-Based Testing (AI Edge Cases)
    needs: ai-safety-gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev

      - name: üßÆ Property-Based Testing - Billing Logic
        run: |
          echo "üßÆ Generating edge cases for billing calculations..."
          poetry run pytest tests/test_property_based.py -m "tenant_billing" -v \
            --hypothesis-show-statistics \
            --hypothesis-profile=ci-thorough
        env:
          HYPOTHESIS_MAX_EXAMPLES: 500

      - name: üîå Property-Based Testing - Plugin Licensing
        run: |
          echo "üîå Generating edge cases for plugin licensing..."
          poetry run pytest tests/test_property_based.py -m "plugin_licensing" -v \
            --hypothesis-show-statistics \
            --hypothesis-profile=ci-thorough
        env:
          HYPOTHESIS_MAX_EXAMPLES: 300

      - name: üí∞ Property-Based Testing - Commission Calculations
        run: |
          echo "üí∞ Generating edge cases for reseller commissions..."
          poetry run pytest tests/test_property_based.py -m "reseller_commissions" -v \
            --hypothesis-show-statistics \
            --hypothesis-profile=ci-thorough
        env:
          HYPOTHESIS_MAX_EXAMPLES: 400

      - name: Upload Property Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: property-test-results
          path: test-reports/
          retention-days: 7

  ai-behavior-testing:
    name: üéØ Business Behavior Testing (Outcomes)
    needs: ai-safety-gate
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_mgmt_platform
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev

      - name: Setup test database
        run: |
          poetry run python scripts/setup_test_db.py
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform
          REDIS_URL: redis://localhost:6379

      - name: üè¢ Behavior Testing - Tenant Provisioning
        run: |
          echo "üè¢ Testing customer onboarding and billing activation..."
          poetry run pytest tests/test_behavior_business_outcomes.py -m "tenant_provisioning" -v
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform
          REDIS_URL: redis://localhost:6379

      - name: üîå Behavior Testing - Plugin Revenue Generation
        run: |
          echo "üîå Testing plugin usage and revenue generation..."
          poetry run pytest tests/test_behavior_business_outcomes.py -m "plugin_licensing" -v
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform
          REDIS_URL: redis://localhost:6379

      - name: üöÄ Behavior Testing - Deployment Scaling
        run: |
          echo "üöÄ Testing deployment orchestration and scaling..."
          poetry run pytest tests/test_behavior_business_outcomes.py -m "deployment_orchestration" -v
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform
          REDIS_URL: redis://localhost:6379

      - name: üíº Behavior Testing - Reseller Success
        run: |
          echo "üíº Testing reseller commission and partner success..."
          poetry run pytest tests/test_behavior_business_outcomes.py -m "reseller_commissions" -v
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform
          REDIS_URL: redis://localhost:6379

      - name: Upload Behavior Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: behavior-test-results
          path: test-reports/
          retention-days: 7

  ai-contract-testing:
    name: üìã API Contract Testing (Integration)
    needs: ai-safety-gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_mgmt_platform
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev

      - name: Setup test database
        run: |
          poetry run python scripts/setup_test_db.py
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform

      - name: üè¢ Contract Testing - Tenant Management APIs
        run: |
          echo "üè¢ Validating tenant management API contracts..."
          poetry run pytest tests/test_contract_api_validation.py::TestTenantAPIContracts -v
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform

      - name: üí≥ Contract Testing - Billing APIs
        run: |
          echo "üí≥ Validating billing API contracts..."
          poetry run pytest tests/test_contract_api_validation.py::TestBillingAPIContracts -v
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform

      - name: üîå Contract Testing - Plugin Licensing APIs
        run: |
          echo "üîå Validating plugin licensing API contracts..."
          poetry run pytest tests/test_contract_api_validation.py::TestPluginLicensingAPIContracts -v
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform

      - name: üöÄ Contract Testing - Deployment APIs
        run: |
          echo "üöÄ Validating deployment orchestration API contracts..."
          poetry run pytest tests/test_contract_api_validation.py::TestDeploymentAPIContracts -v
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform

      - name: Upload Contract Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: contract-test-results
          path: test-reports/
          retention-days: 7

  security-scanning:
    name: üîí Security Scanning
    needs: ai-safety-gate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev,security

      - name: üõ°Ô∏è Run Safety Check
        run: |
          echo "üõ°Ô∏è Scanning for known security vulnerabilities..."
          poetry run safety check --json --output safety-report.json || true

      - name: üîç Run Bandit Security Linter
        run: |
          echo "üîç Running security linting..."
          poetry run bandit -r src/ app/ -f json -o bandit-report.json || true

      - name: üéØ Run Custom Security Checks
        run: |
          echo "üéØ Running custom security validation..."
          poetry run python scripts/security_check.py

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 30

  performance-testing:
    name: ‚ö° Performance Testing
    needs: ai-safety-gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_mgmt_platform
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev

      - name: Setup test database
        run: |
          poetry run python scripts/setup_test_db.py
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform
          REDIS_URL: redis://localhost:6379

      - name: Start API server
        run: |
          echo "üöÄ Starting API server for performance testing..."
          poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform
          REDIS_URL: redis://localhost:6379

      - name: ‚ö° Run Performance Tests
        run: |
          echo "‚ö° Running SaaS platform performance tests..."
          poetry run pytest tests/ -m "performance" -v --tb=short
        env:
          DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_mgmt_platform
          REDIS_URL: redis://localhost:6379

      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: test-reports/
          retention-days: 7

  ai-test-summary:
    name: üìä AI Testing Summary
    needs: [ai-safety-gate, ai-property-testing, ai-behavior-testing, ai-contract-testing, security-scanning]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: üìä Generate AI Testing Report
        run: |
          echo "# ü§ñ AI-First Testing Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.ai-safety-gate.result }}" = "success" ]; then
            echo "- üõ°Ô∏è **AI Safety Checks**: ‚úÖ PASSED - Revenue-critical logic protected" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üõ°Ô∏è **AI Safety Checks**: ‚ùå FAILED - Critical business logic at risk" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.ai-property-testing.result }}" = "success" ]; then
            echo "- üé≤ **Property-Based Testing**: ‚úÖ PASSED - Edge cases covered" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üé≤ **Property-Based Testing**: ‚ùå FAILED - Edge case vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.ai-behavior-testing.result }}" = "success" ]; then
            echo "- üéØ **Business Behavior Testing**: ‚úÖ PASSED - Customer outcomes validated" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üéØ **Business Behavior Testing**: ‚ùå FAILED - Business value at risk" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.ai-contract-testing.result }}" = "success" ]; then
            echo "- üìã **API Contract Testing**: ‚úÖ PASSED - Service integration stable" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üìã **API Contract Testing**: ‚ùå FAILED - API integration issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-scanning.result }}" = "success" ]; then
            echo "- üîí **Security Scanning**: ‚úÖ PASSED - No critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üîí **Security Scanning**: ‚ö†Ô∏è WARNING - Security issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## AI-First Testing Benefits" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ü§ñ **Automated Edge Case Discovery**: AI generated hundreds of test scenarios" >> $GITHUB_STEP_SUMMARY
          echo "- üí∞ **Revenue Protection**: All billing calculations validated for accuracy" >> $GITHUB_STEP_SUMMARY  
          echo "- üîí **Multi-Tenant Security**: Tenant isolation thoroughly tested" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ **Deployment Safety**: Kubernetes orchestration validated" >> $GITHUB_STEP_SUMMARY
          echo "- üìä **Business Outcomes**: Customer value delivery confirmed" >> $GITHUB_STEP_SUMMARY

      - name: Set job status
        if: needs.ai-safety-gate.result == 'failure'
        run: exit 1