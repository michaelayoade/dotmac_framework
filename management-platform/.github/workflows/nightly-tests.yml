name: Nightly Tests & Health Checks

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'

jobs:
  nightly-full-tests:
    name: Full Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --with dev,security

      - name: Run comprehensive test suite
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECURITY_JWT_SECRET_KEY: nightly-test-secret-key-minimum-32-chars
        run: |
          # Run all test categories
          poetry run pytest tests/ \
            --cov=src/mgmt \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=80 \
            --durations=0 \
            --maxfail=5 \
            --tb=short \
            -v

      - name: Run load tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          # Start the application
          poetry run uvicorn src.mgmt.main:app --host 0.0.0.0 --port 8000 &
          sleep 30
          
          # Run load tests
          poetry run locust --headless \
            --users 200 \
            --spawn-rate 20 \
            -H http://localhost:8000 \
            -t 600s \
            --html=nightly-load-test-report.html

      - name: Memory leak detection
        run: |
          # Run memory profiling tests
          poetry run python -m pytest tests/ -m "memory" --tb=short

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: nightly-test-results
          path: |
            htmlcov/
            nightly-load-test-report.html
            coverage.xml

  infrastructure-health:
    name: Infrastructure Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check staging environment
        run: |
          echo "Checking staging environment health..."
          curl -f https://staging.dotmac.platform/health || exit 1
          curl -f https://staging.dotmac.platform/api/health || exit 1

      - name: Check production environment
        run: |
          echo "Checking production environment health..."
          curl -f https://app.dotmac.platform/health || exit 1
          curl -f https://app.dotmac.platform/api/health || exit 1

      - name: Database connectivity test
        run: |
          echo "Testing database connectivity..."
          # Add database connectivity tests

      - name: External service connectivity
        run: |
          echo "Testing external service connectivity..."
          # Test Stripe, SendGrid, Twilio connectivity

  cost-analysis:
    name: Cost Analysis & Alerts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install boto3 azure-identity google-cloud-billing requests

      - name: Run cost analysis
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
        run: |
          python scripts/cost_monitor.py --analyze --days 7 --output nightly-cost-report.json

      - name: Upload cost report
        uses: actions/upload-artifact@v3
        with:
          name: cost-analysis
          path: nightly-cost-report.json

      - name: Cost alert notification
        if: always()
        run: |
          # Check for cost alerts and send notifications
          python -c "
          import json
          with open('nightly-cost-report.json') as f:
              report = json.load(f)
          if len(report['alerts']) > 0:
              print(f'ðŸš¨ {len(report[\"alerts\"])} cost alerts detected!')
              exit(1)
          "

  dependency-updates:
    name: Check Dependency Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Check for outdated dependencies
        run: |
          poetry show --outdated > outdated-deps.txt || echo "No outdated dependencies"

      - name: Security vulnerability scan
        run: |
          poetry run safety check --json --output safety-nightly.json || echo "Safety check completed"

      - name: Upload dependency reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-reports
          path: |
            outdated-deps.txt
            safety-nightly.json

  backup-validation:
    name: Backup Validation
    runs-on: ubuntu-latest
    steps:
      - name: Test backup restoration
        run: |
          echo "Testing backup restoration process..."
          # Add backup restoration tests

      - name: Validate backup integrity
        run: |
          echo "Validating backup integrity..."
          # Add backup integrity checks

  notification:
    name: Nightly Report
    runs-on: ubuntu-latest
    needs: [nightly-full-tests, infrastructure-health, cost-analysis, dependency-updates]
    if: always()
    steps:
      - name: Send nightly report
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: '#nightly-reports'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":moon: *Nightly Health Report - ${{ github.repository }}*\n*Date:* $(date +'%Y-%m-%d')"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Full Tests:* ${{ needs.nightly-full-tests.result }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Infrastructure:* ${{ needs.infrastructure-health.result }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Cost Analysis:* ${{ needs.cost-analysis.result }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Dependencies:* ${{ needs.dependency-updates.result }}"
                    }
                  ]
                }
              ]
            }