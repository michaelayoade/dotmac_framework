name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
      release_type:
        description: 'Type of release'
        required: true
        default: 'minor'
        type: choice
        options:
        - patch
        - minor
        - major
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: dotmac/management-platform

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            IS_PRERELEASE="false"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

      - name: Check if tag exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "Tag v${VERSION} already exists!"
            exit 1
          fi

  run-tests:
    name: Run Release Tests
    runs-on: ubuntu-latest
    needs: validate-release
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: release_user
          POSTGRES_PASSWORD: release_password
          POSTGRES_DB: release_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --with dev,security

      - name: Run full test suite
        env:
          DATABASE_URL: postgresql://release_user:release_password@localhost:5432/release_db
          REDIS_URL: redis://localhost:6379/0
          SECURITY_JWT_SECRET_KEY: release-test-secret-key-minimum-32-chars
        run: |
          poetry run pytest tests/ \
            --cov=src/mgmt \
            --cov-fail-under=80 \
            --tb=short \
            -v

      - name: Run security scans
        run: |
          poetry run bandit -r src/ -f json -o release-bandit-report.json
          poetry run safety check --json --output release-safety-report.json

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=v${{ needs.validate-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ needs.validate-release.outputs.version }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  security-scan-release:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
          format: 'sarif'
          output: 'trivy-release-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-release-results.sarif'

      - name: Check for critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, build-release, security-scan-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          cat > release_notes.md << EOF
          ## What's Changed
          
          ${CHANGELOG}
          
          ## Docker Image
          \`\`\`
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}
          \`\`\`
          
          ## Deployment
          \`\`\`bash
          # Update your deployment with the new image
          kubectl set image deployment/mgmt-platform mgmt-platform=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}
          \`\`\`
          
          ## Security
          - All security scans passed
          - No critical vulnerabilities detected
          - SBOM included in release assets
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...v${VERSION}
          EOF

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          release_name: Release v${{ needs.validate-release.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}

      - name: Download SBOM
        uses: actions/download-artifact@v3
        with:
          name: sbom

      - name: Upload SBOM to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: sbom.spdx.json
          asset_name: sbom.spdx.json
          asset_content_type: application/json

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    environment:
      name: staging
      url: https://staging.dotmac.platform
    steps:
      - name: Deploy to staging
        env:
          VERSION: ${{ needs.validate-release.outputs.version }}
          KUBE_CONFIG: ${{ secrets.STAGING_KUBE_CONFIG }}
        run: |
          echo "Deploying v${VERSION} to staging environment"
          # kubectl set image deployment/mgmt-platform mgmt-platform=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}

      - name: Verify staging deployment
        run: |
          echo "Verifying staging deployment..."
          sleep 60
          curl -f https://staging.dotmac.platform/health
          curl -f https://staging.dotmac.platform/api/health

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, deploy-to-staging]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment:
      name: production
      url: https://app.dotmac.platform
    steps:
      - name: Manual approval for production
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "Production Release v${{ needs.validate-release.outputs.version }}"

      - name: Deploy to production
        env:
          VERSION: ${{ needs.validate-release.outputs.version }}
          KUBE_CONFIG: ${{ secrets.PRODUCTION_KUBE_CONFIG }}
        run: |
          echo "Deploying v${VERSION} to production environment"
          # kubectl set image deployment/mgmt-platform mgmt-platform=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}

      - name: Verify production deployment
        run: |
          echo "Verifying production deployment..."
          sleep 60
          curl -f https://app.dotmac.platform/health
          curl -f https://app.dotmac.platform/api/health

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update version in documentation
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Update documentation with new version
          echo "Updated documentation for v${VERSION}"

      - name: Deploy documentation
        run: |
          echo "Deploying updated documentation"

  notification:
    name: Release Notification
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, deploy-to-production]
    if: always()
    steps:
      - name: Notify release completion
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":rocket: *Release v${{ needs.validate-release.outputs.version }} Completed*\n*Repository:* ${{ github.repository }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Production Deploy:* ${{ needs.deploy-to-production.result }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Pre-release:* ${{ needs.validate-release.outputs.is_prerelease }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.version }}|View Release Notes>"
                  }
                }
              ]
            }