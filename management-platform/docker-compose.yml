version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: mgmt-postgres
    environment:
      POSTGRES_USER: mgmt_user
      POSTGRES_PASSWORD: mgmt_password
      POSTGRES_DB: mgmt_platform
      POSTGRES_MULTIPLE_DATABASES: "tenants,billing,analytics,support"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    ports:
      - "5432:5432"
    networks:
      - mgmt-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mgmt_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and background jobs
  redis:
    image: redis:7-alpine
    container_name: mgmt-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mgmt-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OpenBao for secrets management
  openbao:
    image: quay.io/openbao/openbao:latest
    container_name: mgmt-openbao
    cap_add:
      - IPC_LOCK
    environment:
      BAO_DEV_ROOT_TOKEN_ID: mgmt-root-token
      BAO_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
      BAO_LOG_LEVEL: info
    ports:
      - "8200:8200"
    volumes:
      - openbao_data:/openbao/file
      - ./config/openbao:/openbao/config:ro
    command: server -dev -dev-no-store-token
    networks:
      - mgmt-network
    healthcheck:
      test: ["CMD", "bao", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ClickHouse for SignOz
  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: mgmt-clickhouse
    environment:
      CLICKHOUSE_DB: signoz_metrics
      CLICKHOUSE_USER: signoz
      CLICKHOUSE_PASSWORD: signoz_password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./config/monitoring/signoz/clickhouse-config.xml:/etc/clickhouse-server/config.d/config.xml:ro
    ports:
      - "9000:9000"
      - "8123:8123"
    networks:
      - mgmt-network
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 5s
      retries: 5

  # SignOz OpenTelemetry Collector
  signoz-collector:
    image: signoz/signoz-otel-collector:0.88.11
    container_name: mgmt-signoz-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/monitoring/signoz/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    environment:
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PASSWORD: signoz_password
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "8889:8889"   # Prometheus metrics
    networks:
      - mgmt-network
    depends_on:
      - clickhouse

  # SignOz Query Service
  signoz-query:
    image: signoz/query-service:0.40.0
    container_name: mgmt-signoz-query
    environment:
      ClickHouseUrl: tcp://clickhouse:9000
      CLICKHOUSE_USER: signoz
      CLICKHOUSE_PASSWORD: signoz_password
      STORAGE: clickhouse
      TELEMETRY_ENABLED: "false"
    ports:
      - "8080:8080"
    networks:
      - mgmt-network
    depends_on:
      - clickhouse
      - signoz-collector

  # SignOz Frontend
  signoz-frontend:
    image: signoz/frontend:0.40.0
    container_name: mgmt-signoz-frontend
    environment:
      QUERY_SERVICE_URL: http://signoz-query:8080
    ports:
      - "3301:3301"
    networks:
      - mgmt-network
    depends_on:
      - signoz-query

  # SignOz Alertmanager
  signoz-alertmanager:
    image: signoz/alertmanager:0.23.4
    container_name: mgmt-signoz-alertmanager
    volumes:
      - ./config/monitoring/signoz/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    ports:
      - "9093:9093"
    networks:
      - mgmt-network

  # Management Platform API
  mgmt-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: mgmt-api
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://mgmt_user:mgmt_password@postgres:5432/mgmt_platform
      # Redis
      REDIS_URL: redis://:redis_password@redis:6379/0
      # Celery
      CELERY_BROKER_URL: redis://:redis_password@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:redis_password@redis:6379/2
      # OpenBao
      VAULT_URL: http://openbao:8200
      VAULT_TOKEN: mgmt-root-token
      # SignOz
      SIGNOZ_ENDPOINT: signoz-collector:4317
      SIGNOZ_ACCESS_TOKEN: ${SIGNOZ_ACCESS_TOKEN:-}
      # Application
      ENVIRONMENT: development
      LOG_LEVEL: INFO
      SECRET_KEY: mgmt-secret-key-change-in-production
      JWT_SECRET_KEY: mgmt-jwt-secret-change-in-production
      # External services
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_placeholder}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY:-sg_placeholder}
      # CORS origins
      CORS_ORIGINS: '["http://localhost:3000", "http://localhost:3001", "http://localhost:3002"]'
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock  # For deployment tasks
    ports:
      - "8000:8000"
    networks:
      - mgmt-network
    depends_on:
      - postgres
      - redis
      - openbao
      - signoz-collector
    command: python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: mgmt-celery-worker
    environment:
      DATABASE_URL: postgresql+asyncpg://mgmt_user:mgmt_password@postgres:5432/mgmt_platform
      REDIS_URL: redis://:redis_password@redis:6379/0
      CELERY_BROKER_URL: redis://:redis_password@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:redis_password@redis:6379/2
      VAULT_URL: http://openbao:8200
      VAULT_TOKEN: mgmt-root-token
      ENVIRONMENT: development
      LOG_LEVEL: INFO
      SECRET_KEY: mgmt-secret-key-change-in-production
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mgmt-network
    depends_on:
      - postgres
      - redis
      - openbao
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=4

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: mgmt-celery-beat
    environment:
      DATABASE_URL: postgresql+asyncpg://mgmt_user:mgmt_password@postgres:5432/mgmt_platform
      REDIS_URL: redis://:redis_password@redis:6379/0
      CELERY_BROKER_URL: redis://:redis_password@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:redis_password@redis:6379/2
      ENVIRONMENT: development
      LOG_LEVEL: INFO
      SECRET_KEY: mgmt-secret-key-change-in-production
    volumes:
      - .:/app
    networks:
      - mgmt-network
    depends_on:
      - postgres
      - redis
    command: celery -A app.workers.celery_app beat --loglevel=info

  # Master Admin Portal (React)
  master-admin-portal:
    build:
      context: ./portals/master_admin
      dockerfile: Dockerfile
      target: development
    container_name: mgmt-master-admin
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_SIGNOZ_URL: http://localhost:3301
      NODE_ENV: development
    volumes:
      - ./portals/master_admin:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    networks:
      - mgmt-network
    depends_on:
      - mgmt-api

  # Tenant Admin Portal (React)
  tenant-admin-portal:
    build:
      context: ./portals/tenant_admin
      dockerfile: Dockerfile
      target: development
    container_name: mgmt-tenant-admin
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_SIGNOZ_URL: http://localhost:3301
      NODE_ENV: development
    volumes:
      - ./portals/tenant_admin:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3001:3000"
    networks:
      - mgmt-network
    depends_on:
      - mgmt-api

  # Reseller Portal (React)
  reseller-portal:
    build:
      context: ./portals/reseller
      dockerfile: Dockerfile
      target: development
    container_name: mgmt-reseller
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NODE_ENV: development
    volumes:
      - ./portals/reseller:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3002:3000"
    networks:
      - mgmt-network
    depends_on:
      - mgmt-api

volumes:
  postgres_data:
    name: mgmt-postgres-data
  redis_data:
    name: mgmt-redis-data
  openbao_data:
    name: mgmt-openbao-data
  clickhouse_data:
    name: mgmt-clickhouse-data

networks:
  mgmt-network:
    driver: bridge
    name: mgmt-network