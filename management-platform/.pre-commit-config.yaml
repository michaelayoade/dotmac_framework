# Pre-commit hooks for security and code quality
repos:
  # General code formatting and quality
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: detect-private-key
      - id: detect-aws-credentials

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.11.0
    hooks:
      - id: black
        language_version: python3.11

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black"]

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        additional_dependencies: [flake8-docstrings, flake8-import-order]

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.1
    hooks:
      - id: mypy
        additional_dependencies: [types-all]

  # Security scanning with Bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ["-c", "pyproject.toml"]
        additional_dependencies: ["bandit[toml]"]

  # Secret detection with detect-secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package.lock.json

  # Security scanning with Semgrep
  - repo: https://github.com/semgrep/semgrep
    rev: v1.45.0
    hooks:
      - id: semgrep
        args: ["--config=auto", "--error", "--config=p/security-audit", "--config=p/secrets"]

  # GitGuardian secret scanning
  - repo: https://github.com/gitguardian/ggshield
    rev: v1.25.0
    hooks:
      - id: ggshield
        language: python
        stages: [commit]

  # Infrastructure as Code security scanning
  - repo: https://github.com/bridgecrewio/checkov
    rev: 3.1.65
    hooks:
      - id: checkov
        args: ['--framework', 'dockerfile', '--framework', 'secrets', '--framework', 'terraform']
        exclude: ^\.terraform/

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        entry: hadolint
        language: docker_image
        types: [dockerfile]

  # YAML security and best practices
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint

  # Terraform/OpenTofu security scanning
  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.83.5
    hooks:
      - id: terraform_fmt
      - id: terraform_validate
      - id: terraform_docs
      - id: terraform_tflint
      - id: terraform_tfsec
        args:
          - --args=--minimum-severity=MEDIUM

  # CRITICAL: AI Safety Checks (Revenue Protection)
  - repo: local
    hooks:
      - id: ai-safety-revenue-critical
        name: ðŸš¨ AI Safety - Revenue Critical Logic
        entry: bash -c 'echo "ðŸš¨ CRITICAL: Checking revenue-critical business logic..." && poetry run pytest tests/test_ai_safety_checks.py -m "revenue_critical" -q --tb=no'
        language: system
        pass_filenames: false
        stages: [commit]
        verbose: true

      - id: ai-safety-tenant-isolation
        name: ðŸ”’ AI Safety - Multi-Tenant Isolation
        entry: bash -c 'echo "ðŸ”’ CRITICAL: Validating multi-tenant data isolation..." && poetry run pytest tests/test_ai_safety_checks.py -m "multi_tenant_isolation" -q --tb=no'
        language: system
        pass_filenames: false
        stages: [commit]
        verbose: true

      - id: ai-safety-deployment-orchestration
        name: âš¡ AI Safety - Deployment Safety
        entry: bash -c 'echo "âš¡ CRITICAL: Checking deployment orchestration safety..." && poetry run pytest tests/test_ai_safety_checks.py -m "deployment_orchestration" -q --tb=no'
        language: system
        pass_filenames: false
        stages: [commit]
        verbose: true

  # Business Logic Validation (AI-First approach)
      - id: property-based-tests-billing
        name: ðŸ§® Property Tests - Billing Logic
        entry: bash -c 'echo "ðŸ§® AI: Validating billing calculation properties..." && poetry run pytest tests/test_property_based.py -m "tenant_billing" -q --hypothesis-profile=ci-fast'
        language: system
        pass_filenames: false
        stages: [push]  # Run on push, not every commit
        verbose: true

      - id: contract-tests-critical-apis
        name: ðŸ“‹ Contract Tests - Critical APIs
        entry: bash -c 'echo "ðŸ“‹ AI: Validating critical API contracts..." && poetry run pytest tests/test_contract_api_validation.py -m "revenue_critical" -q --tb=no'
        language: system
        pass_filenames: false
        stages: [push]  # Run on push, not every commit
        verbose: true

  # Custom security check
      - id: custom-security-check
        name: Custom Security Check
        entry: python scripts/security_check.py
        language: system
        pass_filenames: false
        always_run: true

  # License check
  - repo: local
    hooks:
      - id: license-check
        name: License Check
        entry: python -c "
          import subprocess;
          import sys;
          try:
              result = subprocess.run(['poetry', 'run', 'pip-licenses', '--format=json'], 
                                    capture_output=True, text=True);
              if result.returncode != 0:
                  print('License check failed');
                  sys.exit(1);
              print('License check passed');
          except Exception as e:
              print(f'License check error: {e}');
              sys.exit(1)
          "
        language: system
        pass_filenames: false

  # Dependency vulnerability check
  - repo: local
    hooks:
      - id: safety-check
        name: Safety Vulnerability Check
        entry: poetry run safety check
        language: system
        pass_filenames: false

  # Configuration validation
  - repo: local
    hooks:
      - id: config-validation
        name: Configuration Validation
        entry: python -c "
          from src.mgmt.shared.config import validate_production_config;
          errors = validate_production_config();
          if errors:
              print('Configuration validation failed:');
              for error in errors: print(f'  - {error}');
              import sys; sys.exit(1);
          print('Configuration validation passed')
          "
        language: system
        pass_filenames: false

# Pre-commit configuration
default_stages: [commit, push]
minimum_pre_commit_version: 3.5.0

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false