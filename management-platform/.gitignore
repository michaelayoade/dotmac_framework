# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.local
.env.development
.env.staging
.env.production
.env.test
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to exclude everything except code and configuration.
.idea/

# VS Code
.vscode/
*.code-workspace

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# Node.js dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# Storybook build outputs
.out
.storybook-out
storybook-static

# Rollup.js default build output
dist/

# Uncomment these if you have a Yarn v2 project
#.yarn/cache
#.yarn/unplugged
#.yarn/build-state.yml
#.yarn/install-state.gz
#.pnp.*

# Database files
*.db
*.sqlite
*.sqlite3
*.db-journal

# Database dumps
*.sql
*.dump

# Log files
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Docker
.dockerignore

# Kubernetes
*.kubeconfig
kubeconfig
.kube/

# Terraform / OpenTofu
*.tfstate
*.tfstate.*
*.tfvars
*.tfvars.json
.terraform/
.terraform.lock.hcl
terraform.tfstate.d/
crash.log
crash.*.log
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Ansible
*.retry
vault_pass.txt
host_vars/
group_vars/

# SSL certificates and keys
*.pem
*.key
*.crt
*.csr
*.p12
*.pfx
*.jks
*.keystore
*.truststore
ssl/
certs/
certificates/

# SSH keys
id_rsa
id_rsa.pub
id_ed25519
id_ed25519.pub
*.priv

# GPG keys
*.gpg
*.asc
secring.*
pubring.*

# OpenBao/Vault
.vault-token
vault-token
vault-keys.json
vault-init.json

# Security credentials and secrets
secrets/
*.secret
*.secrets
credentials/
*.credentials
auth/
tokens/
*.token
*.auth
api-keys/
*.api-key

# Cloud provider credentials
.aws/
.azure/
.gcp/
gcp-key.json
service-account.json

# Configuration files with sensitive data
config/local/
config/secrets/
config/production/
config/staging/
local.yml
local.yaml
secrets.yml
secrets.yaml

# Backup files
*.bak
*.backup
*.old
*.orig
*.swp
*.swo
*~

# Temporary files
tmp/
temp/
.tmp/
.temp/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
desktop.ini

# Editor backup and swap files
*~
.#*
\#*#
.*.swp
.*.swo

# JetBrains IDEs
.idea/
*.iml
*.ipr
*.iws
out/

# Eclipse
.metadata
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath
.recommenders
.project
.classpath
.factorypath
.buildpath
.target
.tern-project
.texlipse
.springBeans
.recommenders/
.apt_generated/
.apt_generated_tests/
.cache-main
.scala_dependencies
.worksheet

# NetBeans
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

# Monitoring and metrics
prometheus-data/
grafana-data/
signoz-data/
monitoring-data/

# Development tools
.devcontainer/
.vagrant/
Vagrantfile.local

# Build artifacts
build/
dist/
target/
*.egg-info/
*.whl

# Package files
*.deb
*.rpm
*.dmg
*.msi

# Compressed files (unless specifically needed)
*.zip
*.tar.gz
*.tar.bz2
*.rar
*.7z

# Generated documentation
docs/_build/
site/
_site/

# Performance test results
performance-results/
load-test-results/
*.jmx.log

# Coverage reports
coverage-reports/
test-reports/
.coverage*

# Cache directories
.cache/
.npm/
.yarn/
.pnpm/

# Local development overrides
docker-compose.override.yml
docker-compose.local.yml

# IDE configurations
.settings/
.project
.classpath

# Large files that should use Git LFS
*.iso
*.dmg
*.pkg
*.deb
*.rpm

# Machine learning models
*.model
*.pkl
*.h5
*.pb

# Local environment configuration
.env.*
!.env.example

# Development databases
dev.db
development.db
test.db

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# macOS
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Windows
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk