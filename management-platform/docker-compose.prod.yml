version: '3.8'

services:
  # PostgreSQL database with production settings
  postgres:
    image: postgres:15-alpine
    container_name: mgmt-postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    networks:
      - mgmt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and background jobs
  redis:
    image: redis:7-alpine
    container_name: mgmt-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - mgmt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # OpenBao for secrets management
  openbao:
    image: quay.io/openbao/openbao:latest
    container_name: mgmt-openbao-prod
    cap_add:
      - IPC_LOCK
    environment:
      BAO_LOG_LEVEL: warn
    volumes:
      - openbao_data:/openbao/data
      - ./config/openbao:/openbao/config:ro
      - ./ssl/openbao:/openbao/ssl:ro
    command: server -config=/openbao/config
    networks:
      - mgmt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bao", "status"]
      interval: 60s
      timeout: 15s
      retries: 3

  # Management Platform API (Production)
  mgmt-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mgmt-api-prod
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      # Celery
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      # OpenBao
      VAULT_URL: https://openbao:8200
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN}
      # Application
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      # External services
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      # AWS (for deployment)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      # Kubernetes
      KUBERNETES_CONFIG_PATH: /app/k8s-config
      # Monitoring
      SIGNOZ_ENDPOINT: signoz-collector:4317
      SIGNOZ_ACCESS_TOKEN: ${SIGNOZ_ACCESS_TOKEN}
    volumes:
      - ./logs:/app/logs
      - ${KUBECONFIG}:/app/k8s-config:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mgmt-network
    depends_on:
      - postgres
      - redis
      - openbao
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Celery Worker (Production)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mgmt-celery-worker-prod
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      VAULT_URL: https://openbao:8200
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN}
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      SECRET_KEY: ${SECRET_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
    volumes:
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mgmt-network
    depends_on:
      - postgres
      - redis
      - openbao
    restart: unless-stopped
    command: celery -A app.workers.celery_app worker --loglevel=info --concurrency=8
    healthcheck:
      test: ["CMD", "celery", "-A", "app.workers.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat (Production)  
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: mgmt-celery-beat-prod
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/2
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - ./logs:/app/logs
    networks:
      - mgmt-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    command: celery -A app.workers.celery_app beat --loglevel=info

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: mgmt-nginx-prod
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mgmt-network
    depends_on:
      - mgmt-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
    name: mgmt-postgres-prod-data
  redis_data:
    name: mgmt-redis-prod-data
  openbao_data:
    name: mgmt-openbao-prod-data

networks:
  mgmt-network:
    driver: bridge
    name: mgmt-prod-network