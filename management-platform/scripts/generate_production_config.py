#!/usr/bin/env python3
"""
Generate secure production configuration for DotMac Management Platform.

This script creates a production-ready .env file with secure random secrets
and prompts for necessary production values.

Usage:
    python scripts/generate_production_config.py
    python scripts/generate_production_config.py --output .env.production
    python scripts/generate_production_config.py --validate-only
"""

import argparse
import os
import sys
import secrets
from pathlib import Path
from typing import Dict, Any

# Add app to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from app.core.security_validator import SecurityValidator
except ImportError:
    print("‚ùå Could not import security validator. Make sure you're running from the management-platform directory.")
    sys.exit(1)


def generate_secure_secrets() -> Dict[str, str]:
    """Generate secure secrets for production use."""
    return {
        'SECRET_KEY': SecurityValidator.generate_secure_secret(64),
        'JWT_SECRET_KEY': SecurityValidator.generate_secure_secret(64),
        'REDIS_PASSWORD': SecurityValidator.generate_secure_secret(32),
        'VAULT_TOKEN': SecurityValidator.generate_secure_secret(48),
    }


def prompt_for_production_values() -> Dict[str, str]:
    """Interactive prompt for production configuration values."""
    print("\nüîß Production Configuration Setup")
    print("=" * 50)
    print("Please provide the following production values:")
    print("(Press Enter to skip optional values)\n")
    
    values = {}
    
    # Required values
    required_prompts = [
        ('DATABASE_URL', 'Production database URL', 'postgresql+asyncpg://user:pass@host:5432/db'),
        ('REDIS_URL_BASE', 'Production Redis host', 'your-redis-host:6379'),
        ('SIGNOZ_ENDPOINT', 'SignOz monitoring endpoint', 'your-signoz-host:4317'),
    ]
    
    for key, description, example in required_prompts:
        while True:
            value = input(f"{description} (e.g., {example}): ").strip()
            if value:
                values[key] = value
                break
            print("‚ùå This value is required for production deployment.")
    
    # Optional values
    optional_prompts = [
        ('DOMAIN', 'Your production domain', 'yourdomain.com'),
        ('STRIPE_SECRET_KEY', 'Stripe production secret key', 'sk_live_...'),
        ('SENDGRID_API_KEY', 'SendGrid API key', 'SG.xxx'),
        ('AWS_ACCESS_KEY_ID', 'AWS Access Key ID', 'AKIA...'),
        ('AWS_SECRET_ACCESS_KEY', 'AWS Secret Access Key', '...'),
        ('VAULT_URL', 'Vault/OpenBao URL', 'https://vault.yourdomain.com:8200'),
    ]
    
    for key, description, example in optional_prompts:
        value = input(f"{description} (e.g., {example}) [optional]: ").strip()
        if value:
            values[key] = value
    
    return values


def create_production_env_file(output_path: str, interactive: bool = True) -> bool:
    """Create production .env file with secure configuration."""
    
    # Generate secure secrets
    secrets_dict = generate_secure_secrets()
    
    # Get production values
    if interactive:
        prod_values = prompt_for_production_values()
    else:
        print("‚ö†Ô∏è Running in non-interactive mode. You'll need to manually configure production values.")
        prod_values = {}
    
    # Build Redis URLs with generated password
    redis_password = secrets_dict['REDIS_PASSWORD']
    redis_base = prod_values.get('REDIS_URL_BASE', 'localhost:6379')
    redis_urls = {
        'REDIS_URL': f"redis://:{redis_password}@{redis_base}/0",
        'CELERY_BROKER_URL': f"redis://:{redis_password}@{redis_base}/1",
        'CELERY_RESULT_BACKEND': f"redis://:{redis_password}@{redis_base}/2",
    }
    
    # Build CORS origins from domain
    domain = prod_values.get('DOMAIN', 'yourdomain.com')
    cors_origins = [
        f"https://admin.{domain}",
        f"https://manage.{domain}",
        f"https://partners.{domain}"
    ]
    
    # Create production configuration
    config_content = f'''# DotMac Management Platform - Production Configuration
# Generated by generate_production_config.py
# SECURITY: Keep this file secure and never commit to version control

# ==================== ENVIRONMENT ====================
ENVIRONMENT=production
APP_NAME="DotMac Management Platform"
DEBUG=false
LOG_LEVEL=INFO
LOG_FORMAT=json

# ==================== SECURITY (GENERATED) ====================
SECRET_KEY={secrets_dict['SECRET_KEY']}
JWT_SECRET_KEY={secrets_dict['JWT_SECRET_KEY']}
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# ==================== DATABASE ====================
DATABASE_URL={prod_values.get('DATABASE_URL', 'postgresql+asyncpg://user:pass@host:5432/dotmac_mgmt')}
DATABASE_POOL_SIZE=20
DATABASE_MAX_OVERFLOW=40
DATABASE_ECHO=false

# ==================== REDIS (GENERATED PASSWORD) ====================
REDIS_URL={redis_urls['REDIS_URL']}
REDIS_MAX_CONNECTIONS=100

# ==================== CELERY ====================
CELERY_BROKER_URL={redis_urls['CELERY_BROKER_URL']}
CELERY_RESULT_BACKEND={redis_urls['CELERY_RESULT_BACKEND']}
CELERY_WORKER_CONCURRENCY=8

# ==================== SERVER ====================
HOST=0.0.0.0
PORT=8000
RELOAD=false

# ==================== MONITORING ====================
SIGNOZ_ENDPOINT={prod_values.get('SIGNOZ_ENDPOINT', 'localhost:4317')}
SIGNOZ_ACCESS_TOKEN={prod_values.get('SIGNOZ_ACCESS_TOKEN', '')}
ENABLE_METRICS=true

# ==================== EXTERNAL SERVICES ====================
STRIPE_SECRET_KEY={prod_values.get('STRIPE_SECRET_KEY', '')}
STRIPE_WEBHOOK_SECRET={prod_values.get('STRIPE_WEBHOOK_SECRET', '')}
STRIPE_TEST_MODE=false

SENDGRID_API_KEY={prod_values.get('SENDGRID_API_KEY', '')}
SENDGRID_FROM_EMAIL=noreply@{domain}

AWS_ACCESS_KEY_ID={prod_values.get('AWS_ACCESS_KEY_ID', '')}
AWS_SECRET_ACCESS_KEY={prod_values.get('AWS_SECRET_ACCESS_KEY', '')}
AWS_REGION=us-east-1

VAULT_URL={prod_values.get('VAULT_URL', 'https://vault.yourdomain.com:8200')}
VAULT_TOKEN={secrets_dict['VAULT_TOKEN']}

# ==================== NETWORK ====================
CORS_ORIGINS={cors_origins}

# ==================== MULTI-TENANT ====================
ENABLE_TENANT_ISOLATION=true
MAX_TENANTS_PER_INSTANCE=1000
DEFAULT_TENANT_TIER=standard

# ==================== RATE LIMITING ====================
RATE_LIMIT_ENABLED=true
RATE_LIMIT_PER_MINUTE=1000

# ==================== KUBERNETES ====================
KUBERNETES_NAMESPACE_PREFIX=dotmac-tenant
'''
    
    # Write configuration file
    try:
        with open(output_path, 'w') as f:
            f.write(config_content)
        
        # Set secure file permissions
        os.chmod(output_path, 0o600)
        
        print(f"\n‚úÖ Production configuration created: {output_path}")
        print(f"üîí File permissions set to 600 (owner read/write only)")
        
        return True
    
    except Exception as e:
        print(f"‚ùå Failed to create production configuration: {e}")
        return False


def validate_configuration(config_path: str) -> bool:
    """Validate existing production configuration."""
    print(f"\nüîç Validating configuration: {config_path}")
    
    if not os.path.exists(config_path):
        print(f"‚ùå Configuration file not found: {config_path}")
        return False
    
    # Temporarily set environment file for validation
    original_env = os.environ.copy()
    
    try:
        # Load the configuration file
        with open(config_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
        
        # Import and validate with loaded config
        from app.config import Settings
        settings = Settings()
        
        # Run security validation
        validation_result = SecurityValidator.validate_production_config()
        
        # Display results
        print(f"\nüìä Validation Results:")
        print(f"Security Score: {'‚úÖ PASS' if validation_result['is_secure'] else '‚ùå FAIL'}")
        print(f"Production Ready: {'‚úÖ YES' if validation_result['is_production_ready'] else '‚ùå NO'}")
        
        if validation_result['issues']:
            print(f"\n‚ùå Issues Found ({len(validation_result['issues'])}):")
            for issue in validation_result['issues']:
                print(f"  ‚Ä¢ {issue}")
        
        if validation_result['warnings']:
            print(f"\n‚ö†Ô∏è Warnings ({len(validation_result['warnings'])}):")
            for warning in validation_result['warnings']:
                print(f"  ‚Ä¢ {warning}")
        
        if validation_result['recommendations']:
            print(f"\nüí° Recommendations ({len(validation_result['recommendations'])}):")
            for rec in validation_result['recommendations']:
                print(f"  ‚Ä¢ {rec}")
        
        # Secret strength scores
        secret_scores = validation_result.get('secret_strength', {})
        print(f"\nüîê Secret Strength Scores:")
        for key, score in secret_scores.items():
            status = "‚úÖ" if score >= 80 else "‚ö†Ô∏è" if score >= 60 else "‚ùå"
            print(f"  {status} {key}: {score}/100")
        
        return validation_result['is_secure']
    
    except Exception as e:
        print(f"‚ùå Validation failed: {e}")
        return False
    
    finally:
        # Restore original environment
        os.environ.clear()
        os.environ.update(original_env)


def main():
    parser = argparse.ArgumentParser(
        description="Generate secure production configuration for DotMac Management Platform"
    )
    parser.add_argument(
        '--output', 
        default='.env.production',
        help='Output file path (default: .env.production)'
    )
    parser.add_argument(
        '--validate-only',
        action='store_true',
        help='Only validate existing configuration (do not generate)'
    )
    parser.add_argument(
        '--non-interactive',
        action='store_true',
        help='Generate configuration without interactive prompts'
    )
    
    args = parser.parse_args()
    
    print("üöÄ DotMac Management Platform - Production Config Generator")
    print("=" * 60)
    
    if args.validate_only:
        success = validate_configuration(args.output)
        sys.exit(0 if success else 1)
    
    # Check if output file already exists
    if os.path.exists(args.output):
        response = input(f"\n‚ö†Ô∏è File {args.output} already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Operation cancelled.")
            sys.exit(0)
    
    # Generate production configuration
    print("\nüîê Generating secure production configuration...")
    success = create_production_env_file(args.output, not args.non_interactive)
    
    if success:
        print(f"\nüìù Next steps:")
        print(f"1. Review and customize: {args.output}")
        print(f"2. Validate configuration: python {__file__} --validate-only --output {args.output}")
        print(f"3. Deploy with: DOTENV_FILE={args.output} python -m app.main")
        print(f"\nüîí Security reminders:")
        print(f"  ‚Ä¢ Never commit {args.output} to version control")
        print(f"  ‚Ä¢ Store secrets in a secure secret management system")
        print(f"  ‚Ä¢ Rotate secrets regularly (every 90 days)")
        print(f"  ‚Ä¢ Use different secrets for each environment")
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()