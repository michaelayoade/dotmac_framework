# Standardized DotMac Framework Package Configuration Template
# This template ensures consistent tooling across all packages

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# NOTE: Package-specific sections like [project] should be customized per package

[tool.setuptools.packages.find]
where = ["."]
# NOTE: Customize include/exclude patterns per package

[tool.setuptools.package-data]
# NOTE: Add package-specific data patterns
# Example: package_name = ["py.typed", "templates/*.j2", "schemas/*.json"]

# ============================================================================
# CODE FORMATTING & LINTING - UNIFIED CONFIGURATION
# ============================================================================

# Black configuration - Standardized across all packages
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration - ENFORCES COMPLEXITY RULES (NO MORE IGNORING)
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "PLE", # pylint errors
    "PLR", # pylint refactor
    "PLW", # pylint warnings
    "C901", # complexity
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]
unfixable = ["B"]

# COMPLEXITY RULES - NO LONGER IGNORED
[tool.ruff.pylint]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252", "C901", "PLR0913", "PLR0915"]

[tool.ruff.isort]
# NOTE: Customize known-first-party per package

# MyPy configuration - Standardized strict settings
[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# Package-specific module overrides go here
[[tool.mypy.overrides]]
module = [
    # NOTE: Add third-party modules that lack type hints
]
ignore_missing_imports = true

# ============================================================================
# TESTING CONFIGURATION - UNIFIED
# ============================================================================

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",  # Enforce 80% coverage minimum
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]
asyncio_mode = "auto"

# Coverage configuration - Standardized
[tool.coverage.run]
# NOTE: Customize source per package
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 80

# ============================================================================
# SECURITY & DEPENDENCY MANAGEMENT
# ============================================================================

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "test"]
skips = ["B101"]  # Allow assert in tests

# Safety dependency scanning - will be configured in CI/CD
# pip-audit - will be configured in CI/CD
# semgrep - will be configured in CI/CD

# ============================================================================
# DEVELOPMENT DEPENDENCIES - STANDARDIZED
# ============================================================================

# NOTE: Add this to [project.optional-dependencies] in actual packages
# 
# dev = [
#     # Testing
#     "pytest>=7.4.0",
#     "pytest-asyncio>=0.21.0", 
#     "pytest-cov>=4.1.0",
#     "pytest-mock>=3.11.0",
#     "factory-boy>=3.2.0",
#     
#     # Code quality
#     "ruff>=0.1.6",
#     "black>=23.9.0", 
#     "mypy>=1.6.0",
#     
#     # Security
#     "bandit[toml]>=1.7.5",
#     "safety>=2.3.0",
#     "pip-audit>=2.6.0",
#     
#     # Pre-commit hooks
#     "pre-commit>=3.5.0",
# ]