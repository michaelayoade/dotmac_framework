# Docker Compose v2 - version field is obsolete

# ==============================================================================
# Production Override Configuration
# ==============================================================================
# 
# Usage:
#   docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
#
# This file contains production-specific overrides:
#   - Resource limits and reservations
#   - Production restart policies
#   - Security hardening
#   - Performance optimizations
#   - No volume mounts for code
# ==============================================================================

services:
  # ==============================================================================
  # Infrastructure Services - Production Settings
  # ==============================================================================
  
  postgres:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    environment:
      # Production tuning
      POSTGRES_SHARED_BUFFERS: 512MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1536MB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MIN_WAL_SIZE: 1GB
      POSTGRES_MAX_WAL_SIZE: 4GB

  redis:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru

  rabbitmq:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ==============================================================================
  # Backend Services - Production Settings
  # ==============================================================================

  api-gateway:
    restart: always
    # Container names are auto-generated in production
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: warning
      ACCESS_LOG: "false"
      WORKERS: 4
      GRACEFUL_TIMEOUT: 30
      TIMEOUT_KEEP_ALIVE: 5
      # Rate limiting
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_REQUESTS: 1000
      RATE_LIMIT_WINDOW: 60
    volumes: []  # No code mounts in production

  identity:
    restart: always
    # Container names are auto-generated in production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      update_config:
        parallelism: 1
        delay: 10s
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: warning
      WORKERS: 2
      # Security
      MFA_ENABLED: "true"
      SESSION_TIMEOUT: 1800
      MAX_LOGIN_ATTEMPTS: 5
      PASSWORD_MIN_LENGTH: 12
    volumes: []

  billing:
    restart: always
    # Container names are auto-generated in production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: warning
      WORKERS: 2
      # Production Stripe keys (should come from secrets)
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      TAX_CALCULATION_ENABLED: "true"
      PAYMENT_RETRY_ATTEMPTS: 3
    volumes: []

  services:
    restart: always
    # Container names are auto-generated in production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: warning
      WORKERS: 2
    volumes: []

  networking:
    restart: always
    # Container names are auto-generated in production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: warning
      WORKERS: 2
      SNMP_ENABLED: "true"
      SNMP_COMMUNITY: ${SNMP_COMMUNITY}
    volumes: []

  analytics:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: warning
      WORKERS: 2
      BATCH_SIZE: 10000
      RETENTION_DAYS: 90
    volumes: []

  core-ops:
    restart: always
    # Container names are auto-generated in production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: warning
      WORKERS: 2
      JOB_RETENTION_DAYS: 30
      WORKFLOW_MAX_RETRIES: 3
    volumes: []

  core-events:
    restart: always
    # Container names are auto-generated in production
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: warning
      WORKERS: 4
      EVENT_RETENTION_DAYS: 30
      MAX_EVENT_SIZE: 1048576  # 1MB
      KAFKA_ENABLED: "true"
    volumes: []

  # ==============================================================================
  # Frontend Services - Production Settings
  # ==============================================================================

  admin-portal:
    restart: always
    build:
      context: ./frontend/apps/admin
      dockerfile: Dockerfile.production
    command: npm start
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    volumes: []  # No code mounts in production

  customer-portal:
    restart: always
    # Container names are auto-generated in production
    build:
      context: ./frontend/apps/customer
      dockerfile: Dockerfile.production
    command: npm start
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    volumes: []

  reseller-portal:
    restart: always
    build:
      context: ./frontend/apps/reseller
      dockerfile: Dockerfile.production
    command: npm start
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    volumes: []

  # ==============================================================================
  # Monitoring Stack - Production Settings
  # ==============================================================================

  clickhouse:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    environment:
      CLICKHOUSE_MAX_MEMORY_USAGE: 3221225472  # 3GB
      CLICKHOUSE_MAX_MEMORY_USAGE_FOR_USER: 3221225472
      CLICKHOUSE_MAX_CONCURRENT_QUERIES: 100

  signoz-collector:
    restart: always
    # Container names are auto-generated in production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      GOMEMLIMIT: 900MiB

  signoz-query:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  signoz-frontend:
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ==============================================================================
  # Security Services - Production Settings
  # ==============================================================================

  openbao:
    restart: always
    # Container names are auto-generated in production
    command: server  # Production mode, not dev
    deploy:
      replicas: 3  # HA setup
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      BAO_LOG_LEVEL: warning
      BAO_CLUSTER_ADDR: "https://$(hostname -i):8201"
      BAO_API_ADDR: "https://$(hostname -i):8200"
    volumes:
      - openbao-data:/openbao/file
      - ./deployments/openbao/config/production.hcl:/openbao/config/config.hcl:ro
      - ./deployments/openbao/tls:/openbao/tls:ro

  # ==============================================================================
  # Additional Production Services
  # ==============================================================================

  nginx:
    image: nginx:alpine
    container_name: dotmac-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - dotmac-network
    depends_on:
      - api-gateway
      - admin-portal
      - customer-portal
      - reseller-portal
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M

  backup:
    image: postgres:15-alpine
    container_name: dotmac-backup
    restart: always
    command: sh -c "while true; do PGPASSWORD=$$POSTGRES_PASSWORD pg_dump -h postgres -U $$POSTGRES_USER $$POSTGRES_DB | gzip > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql.gz && find /backups -type f -mtime +7 -delete; sleep 86400; done"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./backups:/backups
    networks:
      - dotmac-network
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M