# Docker Compose for DotMac Production Deployment with Plugin Support
version: '3.8'

services:
  # Management Platform
  management:
    build:
      context: .
      dockerfile: docker/Dockerfile.management
      target: production
    container_name: dotmac-management
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_USER=${DB_USER}
      - DATABASE_NAME=${DB_NAME}
      
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # Plugin System Configuration
      - PLUGIN_REGISTRY_PATH=/app/plugins
      - PLUGIN_DATA_PATH=/app/data
      - PLUGIN_LOGS_PATH=/app/logs
      - PLUGIN_UPLOAD_PATH=/app/uploads
      - INIT_PLUGIN_REGISTRY=true
      - PLUGIN_CLEANUP_ON_SHUTDOWN=true
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # Application Settings
      - DOTMAC_ENVIRONMENT=production
      - API_V1_STR=/api/v1
      - PROJECT_NAME=DotMac Management Platform
      - CORS_ORIGINS=${CORS_ORIGINS}
      
      # Monitoring
      - ENABLE_MONITORING=true
      - MONITORING_ENDPOINT=${MONITORING_ENDPOINT}
      - SENTRY_DSN=${SENTRY_DSN}
      
      # External Services
      - COOLIFY_API_URL=${COOLIFY_API_URL}
      - COOLIFY_API_KEY=${COOLIFY_API_KEY}
    volumes:
      - plugin_registry:/app/plugins
      - plugin_data:/app/data
      - plugin_logs:/app/logs
      - plugin_uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dotmac-network
      - plugin-network

  # Plugin Runner Service
  plugin-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile.plugin-runner
    container_name: dotmac-plugin-runner
    restart: unless-stopped
    environment:
      - PLUGIN_REGISTRY_PATH=/app/plugins
      - PLUGIN_DATA_PATH=/app/data
      - PLUGIN_LOGS_PATH=/app/logs
      - DOTMAC_ENVIRONMENT=production
      - MANAGEMENT_API_URL=http://management:8000
    volumes:
      - plugin_registry:/app/plugins:ro
      - plugin_data:/app/data
      - plugin_logs:/app/logs
    depends_on:
      - management
      - redis
    networks:
      - plugin-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Database
  db:
    image: postgres:15-alpine
    container_name: dotmac-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dotmac-network

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: dotmac-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - dotmac-network
      - plugin-network

  # Nginx Load Balancer with Plugin-Aware Routing
  nginx:
    build:
      context: .
      dockerfile: docker/Dockerfile.nginx
    container_name: dotmac-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/plugin-routes.conf:/etc/nginx/conf.d/plugin-routes.conf:ro
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/nginx/ssl
    depends_on:
      - management
    networks:
      - dotmac-network
      - plugin-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Plugin Registry Service
  plugin-registry:
    build:
      context: .
      dockerfile: docker/Dockerfile.plugin-registry
    container_name: dotmac-plugin-registry
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - REGISTRY_STORAGE_PATH=/app/registry
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - plugin_registry:/app/registry
      - plugin_metadata:/app/metadata
    depends_on:
      - db
      - redis
    networks:
      - plugin-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: dotmac-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - dotmac-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: dotmac-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./docker/monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    networks:
      - dotmac-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  plugin_registry:
    driver: local
  plugin_data:
    driver: local
  plugin_logs:
    driver: local
  plugin_uploads:
    driver: local
  plugin_metadata:
    driver: local
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  dotmac-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  plugin-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16