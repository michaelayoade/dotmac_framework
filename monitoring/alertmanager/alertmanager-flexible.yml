# Flexible Alertmanager Configuration for DotMac Framework
# Configure only the notification methods you actually use

global:
  # Global settings - configure only what you need
  smtp_smarthost: '${SMTP_SMARTHOST:-}'
  smtp_from: '${SMTP_FROM:-}'
  smtp_auth_username: '${SMTP_AUTH_USERNAME:-}'
  smtp_auth_password: '${SMTP_AUTH_PASSWORD:-}'

# Templates for alert formatting (optional)
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# Route configuration - define your routing logic
route:
  group_by: ['alertname', 'cluster', 'service']
  group_wait: 10s
  group_interval: 10s
  repeat_interval: 1h
  receiver: 'default'
  routes:
    # Critical alerts - route to your preferred high-priority channel
    - match:
        severity: critical
      receiver: 'critical-alerts'
      group_wait: 5s
      repeat_interval: 5m
      continue: true
    
    # Service-specific routing (customize as needed)
    - match:
        service: database
      receiver: 'database-team'
      continue: true
    
    # Development/testing alerts (lower priority)
    - match:
        environment: development
      receiver: 'dev-alerts'
      repeat_interval: 6h

# Receivers - configure only the notification methods you use
receivers:
  # Default receiver - choose your preferred method
  - name: 'default'
    # Option 1: Email notifications
    email_configs:
      - to: '${DEFAULT_EMAIL_TO:-admin@localhost}'
        subject: 'DotMac Alert: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
        body: |
          Alert Details:
          {{ range .Alerts }}
          Summary: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Service: {{ .Labels.service }}
          Instance: {{ .Labels.instance }}
          Runbook: {{ .Annotations.runbook_url }}
          {{ end }}
    
    # Option 2: Generic webhook (works with many services)
    webhook_configs:
      - url: '${DEFAULT_WEBHOOK_URL:-}'
        send_resolved: true
        http_config:
          basic_auth:
            username: '${WEBHOOK_USERNAME:-}'
            password: '${WEBHOOK_PASSWORD:-}'

  # Critical alerts receiver - multiple notification methods
  - name: 'critical-alerts'
    # Email for critical alerts
    email_configs:
      - to: '${CRITICAL_EMAIL_TO:-admin@localhost}'
        subject: 'üö® CRITICAL: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
        body: |
          üö® CRITICAL ALERT üö®
          
          {{ range .Alerts }}
          Summary: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Service: {{ .Labels.service }}
          Instance: {{ .Labels.instance }}
          Runbook: {{ .Annotations.runbook_url }}
          {{ end }}
    
    # Webhook for critical alerts (PagerDuty, OpsGenie, etc.)
    webhook_configs:
      - url: '${CRITICAL_WEBHOOK_URL:-}'
        send_resolved: true
        
    # SMS via webhook (if configured)
    webhook_configs:
      - url: '${SMS_WEBHOOK_URL:-}'
        send_resolved: false
        http_config:
          basic_auth:
            username: '${SMS_USERNAME:-}'
            password: '${SMS_PASSWORD:-}'

  # Database team alerts
  - name: 'database-team'
    email_configs:
      - to: '${DATABASE_TEAM_EMAIL:-admin@localhost}'
        subject: 'üóÑÔ∏è Database Alert: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
    
    webhook_configs:
      - url: '${DATABASE_TEAM_WEBHOOK:-}'

  # Development alerts (low priority)
  - name: 'dev-alerts'
    email_configs:
      - to: '${DEV_TEAM_EMAIL:-dev@localhost}'
        subject: 'üîß Dev Alert: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'

# Inhibit rules - prevent spam
inhibit_rules:
  # Inhibit any warning-level alerts if there are critical alerts for the same service
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['service', 'instance']
  
  # Inhibit high error rate alerts if service is down
  - source_match:
      alertname: 'ServiceDown'
    target_match_re:
      alertname: 'HighErrorRate|HighResponseTime'
    equal: ['service']