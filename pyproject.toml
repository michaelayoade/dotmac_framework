[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "dotmac-framework"
version = "0.1.0"
description = "DotMac ISP Framework - Production-ready ISP management platform"
authors = ["DotMac Team <team@dotmac.io>"]
readme = "README.md"
homepage = "https://dotmac.io"
repository = "https://github.com/dotmac/dotmac-framework"
documentation = "https://docs.dotmac.io"
keywords = ["isp", "framework", "management", "telecommunications", "networking"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Intended Audience :: Telecommunications Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules"
]


[tool.poetry.dependencies]
python = ">=3.9,<4.0"
# Core Framework Dependencies
fastapi = ">=0.100.0"
uvicorn = {extras = ["standard"], version = ">=0.23.0"}
pydantic = ">=2.0.0"
pydantic-settings = ">=2.0.0"
sqlalchemy = ">=2.0.0"
alembic = ">=1.11.0"
asyncpg = ">=0.28.0"
redis = ">=5.0.0"

# Core Foundation Packages  
dotmac-core = {path = "packages/dotmac-core", develop = true}
dotmac-service-kernel = {path = "packages/dotmac-service-kernel", develop = true}
dotmac-workflows = {path = "packages/dotmac-workflows", develop = true}

# Infrastructure Packages
dotmac-communications = {path = "packages/dotmac-communications", develop = true}
dotmac-networking = {path = "packages/dotmac-networking", develop = true}

# Platform Services (Consolidated)
dotmac-platform-services = {path = "packages/dotmac-platform-services", develop = true}

# Business Logic & Applications
dotmac-application = {path = "packages/dotmac-application", develop = true}
dotmac-business-logic = {path = "packages/dotmac-business-logic", develop = true}
dotmac-plugins = {path = "packages/dotmac-plugins", develop = true}

# Security & Ticketing
dotmac-security = {path = "packages/dotmac-security", develop = true}
dotmac-ticketing = {path = "packages/dotmac-ticketing", develop = true}

# Authentication & Security
python-jose = {extras = ["cryptography"], version = ">=3.3.0"}
passlib = {extras = ["bcrypt"], version = ">=1.7.0"}
python-multipart = ">=0.0.6"
cryptography = ">=41.0.0"
pyotp = ">=2.9.0"
qrcode = {extras = ["pil"], version = ">=7.4.0"}
bcrypt = ">=4.0.0"
ldap3 = ">=2.9.0"

# HTTP & API Clients
httpx = ">=0.24.0"
aiohttp = ">=3.8.0"
requests = ">=2.31.0"
websockets = ">=11.0.0"
starlette = ">=0.27.0"

# Configuration & Environment
python-dotenv = ">=1.0.0"
click = ">=8.1.0"
typing-extensions = ">=4.7.0"

# Logging & Observability
structlog = ">=23.1.0"
opentelemetry-sdk = ">=1.20.0"
opentelemetry-exporter-otlp = ">=1.20.0"
opentelemetry-instrumentation-fastapi = ">=0.41b0"
opentelemetry-instrumentation-asgi = ">=0.41b0"
opentelemetry-instrumentation-logging = ">=0.41b0"
opentelemetry-instrumentation-requests = ">=0.41b0"
opentelemetry-instrumentation-httpx = ">=0.41b0"
opentelemetry-instrumentation-sqlalchemy = ">=0.41b0"
prometheus-client = ">=0.17.0"
psutil = ">=5.9.0"

# GIS and Spatial Dependencies
geoalchemy2 = ">=0.14.0"
shapely = ">=2.0.0"
geopy = ">=2.3.0"
networkx = ">=3.1.0"

# Core Template & Processing Dependencies (Required)
jinja2 = ">=3.1.0"
email-validator = ">=2.0.0"
tenacity = ">=8.0.0"

# Optional Dependencies for Development & Data Processing Only
pandas = {version = ">=2.0.0", optional = true}
numpy = {version = ">=1.24.0", optional = true}
matplotlib = {version = ">=3.8.0", optional = true}
pillow = {version = ">=10.0.0", optional = true}

# Cloud & Infrastructure
boto3 = ">=1.28.0"
botocore = ">=1.31.0"
docker = ">=6.1.0"

# Networking Core (DNS required for basic operations)
dnspython = ">=2.4.0"
paramiko = ">=3.3.0"

# Task Processing & Messaging
celery = ">=5.3.0"
dramatiq = {extras = ["redis"], version = ">=1.13.0"}
pika = ">=1.3.0"
asyncio-mqtt = ">=0.14.0"

# File Handling (Core)
aiofiles = ">=23.2.0"

# Data Validation (Core)
jsonschema = ">=4.19.0"

[tool.poetry.group.dev.dependencies]
# Testing Framework
pytest = ">=7.4.0"
pytest-asyncio = ">=0.21.0"
pytest-cov = ">=4.1.0"
pytest-xdist = ">=3.3.0"
pytest-mock = ">=3.11.0"
pytest-benchmark = ">=4.0.0"
factory-boy = ">=3.3.0"
freezegun = ">=1.2.0"
responses = ">=0.23.0"
faker = ">=19.0.0"

# Code Quality & Formatting
ruff = ">=0.0.280"
black = ">=23.7.0"
mypy = ">=1.5.0"
pre-commit = ">=3.3.0"
isort = ">=5.12.0"

# Load Testing & Performance
playwright = ">=1.55.0"
requests-mock = ">=1.11.0"

# Development Tools
ipython = ">=8.14.0"
ipdb = ">=0.13.0"
watchdog = ">=3.0.0"
python-lsp-server = {extras = ["all"], version = ">=1.7.0"}

[tool.poetry.group.docs.dependencies]
mkdocs = ">=1.5.0"
mkdocs-material = ">=9.1.0"
mkdocstrings = {extras = ["python"], version = ">=0.22.0"}
mkdocs-gen-files = ">=0.5.0"
mkdocs-literate-nav = ">=0.6.0"
mkdocs-section-index = ">=0.3.0"

[tool.poetry.group.security.dependencies]
bandit = ">=1.7.0"
safety = ">=2.3.0"
semgrep = ">=1.45.0"

[tool.poetry.extras]
# Data Processing & Analytics (Development/Analysis)
data = ["pandas", "numpy", "matplotlib", "pillow"]

# Email & Templates (Core optional feature)
email = ["jinja2"]

# All development/data features
dev-data = ["pandas", "numpy", "matplotlib", "pillow", "jinja2"]

[tool.poetry.scripts]
dotmac = "dotmac_isp.cli:main"
dotmac-migrate = "dotmac_shared.database.migrate:main"
dotmac-admin = "dotmac_management.cli:main"

[tool.pytest.ini_options]
testpaths = [
    "tests",
    "src/dotmac_shared/*/tests",
    "src/dotmac_management/*/tests"
]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--tb=short",
    "--strict-markers",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-v"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Tests that take longer than 1 second",
    "security: Security-related tests",
    "performance: Performance benchmarking tests"
]
asyncio_mode = "auto"
filterwarnings = [
    # Suppress warnings that clutter test output
    "ignore:numpy.dtype size changed.*binary incompatibility:RuntimeWarning",
    "ignore:Unable to import Axes3D.*multiple versions:UserWarning",
    "ignore:datetime.datetime.utcnow.*deprecated:DeprecationWarning",
    "ignore:json_encoders.*deprecated.*Pydantic V2:PydanticDeprecatedSince20",
    "ignore:declarative_base.*deprecated since. 2.0:sqlalchemy.exc.MovedIn20Warning"
]

[tool.ruff]
target-version = "py39"
line-length = 120

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "S",   # bandit
    "T20", # flake8-print
    "BLE", # flake8-blind-except (flag broad except)
]
ignore = [
    "S101",  # use of assert
    "S104",  # possible binding to all interfaces
    "S108",  # probable insecure usage of temp file/directory
    "S110",  # try-except-pass (acceptable in some contexts)
    "BLE001", # blind except Exception (will be refactored later)
    "S602",  # subprocess shell = "true (needed for some deployment scripts)"
    "B008",  # FastAPI Depends() call in default args is intentional
    "B028",  # No explicit stacklevel argument found (not always necessary)
    "T201",  # print statements (allowed in scripts and utilities)
    "PLR2004",  # Magic value used in comparison (acceptable for business constants)
    "ARG002",  # Unused method argument (interface compliance, future extensibility)
    "S105",  # Possible hardcoded password (often legitimate constant names)
    "S106",  # Possible hardcoded password in function defaults (test/example code)
    "S107",  # Possible hardcoded password in defaults (acceptable for examples)
    "S311",  # Standard pseudo-random generators (acceptable in non-crypto contexts)
    "S324",  # Insecure hash functions (MD5 acceptable for non-crypto checksums)
    "ANN001", # Missing type annotation for function argument (gradual typing)
    "ANN002", # Missing type annotation for *args (gradual typing)
    "ANN003", # Missing type annotation for **kwargs (gradual typing)
    "ANN201", # Missing return type annotation for public functions (gradual typing)
    "ANN202", # Missing return type annotation for private functions (gradual typing)
    "ANN401", # Dynamically typed expressions (Any) - acceptable during migration
]
# Restrict linting scope to source; exclude generated, tooling, and tests.
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".venv",
    "tests",
    "alembic",
    "tools",
    ".dev-artifacts",
    "docs",
    "scripts",
    "deployment",
    ".security",
    "templates",
    "docker/test-services"
]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401", "F403"]  # Allow unused imports and star imports for package exports
"src/*/migrations/*" = ["E501"]  # Allow long lines in migrations
"scripts/*" = ["T201", "S602", "S110"]  # Allow prints, subprocess, and try-except-pass in scripts
"deployment/*" = ["T201", "S602", "S110"]  # Allow prints, subprocess, and try-except-pass in deployment
"src/dotmac_shared/container_monitoring/*" = ["BLE001"]  # Allow broad exceptions in resilience-focused collectors
"src/dotmac_shared/benchmarking/*" = ["BLE001"]  # Allow broad exceptions in benchmarking utilities
"src/dotmac_shared/services_framework/*" = ["BLE001"]  # Allow broad exceptions in framework bootstrap paths
"src/dotmac_shared/integrations/*" = ["BLE001"]  # Allow broad exceptions around external integrations
"frontend/**/*" = ["BLE001"]  # Allow broad exceptions in demo/marketing frontend backend helpers
"packages/**/*" = ["BLE001"]  # Allow broad exceptions in package examples/adapters for now
"src/**/testing/**/*" = ["BLE001"]  # Allow broad exceptions in internal testing utilities
"src/dotmac_shared/workflows/*" = ["BLE001"]  # Workflows may intentionally guard broadly
# Re-enable temporary ignores for remaining plugin/service folders
"src/dotmac_management/core/plugins/**" = ["BLE001"]
"src/dotmac_management/core/plugins/loader.py" = []
# duplicate removed: "src/dotmac_management/core/plugins/health_monitor.py" already present above
"src/dotmac_management/core/plugins/registry.py" = []
"src/dotmac_management/core/plugins/hooks.py" = []
"src/dotmac_management/services/**" = ["BLE001"]

# Strict BLE enforcement for refactored management files
"src/dotmac_management/core/plugins/config_manager.py" = []
"src/dotmac_management/core/plugins/health_monitor.py" = []
"src/dotmac_management/core/plugins/essential_plugins.py" = []
"src/dotmac_management/services/onboarding_service.py" = []
"src/dotmac_management/services/vps_provisioning.py" = []
"src/dotmac_management/services/websocket_service.py" = []
"src/dotmac_management/cli.py" = []
"src/dotmac_management/main.py" = []

# INCREMENTAL BLE001 ENFORCEMENT: Areas requiring refactoring in future
"src/dotmac_management/api/**" = ["BLE001"]            # API handlers - future targeted refactoring
"src/dotmac_management/api/v1/licensing_endpoints.py" = []  # strict BLE for refactored file
"src/dotmac_management/api/v1/admin.py" = []           # strict BLE for refactored file
"src/dotmac_management/api/v1/bgops.py" = []           # strict BLE for refactored file
"src/dotmac_management/api/v1/file_router.py" = []      # strict BLE for refactored file
"src/dotmac_management/api/v1/domain_router.py" = []    # strict BLE for refactored file
"src/dotmac_management/api/v1/commissions.py" = []      # strict BLE for refactored file
"src/dotmac_management/user_management/**" = ["BLE001"] # User management - future targeted refactoring
"src/dotmac_management/workflows/**" = ["BLE001"]       # Workflows - future targeted refactoring
"src/dotmac_management/use_cases/**" = ["BLE001"]       # Use cases - future targeted refactoring
"src/dotmac_isp/api/file_router.py" = []               # strict BLE for ISP API file router
"src/dotmac_management/user_management/services/base_service.py" = []  # strict BLE for base service
"src/dotmac_management/user_management/services/user_service.py" = []  # strict BLE for user service

# STRICT ENFORCEMENT: Critical modules must use specific exceptions
"src/dotmac_shared/repositories/async_base_repository.py" = []
"src/dotmac_shared/repositories/sync_base_repository.py" = []
"src/dotmac_management/core/sanitization.py" = []
".security/*" = ["T201"]  # Allow prints in security scanning scripts
"templates/*" = ["E501", "F821", "F841"]  # Allow long lines and undefined/unused vars in templates
"docker/test-services/*" = ["T201", "E501"]  # Allow prints and long lines in test services
"conftest.py" = ["E402"]  # Allow imports after statements in conftest
"examples/*" = ["E402", "N806", "F821"]  # Allow flexible imports and naming in examples
"config/*" = ["N805"]  # Allow different argument naming patterns in config files
"frontend/*" = ["E501", "B904", "N806", "E722"]  # Allow long lines and flexible patterns in frontend
# Template and content files - allow long lines for structured content
"**/email_templates.py" = ["E501"]  # Email templates with HTML content
"**/templates.py" = ["E501"]  # Template files with structured content
"**/formatters.py" = ["E501"]  # Formatter files with long format strings
"**/pdf_generator.py" = ["E501"]  # PDF generators with structured content
"**/portal_interface.py" = ["E501"]  # Portal interfaces with formatted responses
"**/partner_success_monitoring.py" = ["E501"]  # Monitoring templates
"**/customer_intelligence_service.py" = ["E501"]  # Intelligence service outputs
"**/compliance_engine.py" = ["E501"]  # Compliance reports and templates
"**/regulatory_reporter.py" = ["E501"]  # Regulatory reporting templates
# Testing files - allow test-specific patterns
"**/testing/**" = ["E501", "N806", "S311", "S324", "B017", "S105", "B023", "S112", "F401", "E402", "BLE001"]  # Testing directory - all patterns
"**/generators.py" = ["S311"]  # Test data generators can use standard random
"**/factories.py" = ["B027"]  # Test factories can have empty abstract methods
# Package-specific line length handling (packages using different line lengths) - REMOVED DUPLICATES
# Legitimate technical patterns that violate rules
"**/adapters/**" = ["F401", "BLE001", "F811", "E402", "E501", "ANN001", "ANN002", "ANN003", "ANN201", "ANN202"]  # Adapters pattern files
"**/middleware/**" = ["ANN001", "B008"]  # Middleware uses framework patterns (Depends calls, flexible typing)
"**/exception_handlers.py" = ["BLE001", "ANN001"]  # Exception handlers catch broad exceptions by design
"**/serve.py" = ["ANN001", "N806"]  # Server startup scripts use simple patterns
"**/factory.py" = ["ANN001", "B008"]  # Factories use dependency injection patterns
"**/lifecycle.py" = ["ANN001"]  # Lifecycle hooks use framework patterns
"**/endpoints.py" = ["ANN001"]  # FastAPI endpoints use framework-driven typing
"**/observability_integration.py" = ["BLE001"]  # Observability needs broad exception catching
"**/performance_benchmarking_example.py" = ["BLE001"]  # Benchmarking handles various error conditions

# CI/CD Ready Ignore Patterns - Architectural False Positives  
"**/*adapter*.py" = ["F401", "BLE001"]  # Adapter pattern files
"**/*handler*.py" = ["ANN001", "BLE001", "E402"]  # Handler pattern files
"**/*middleware*.py" = ["ANN001", "B008", "E402"]  # Middleware pattern files
"**/*factory*.py" = ["ANN001", "B008"]  # Factory pattern files
"**/*processor*.py" = ["F401", "BLE001"]  # Processor pattern files
"**/config*.py" = ["N805", "ANN001"]  # Configuration files
"**/settings*.py" = ["N805", "ANN001"]  # Settings files
"**/serve*.py" = ["N806", "ANN001"]  # Server files
"**/__init__.py" = ["F401", "F403", "E402"]  # Package interface files
"**/*template*.py" = ["E501"]  # Template files
"**/*formatter*.py" = ["E501"]  # Formatter files
"**/*generator*.py" = ["E501", "F401"]  # Generator files
"**/*email*.py" = ["E501"]  # Email template files
"**/test*.py" = ["S311", "S105", "B017"]  # Test files
"**/mock*.py" = ["S311", "F401"]  # Mock files
# Additional architectural patterns
"**/*routes*.py" = ["B008"]  # FastAPI route files with Depends()
"**/*router*.py" = ["B008", "N805"]  # Router files with Depends() and Pydantic validators
"**/*models*.py" = ["F811", "E402"]  # Model files with class redefinitions
"**/schemas*.py" = ["N805", "E402"]  # Schema files with validator patterns
"**/api/**" = ["N805"]  # API files with Pydantic validators
"**/base*.py" = ["E402", "N805"]  # Base class files
"**/utils*.py" = ["N806", "E501"]  # Utility files with single-letter variables
"**/core*.py" = ["E402", "N805", "F811"]  # Core module files
"**/security/*.py" = ["S324"]  # Security files may use MD5 for non-crypto purposes

# INCREMENTAL BLE001 lines consolidated above in primary section

# Package-specific comprehensive exclusions to prevent CI/CD failures
"packages/dotmac-application/**" = ["E501", "E402", "F401", "F811", "B008", "ANN001", "ANN002", "ANN003", "ANN201", "ANN202"]
"packages/dotmac-business-logic/**" = ["E501", "E402", "F401", "F811", "B008", "ANN001", "ANN002", "ANN003", "ANN201", "ANN202", "S106", "S107"]
"packages/dotmac-plugins/**" = ["E501", "E402", "F401", "F811", "B008", "ANN001", "ANN002", "ANN003", "ANN201", "ANN202"]
"packages/dotmac-networking/**" = ["E501", "E402", "F401", "F811", "B008", "ANN001", "ANN002", "ANN003", "ANN201", "ANN202"]
"packages/dotmac-platform-services/**" = ["E501", "E402", "F401", "F811", "B008", "ANN001", "ANN002", "ANN003", "ANN201", "ANN202"]
"packages/dotmac-communications/**" = ["E501", "E402", "F401", "F811", "B008", "ANN001", "ANN002", "ANN003", "ANN201", "ANN202"]
"packages/dotmac-core/**" = ["E501", "E402", "F401", "F811", "B008", "ANN001", "ANN002", "ANN003", "ANN201", "ANN202"]
"packages/dotmac-security/**" = ["E501", "E402", "F401", "F811", "B008", "ANN001", "ANN002", "ANN003", "ANN201", "ANN202"]
"packages/dotmac-ticketing/**" = ["E501", "E402", "F401", "F811", "B008", "ANN001", "ANN002", "ANN003", "ANN201", "ANN202"]

# Examples and adapters - allow flexible patterns
"**/examples/**" = ["E402", "E501", "F401", "F811", "N806", "F821", "S106", "S107", "S311", "ANN001", "ANN002", "ANN003", "ANN201", "ANN202"]
# Merged with comprehensive adapters entry above

# Development and testing utilities
"**/dev/**" = ["E501", "T201", "S602", "S110", "F401", "E402"]
# Merged with comprehensive testing entry above

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = "\\.pyi?$"
extend-exclude = '''
/(
    migrations
    | node_modules
    | \\.venv
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_column_numbers = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "geoalchemy2.*",
    "shapely.*",
    "geopy.*",
    "redis.*",
    "structlog.*",
    "factory.*",
    "freezegun.*",
    "responses.*",
    "playwright.*"
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/node_modules/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == \"__main__\":",
    "if TYPE_CHECKING:",
    "class .*\\(Protocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
