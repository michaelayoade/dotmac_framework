version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-dotmac_platform}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: ${DB_AUTH_METHOD:-md5}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-dotmac_platform}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '0.5'
        reservations:
          memory: 512m
          cpus: '0.25'

  # Redis cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512m
          cpus: '0.5'
        reservations:
          memory: 256m
          cpus: '0.25'

  # Dotmac Platform API
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
      target: production
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Environment
      - ENVIRONMENT=production
      
      # Database
      - DB_URL=postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-dotmac_platform}
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=30
      
      # Redis
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - REDIS_MAX_CONNECTIONS=20
      
      # Authentication
      - AUTH_SECRET_KEY=${AUTH_SECRET_KEY}
      - AUTH_INITIAL_ADMIN_PASSWORD=${INITIAL_ADMIN_PASSWORD}
      - AUTH_ADMIN_EMAIL=${ADMIN_EMAIL}
      - AUTH_ACCESS_TOKEN_EXPIRE_MINUTES=15
      - AUTH_REFRESH_TOKEN_EXPIRE_DAYS=7
      
      # Security
      - SECURITY_CORS_ORIGINS=${CORS_ORIGINS:-["https://yourdomain.com"]}
      - SECURITY_ALLOWED_HOSTS=${ALLOWED_HOSTS:-["yourdomain.com"]}
      - SECURITY_RATE_LIMIT_REQUESTS_PER_MINUTE=1000
      - SECURITY_RATE_LIMIT_BURST_SIZE=50
      
      # Logging
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      
      # Application
      - HOST=0.0.0.0
      - PORT=8000
      - DOCS_URL=
      - REDOC_URL=
    volumes:
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    networks:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1.0'
        reservations:
          memory: 512m
          cpus: '0.25'
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.25'

  # Log aggregation (optional)
  fluentd:
    image: fluentd:v1.16-1
    restart: unless-stopped
    volumes:
      - app_logs:/fluentd/log/app:ro
      - nginx_logs:/fluentd/log/nginx:ro
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
    networks:
      - backend
    depends_on:
      - api
    deploy:
      resources:
        limits:
          memory: 256m
          cpus: '0.25'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  app_uploads:
    driver: local
  nginx_logs:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true