version: '3.8'

services:
  # Redis for cache integration tests
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL for database integration tests
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-test-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d test_db"]
      interval: 5s
      timeout: 3s
      retries: 5

  # httpbin for webhook integration tests
  httpbin:
    image: mccutchen/go-httpbin:v2.9.0
    ports:
      - "8080:8080"
    # Disable health check for now
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/status/200"]
    #   interval: 5s
    #   timeout: 3s
    #   retries: 5

  # Prism mock server for API contract testing
  prism:
    image: stoplight/prism:4
    command: mock -h 0.0.0.0 /tmp/openapi.yaml
    volumes:
      - ./tests/fixtures/openapi.yaml:/tmp/openapi.yaml:ro
    deploy:
      resources:
        limits:
          memory: 256m
        reservations:
          memory: 128m
    # Disable health check for now
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4010"]
    #   interval: 5s
    #   timeout: 3s
    #   retries: 5

  # Unit tests
  test-unit:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
    depends_on:
      - redis
      - postgres
    environment:
      - ENVIRONMENT=testing
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql+asyncpg://test:test@postgres:5432/test_db
    volumes:
      - .:/app
      - test_reports:/app/htmlcov
    command: >
      sh -c "
        pytest tests/test_*.py --verbose --tb=short --cov=dotmac_platform --cov-report=term-missing
      "

  # Integration tests
  test-integration:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: integration
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      httpbin:
        condition: service_started
      prism:
        condition: service_started
    environment:
      - ENVIRONMENT=testing
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/dotmac_test
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
      - PRISM_URL=http://prism:4010
    volumes:
      - .:/app
      - test_reports:/app/integration_reports
    command: >
      sh -c "
        /usr/local/bin/wait-for-services.sh &&
        pytest tests/integration/ 
        --verbose 
        --tb=short 
        -m integration
        --html=/app/integration_reports/integration_report.html
        --self-contained-html
        --junit-xml=/app/integration_reports/integration_junit.xml
      "

  # Smoke tests
  test-smoke:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: smoke
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - ENVIRONMENT=testing
      - REDIS_URL=redis://redis:6379/2
      - DATABASE_URL=postgresql+asyncpg://test:test@postgres:5432/test_db
    volumes:
      - .:/app
      - test_reports:/app/smoke_reports
    command: >
      sh -c "
        pytest tests/smoke/ 
        --verbose 
        --tb=short 
        -m smoke
        --maxfail=1
        --html=/app/smoke_reports/smoke_report.html
        --self-contained-html
        --junit-xml=/app/smoke_reports/smoke_junit.xml
      "

  # Performance tests
  test-performance:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: performance
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - ENVIRONMENT=testing
      - REDIS_URL=redis://redis:6379/3
      - DATABASE_URL=postgresql+asyncpg://test:test@postgres:5432/test_db
    volumes:
      - .:/app
      - test_reports:/app/performance_reports
    command: >
      sh -c "
        pytest tests/ 
        --verbose 
        --tb=short 
        -m performance
        --benchmark-only
        --benchmark-sort=mean
        --benchmark-json=/app/performance_reports/benchmark.json
        --benchmark-histogram=/app/performance_reports/histogram
      "

  # Lint and format checks
  test-lint:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: lint
    volumes:
      - .:/app
      - test_reports:/app/lint_reports
    command: >
      sh -c "
        echo 'Running Black...' &&
        black --check --diff . > /app/lint_reports/black_report.txt 2>&1 || true &&
        echo 'Running Ruff...' &&
        ruff check . --output-format=json > /app/lint_reports/ruff_report.json 2>&1 || true &&
        echo 'Running MyPy...' &&
        mypy dotmac_platform --json-report /app/lint_reports/mypy_report 2>&1 || true &&
        echo 'Running isort...' &&
        isort --check-only --diff . > /app/lint_reports/isort_report.txt 2>&1 || true &&
        echo 'Lint checks completed. Check reports in /app/lint_reports/'
      "

  # Contract conformance tests
  test-contracts:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
    depends_on:
      prism:
        condition: service_healthy
    environment:
      - ENVIRONMENT=testing
      - PRISM_URL=http://prism:4010
    volumes:
      - .:/app
      - test_reports:/app/contract_reports
    command: >
      sh -c "
        pytest tests/contracts/ 
        --verbose 
        --tb=short 
        -m contracts
        --html=/app/contract_reports/contract_report.html
        --self-contained-html
        --junit-xml=/app/contract_reports/contract_junit.xml
      "

  # All tests runner
  test-all:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      httpbin:
        condition: service_healthy
      prism:
        condition: service_healthy
    environment:
      - ENVIRONMENT=testing
      - REDIS_URL=redis://redis:6379/4
      - DATABASE_URL=postgresql+asyncpg://test:test@postgres:5432/test_db
      - HTTPBIN_URL=http://httpbin
      - PRISM_URL=http://prism:4010
    volumes:
      - .:/app
      - test_reports:/app/all_reports
    command: >
      sh -c "
        echo 'Running comprehensive test suite...' &&
        /usr/local/bin/wait-for-services.sh &&
        pytest tests/ 
        --verbose 
        --tb=short 
        --cov=dotmac_platform 
        --cov-report=html:/app/all_reports/coverage 
        --cov-report=term-missing 
        --cov-report=xml:/app/all_reports/coverage.xml
        --html=/app/all_reports/comprehensive_report.html
        --self-contained-html
        --junit-xml=/app/all_reports/comprehensive_junit.xml
        --benchmark-json=/app/all_reports/benchmark.json
      "

volumes:
  redis_data:
  postgres_data:
  test_reports:
