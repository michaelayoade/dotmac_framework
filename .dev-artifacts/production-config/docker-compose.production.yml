version: '3.8'
services:
  dotmac-management:
    build:
      context: .
      dockerfile: Dockerfile.management
    environment:
    - DATABASE_URL=${DATABASE_URL}
    - REDIS_URL=${REDIS_URL}
    - BUSINESS_LOGIC_WORKFLOWS_ENABLED=true
    - WORKFLOW_DATABASE_POOL_SIZE=20
    - WORKFLOW_MAX_CONCURRENT_SAGAS=100
    - PROMETHEUS_METRICS_ENABLED=true
    - LOG_LEVEL=INFO
    ports:
    - 8000:8000
    volumes:
    - ./logs:/app/logs
    - ./config/production.yaml:/app/config/production.yaml:ro
    depends_on:
    - postgres
    - redis
    - prometheus
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8000/api/workflows/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  dotmac-isp:
    build:
      context: .
      dockerfile: Dockerfile.isp
    environment:
    - DATABASE_URL=${DATABASE_URL}
    - REDIS_URL=${REDIS_URL}
    - BUSINESS_LOGIC_WORKFLOWS_ENABLED=true
    - WORKFLOW_DATABASE_POOL_SIZE=15
    - LOG_LEVEL=INFO
    ports:
    - 8001:8000
    depends_on:
    - postgres
    - redis
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8000/health
      interval: 30s
      timeout: 10s
      retries: 3
  postgres:
    image: postgres:15-alpine
    environment:
    - POSTGRES_DB=dotmac_production
    - POSTGRES_USER=${POSTGRES_USER}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
    - postgres_data:/var/lib/postgresql/data
    - ./sql/init-workflow-tables.sql:/docker-entrypoint-initdb.d/10-workflow-tables.sql:ro
    ports:
    - 5432:5432
    restart: unless-stopped
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U ${POSTGRES_USER} -d dotmac_production
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7-alpine
    ports:
    - 6379:6379
    volumes:
    - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 10s
      timeout: 3s
      retries: 3
  prometheus:
    image: prom/prometheus:latest
    ports:
    - 9090:9090
    volumes:
    - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - ./monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml:ro
    - prometheus_data:/prometheus
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    - --storage.tsdb.retention.time=30d
    - --web.enable-lifecycle
    restart: unless-stopped
  grafana:
    image: grafana/grafana:latest
    ports:
    - 3000:3000
    volumes:
    - grafana_data:/var/lib/grafana
    - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    - ./monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    - ./monitoring/dashboards:/var/lib/grafana/dashboards:ro
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
  alertmanager:
    image: prom/alertmanager:latest
    ports:
    - 9093:9093
    volumes:
    - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    restart: unless-stopped
volumes:
  postgres_data: {}
  redis_data: {}
  prometheus_data: {}
  grafana_data: {}
networks:
  default:
    driver: bridge
