# DotMac Platform - Production Nginx Configuration
# Optimized for high performance, security, and SSL termination

user www-data;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules (uncomment when JWT module is available)
# load_module modules/ngx_http_auth_jwt_module.so;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # JWT Configuration (uncomment when JWT module is available)
    # auth_jwt_key_file /etc/nginx/jwt/jwt.key;
    
    # Tenant Mapping - Extract tenant from host header
    map $host $tenant_id {
        default "default";
        ~^(?<tenant>[^.]+)\.isp\.dotmac\.local$ $tenant;
        ~^(?<tenant>[^.]+)\.yourdomain\.com$ $tenant;
        ~^portal\.dotmac\.local$ "portal";
        ~^admin\.dotmac\.local$ "admin";
        ~^monitoring\.dotmac\.local$ "monitoring";
    }
    
    # WebSocket connection limits per tenant
    map $tenant_id $ws_limit_zone {
        default "ws_default";
        ~.+ "ws_$tenant_id";
    }
    limit_conn_zone $ws_limit_zone zone=ws_conn:10m;

    # Enhanced DDoS Protection - Connection Limits
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    limit_conn_zone $server_name zone=servers:10m;
    
    # Enhanced Rate Limiting Zones
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=search:10m rate=20r/s;
    
    # Per-tenant rate limiting using extracted tenant
    limit_req_zone $tenant_id zone=tenant:20m rate=100r/s;
    
    # WebSocket rate limiting per tenant
    limit_req_zone $tenant_id zone=ws_rate:10m rate=50r/s;

    # DDoS Protection - Request Size Limits
    client_body_buffer_size 1K;
    client_header_buffer_size 1k;
    client_max_body_size 10M;
    large_client_header_buffers 2 1k;

    # Timeout Settings for Slow DDoS Protection
    client_body_timeout 10s;
    client_header_timeout 10s;
    keepalive_timeout 15s;
    send_timeout 10s;
    reset_timedout_connection on;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Content-Security-Policy "default-src 'self'" always;

    # Gzip Settings
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css application/json application/javascript;

    # Logging with tenant information
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'tenant="$tenant_id" rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main buffer=32k flush=1m;

    # Upstream Configurations
    upstream api_backend {
        least_conn;
        server api-gateway:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Main Server Block
    server {
        listen 80;
        listen [::]:80;
        server_name _;

        # Apply connection limits
        limit_conn addr 10;
        limit_conn servers 1000;

        # Root API endpoints with enhanced rate limiting
        location /api/ {
            # Apply rate limiting with burst and nodelay
            limit_req zone=api burst=50 nodelay;
            limit_req zone=tenant burst=200 nodelay;
            limit_req_status 429;
            
            # Security headers for API
            add_header X-RateLimit-Limit "30" always;
            add_header X-RateLimit-Remaining "$limit_req_remaining" always;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
        }

        # Authentication endpoints with strict rate limiting
        location ~ ^/api/(login|register|reset-password) {
            limit_req zone=login burst=2 nodelay;
            limit_req_status 429;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Search endpoints with moderate rate limiting
        location /api/search {
            limit_req zone=search burst=10 nodelay;
            limit_req_status 429;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
        }

        # Health check endpoint (no rate limiting)
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Block common attack patterns
        location ~ (\.php|\.aspx|\.asp|\.jsp|\.cgi|wp-admin|wp-login|xmlrpc) {
            deny all;
            return 404;
        }

        # Error pages
        error_page 429 /429.html;
        location = /429.html {
            internal;
            default_type text/html;
            return 429 '<!DOCTYPE html><html><body><h1>429 Too Many Requests</h1><p>Rate limit exceeded. Please try again later.</p></body></html>';
        }

        error_page 503 /503.html;
        location = /503.html {
            internal;
            default_type text/html;
            return 503 '<!DOCTYPE html><html><body><h1>503 Service Temporarily Unavailable</h1><p>Please try again later.</p></body></html>';
        }
    }

    # Load additional configuration files
    include /etc/nginx/conf.d/*.conf;
}