version: '3.8'

networks:
  dotmac-backend:
    driver: bridge
  dotmac-frontend:
    driver: bridge
  voltha-net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  etcd_data:
  kafka_data:
  zookeeper_data:

services:
  # Core Infrastructure (Existing)
  postgres:
    image: postgres:16-alpine
    container_name: dotmac-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: dotmac_platform
      POSTGRES_USER: dotmac
      POSTGRES_PASSWORD: dotmac_secure_password
      POSTGRES_MULTIPLE_DATABASES: "dotmac_platform,dotmac_events,dotmac_billing,dotmac_identity,dotmac_networking,dotmac_analytics,dotmac_services"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh:ro
    networks:
      - dotmac-backend
      - voltha-net
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dotmac -d dotmac_platform"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: dotmac-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - dotmac-backend
      - voltha-net
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # VOLTHA Infrastructure
  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: dotmac-etcd
    restart: unless-stopped
    command: >
      etcd --name=etcd0
      --data-dir=/etcd-data
      --listen-client-urls=http://0.0.0.0:2379
      --advertise-client-urls=http://etcd:2379
      --listen-peer-urls=http://0.0.0.0:2380
      --initial-advertise-peer-urls=http://etcd:2380
      --initial-cluster=etcd0=http://etcd:2380
      --initial-cluster-token=etcd-cluster-1
      --initial-cluster-state=new
      --auto-compaction-retention=1
    volumes:
      - etcd_data:/etcd-data
    networks:
      - voltha-net
    ports:
      - "2379:2379"
      - "2380:2380"
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: dotmac-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - voltha-net
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "sh", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: dotmac-kafka
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - voltha-net
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # VOLTHA Core Services
  voltha-core:
    image: voltha/voltha-core:latest
    container_name: dotmac-voltha-core
    restart: unless-stopped
    environment:
      - VOLTHA_NAMESPACE=voltha
      - KV_STORE_HOST=etcd
      - KV_STORE_PORT=2379
      - KAFKA_CLUSTER_ADDRESS=kafka:9092
      - LOG_LEVEL=INFO
    ports:
      - "50057:50057"  # gRPC API
    networks:
      - voltha-net
    depends_on:
      etcd:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50057"]
      interval: 30s
      timeout: 10s
      retries: 3

  voltha-ofagent:
    image: voltha/voltha-ofagent:latest
    container_name: dotmac-voltha-ofagent
    restart: unless-stopped
    environment:
      - VOLTHA_GRPC_ENDPOINT=voltha-core:50057
      - ONOS_CONTROLLER=onos:6653
      - LOG_LEVEL=INFO
    networks:
      - voltha-net
    depends_on:
      voltha-core:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "ofagent"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: ONOS SDN Controller
  onos:
    image: onosproject/onos:2.5.8
    container_name: dotmac-onos
    restart: unless-stopped
    environment:
      - JAVA_OPTS=-Xmx2G
    ports:
      - "8181:8181"  # Web UI
      - "8101:8101"  # SSH CLI
      - "6653:6653"  # OpenFlow
    networks:
      - voltha-net
      - dotmac-frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8181/onos/v1/applications"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Clean FreeRADIUS Server
  freeradius:
    image: freeradius/freeradius-server:latest
    container_name: dotmac-freeradius
    restart: unless-stopped
    environment:
      - RADIUS_DB_HOST=postgres
      - RADIUS_DB_PORT=5432
      - RADIUS_DB_NAME=dotmac_networking
      - RADIUS_DB_USER=dotmac
      - RADIUS_DB_PASSWORD=dotmac_secure_password
    ports:
      - "1812:1812/udp"  # RADIUS Authentication
      - "1813:1813/udp"  # RADIUS Accounting
      - "3799:3799/udp"  # RADIUS CoA (Change of Authorization)
    networks:
      - dotmac-backend
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "radtest", "test", "test", "localhost", "1812", "testing123", "||", "true"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced DotMac API Gateway
  api-gateway:
    build: 
      context: ./dotmac_api_gateway
      dockerfile: Dockerfile
    container_name: dotmac-api-gateway
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://dotmac:dotmac_secure_password@postgres:5432/dotmac_platform
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    networks:
      - dotmac-backend
      - dotmac-frontend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced DotMac Networking Service
  networking-enhanced:
    build:
      context: ./dotmac_networking
      dockerfile: Dockerfile.enhanced
    container_name: dotmac-networking-enhanced
    restart: unless-stopped
    environment:
      # Database connections
      - DATABASE_URL=postgresql://dotmac:dotmac_secure_password@postgres:5432/dotmac_networking
      - REDIS_URL=redis://redis:6379/5
      
      # FreeRADIUS integration
      - FREERADIUS_HOST=freeradius
      - FREERADIUS_AUTH_PORT=1812
      - FREERADIUS_ACCT_PORT=1813
      - FREERADIUS_COA_PORT=3799
      - FREERADIUS_SECRET=dotmac-radius-secret
      
      # VOLTHA integration
      - VOLTHA_ENDPOINT=voltha-core:50057
      - VOLTHA_ENABLED=true
      - KAFKA_ENDPOINT=kafka:9092
      - ONOS_ENDPOINT=onos:8181
      
      # SSH automation
      - SSH_MAX_CONCURRENT=10
      - SSH_TIMEOUT=30
      - SSH_CONNECTION_POOL_SIZE=20
      
      # NetworkX topology
      - TOPOLOGY_AUTO_DISCOVERY=true
      - TOPOLOGY_CACHE_TTL=300
      
      # General settings
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - TENANT_ID=default
    ports:
      - "8006:8000"
    networks:
      - dotmac-backend
      - voltha-net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      freeradius:
        condition: service_healthy
      voltha-core:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced Platform Service
  platform:
    build:
      context: ./dotmac_platform
      dockerfile: Dockerfile.prod
    container_name: dotmac-platform
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://dotmac:dotmac_secure_password@postgres:5432/dotmac_platform
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - AUTH_SECRET_KEY=your-secret-key-change-in-production
      # Integration with enhanced networking
      - NETWORKING_SERVICE_URL=http://networking-enhanced:8000
      - VOLTHA_INTEGRATION_ENABLED=true
    ports:
      - "8001:8000"
    networks:
      - dotmac-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      networking-enhanced:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Events Service
  core-events:
    build:
      context: ./dotmac_core_events
      dockerfile: Dockerfile
    container_name: dotmac-core-events
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://dotmac:dotmac_secure_password@postgres:5432/dotmac_events
      - REDIS_URL=redis://redis:6379/1
      - KAFKA_URL=kafka:9092
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    ports:
      - "8002:8000"
    networks:
      - dotmac-backend
      - voltha-net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # Identity Service
  identity:
    build:
      context: ./dotmac_identity
      dockerfile: Dockerfile
    container_name: dotmac-identity
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://dotmac:dotmac_secure_password@postgres:5432/dotmac_identity
      - REDIS_URL=redis://redis:6379/3
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    ports:
      - "8004:8000"
    networks:
      - dotmac-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Billing Service
  billing:
    build:
      context: ./dotmac_billing
      dockerfile: Dockerfile
    container_name: dotmac-billing
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://dotmac:dotmac_secure_password@postgres:5432/dotmac_billing
      - REDIS_URL=redis://redis:6379/4
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    ports:
      - "8005:8000"
    networks:
      - dotmac-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Analytics Service
  analytics:
    build:
      context: ./dotmac_analytics
      dockerfile: Dockerfile
    container_name: dotmac-analytics
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://dotmac:dotmac_secure_password@postgres:5432/dotmac_analytics
      - REDIS_URL=redis://redis:6379/6
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    ports:
      - "8007:8000"
    networks:
      - dotmac-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Services Management
  services:
    build:
      context: ./dotmac_services
      dockerfile: Dockerfile
    container_name: dotmac-services
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://dotmac:dotmac_secure_password@postgres:5432/dotmac_services
      - REDIS_URL=redis://redis:6379/7
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    ports:
      - "8008:8000"
    networks:
      - dotmac-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # DevTools Service
  devtools:
    build:
      context: ./dotmac_devtools
      dockerfile: Dockerfile
    container_name: dotmac-devtools
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://dotmac:dotmac_secure_password@postgres:5432/dotmac_platform
      - REDIS_URL=redis://redis:6379/8
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
    ports:
      - "8009:8000"
    networks:
      - dotmac-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Contract Publishing Service (Prism Mock Server)
  contracts:
    image: stoplight/prism:latest
    container_name: dotmac-contracts
    command: mock -h 0.0.0.0 -p 4010 /contracts/openapi.yaml
    volumes:
      - ./dotmac_platform/tests/fixtures/openapi.yaml:/contracts/openapi.yaml:ro
    networks:
      - dotmac-frontend
    ports:
      - "4010:4010"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4010/health"]
      interval: 30s
      timeout: 5s
      retries: 3