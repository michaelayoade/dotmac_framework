name: CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/dotmac-events/**'
      - '.github/workflows/events-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'packages/dotmac-events/**'
      - '.github/workflows/events-ci.yml'

env:
  PYTHON_VERSION: '3.12'

defaults:
  run:
    working-directory: packages/dotmac-events

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run black format check
        run: black --check src tests
      
      - name: Run ruff linting
        run: ruff check src tests
      
      - name: Run mypy type checking
        run: mypy src

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        extras: ['base', 'redis', 'kafka', 'all']
        include:
          # Test Avro codec separately
          - python-version: '3.12'
            extras: 'avro'
          # Test OpenTelemetry integration
          - python-version: '3.12'
            extras: 'otel'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      kafka:
        image: confluentinc/cp-kafka:latest
        ports:
          - 9092:9092
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 40s
      
      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        ports:
          - 2181:2181
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install base dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Install package with extras
        run: |
          if [ "${{ matrix.extras }}" = "base" ]; then
            pip install -e .
          else
            pip install -e ".[${{ matrix.extras }}]"
          fi
      
      - name: Wait for services
        if: matrix.extras == 'redis' || matrix.extras == 'kafka' || matrix.extras == 'all'
        run: |
          # Wait for Redis
          timeout 30s bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
          
          # Wait for Kafka (only if needed)
          if [ "${{ matrix.extras }}" = "kafka" ] || [ "${{ matrix.extras }}" = "all" ]; then
            timeout 60s bash -c 'until kafka-topics --bootstrap-server localhost:9092 --list; do sleep 2; done'
          fi
      
      - name: Run tests
        run: |
          if [ "${{ matrix.extras }}" = "base" ]; then
            pytest tests/ -v --cov=src --cov-report=xml --cov-report=term -m "not redis and not kafka"
          elif [ "${{ matrix.extras }}" = "redis" ]; then
            pytest tests/ -v --cov=src --cov-report=xml -m "not kafka"
          elif [ "${{ matrix.extras }}" = "kafka" ]; then
            pytest tests/ -v --cov=src --cov-report=xml -m "not redis" 
          elif [ "${{ matrix.extras }}" = "avro" ]; then
            pytest tests/ -v --cov=src --cov-report=xml -k "avro" --ignore=tests/test_redis_streams.py --ignore=tests/test_kafka.py
          elif [ "${{ matrix.extras }}" = "otel" ]; then
            pytest tests/ -v --cov=src --cov-report=xml -k "observability" --ignore=tests/test_redis_streams.py --ignore=tests/test_kafka.py
          else
            pytest tests/ -v --cov=src --cov-report=xml
          fi
        env:
          REDIS_URL: redis://localhost:6379
          KAFKA_BOOTSTRAP_SERVERS: localhost:9092
      
      - name: Upload coverage to Codecov
        if: matrix.python-version == env.PYTHON_VERSION && matrix.extras == 'all'
        uses: codecov/codecov-action@v4
        with:
          file: packages/dotmac-events/coverage.xml
          flags: events
          name: events-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install package with all extras
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[all]"
      
      - name: Wait for Redis
        run: timeout 30s bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
      
      - name: Run integration tests
        run: pytest tests/ -v -m integration --cov=src --cov-report=xml
        env:
          REDIS_URL: redis://localhost:6379
      
      - name: Test package import
        run: python -c "import dotmac.events; print('✅ Package imports successfully')"
      
      - name: Test basic functionality
        run: |
          python -c "
          import asyncio
          from dotmac.events import Event, create_memory_bus, create_redis_bus, RedisConfig
          
          async def test():
              # Test memory bus
              bus = create_memory_bus()
              event = Event(topic='test', payload={'message': 'hello'})
              await bus.publish(event)
              await bus.close()
              
              # Test Redis bus
              config = RedisConfig(host='localhost', port=6379)
              redis_bus = create_redis_bus(config)
              await redis_bus.publish(event)
              await redis_bus.close()
              
              print('✅ Basic functionality works')
          
          asyncio.run(test())
          "

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: events-package
          path: packages/dotmac-events/dist/
          retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[all]"
          pip install bandit safety
      
      - name: Run bandit security check
        run: bandit -r src/
      
      - name: Run safety check
        run: safety check

  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check README
        run: |
          if [ ! -f README.md ]; then
            echo "❌ README.md not found"
            exit 1
          fi
          echo "✅ README.md found"
      
      - name: Check CHANGELOG
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "❌ CHANGELOG.md not found"
            exit 1
          fi
          echo "✅ CHANGELOG.md found"
      
      - name: Validate package metadata
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          python -c "
          import dotmac.events
          print(f'✅ Package version: {getattr(dotmac.events, \"__version__\", \"unknown\")}')
          print(f'✅ Package name: {getattr(dotmac.events, \"__package_name__\", \"unknown\")}')
          "