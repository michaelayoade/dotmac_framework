[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "dotmac-websockets"
version = "1.0.0"
description = "DotMac WebSocket Gateway - Real-time communication with scaling and tenant support"
authors = ["DotMac Team <dev@dotmac.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/dotmac/dotmac-websockets"
repository = "https://github.com/dotmac/dotmac-websockets"
documentation = "https://docs.dotmac.com/websockets"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
]
packages = [{include = "dotmac", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
# Core dependencies
pydantic = "^2.0.0"
websockets = "^12.0"
asyncio-throttle = "^1.0.2"
# Optional dependencies
redis = {version = "^5.0.0", optional = true}
fastapi = {version = "^0.104.0", optional = true}
uvicorn = {version = "^0.24.0", optional = true}
# Observability (optional)
opentelemetry-api = {version = "^1.21.0", optional = true}
opentelemetry-sdk = {version = "^1.21.0", optional = true}
# Authentication (optional)
pyjwt = {version = "^2.8.0", optional = true}
cryptography = {version = "^41.0.0", optional = true}

[tool.poetry.extras]
# Core extras
redis = ["redis"]
fastapi = ["fastapi", "uvicorn"]
# Full feature sets
auth = ["pyjwt", "cryptography"]
observability = ["opentelemetry-api", "opentelemetry-sdk"]
all = ["redis", "fastapi", "uvicorn", "pyjwt", "cryptography", "opentelemetry-api", "opentelemetry-sdk"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^23.7.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
pre-commit = "^3.3.0"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_optional = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = "--strict-markers --disable-warnings"
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "redis: Tests requiring Redis",
    "fastapi: Tests requiring FastAPI",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]