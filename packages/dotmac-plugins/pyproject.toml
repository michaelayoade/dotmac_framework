[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dotmac-plugins"
version = "1.0.0"
description = "Standalone plugin system for DotMac Framework with typed interfaces and lifecycle management"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "DotMac Framework Team"}
]
keywords = ["plugins", "dotmac", "framework", "lifecycle", "registry"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Archiving :: Packaging",
]

dependencies = [
    "typing_extensions>=4.6.0",
    "importlib_metadata>=6.0.0; python_version<'3.12'",
]

[project.optional-dependencies]
fastapi = [
    "fastapi>=0.110.0",
    "starlette>=0.36.0",
]
otel = [
    "opentelemetry-api>=1.25.0",
]
security = [
    "cryptography>=42.0.0",
]
db = [
    "SQLAlchemy>=2.0.0",
]
all = [
    "dotmac-plugins[fastapi,otel,security,db]",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.5.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
]

[project.urls]
Homepage = "https://github.com/dotmac-framework/dotmac-plugins"
Repository = "https://github.com/dotmac-framework/dotmac-plugins"
Documentation = "https://docs.dotmac-framework.com/plugins/"
Changelog = "https://github.com/dotmac-framework/dotmac-plugins/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["src"]
include = ["dotmac*"]

[tool.setuptools.package-data]
"dotmac.plugins" = ["py.typed"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.black]
target-version = ['py310']
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]