version: '3.8'

# Multi-Application Tenant Template
# This template supports multiple applications within a single tenant container stack
# Variables are replaced by the Application Orchestrator during provisioning

services:
  # Shared Infrastructure Services

  # Tenant-specific PostgreSQL Database (Shared across all apps)
  postgres-${TENANT_ID}:
    image: postgres:15-alpine
    container_name: postgres-tenant-${TENANT_ID}
    environment:
      POSTGRES_DB: dotmac_${TENANT_ID}
      POSTGRES_USER: user_${TENANT_ID}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_${TENANT_ID}_data:/var/lib/postgresql/data
      - ./scripts/init-multi-app-database.sh:/docker-entrypoint-initdb.d/init-database.sh:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - tenant-${TENANT_ID}-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_${TENANT_ID} -d dotmac_${TENANT_ID}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${TENANT_DB_CPU_LIMIT:-2.0}'
          memory: ${TENANT_DB_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${TENANT_DB_CPU_RESERVATION:-0.5}'
          memory: ${TENANT_DB_MEMORY_RESERVATION:-1G}
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.service_type=database"
      - "dotmac.shared_service=true"

  # Tenant-specific Redis Cache (Shared across all apps)
  redis-${TENANT_ID}:
    image: redis:7-alpine
    container_name: redis-tenant-${TENANT_ID}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory ${REDIS_MAX_MEMORY:-512mb} --maxmemory-policy allkeys-lru
    volumes:
      - redis_${TENANT_ID}_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - tenant-${TENANT_ID}-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${TENANT_REDIS_CPU_LIMIT:-1.0}'
          memory: ${TENANT_REDIS_MEMORY_LIMIT:-1G}
        reservations:
          cpus: '${TENANT_REDIS_CPU_RESERVATION:-0.25}'
          memory: ${TENANT_REDIS_MEMORY_RESERVATION:-256M}
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.service_type=cache"
      - "dotmac.shared_service=true"

  # Tenant-specific OpenBao Secrets Manager (Optional)
  openbao-${TENANT_ID}:
    image: openbao/openbao:latest
    container_name: openbao-tenant-${TENANT_ID}
    environment:
      OPENBAO_DEV_ROOT_TOKEN_ID: ${OPENBAO_ROOT_TOKEN}
      OPENBAO_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - openbao_${TENANT_ID}_data:/openbao/data
      - openbao_${TENANT_ID}_logs:/openbao/logs
    ports:
      - "${OPENBAO_PORT:-8200}:8200"
    networks:
      - tenant-${TENANT_ID}-network
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8200/v1/sys/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${TENANT_VAULT_CPU_LIMIT:-0.5}'
          memory: ${TENANT_VAULT_MEMORY_LIMIT:-512M}
        reservations:
          cpus: '${TENANT_VAULT_CPU_RESERVATION:-0.1}'
          memory: ${TENANT_VAULT_MEMORY_RESERVATION:-256M}
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.service_type=secrets"
      - "dotmac.shared_service=true"
    profiles:
      - vault

  # Dynamic Application Services (Generated by Application Orchestrator)
  # These services are added dynamically based on the ApplicationDeployment configuration

  # ISP Framework Application (Default)
  isp-framework-main-${TENANT_ID}:
    image: ${ISP_FRAMEWORK_IMAGE:-dotmac/isp-framework:latest}
    container_name: isp-framework-main-${TENANT_ID}
    environment:
      # Base Configuration
      TENANT_ID: ${TENANT_ID}
      PARTNER_ID: ${PARTNER_ID:-default}
      PLAN_TYPE: ${PLAN_TYPE:-standard}

      # Database Configuration
      DATABASE_URL: postgresql://user_${TENANT_ID}:${POSTGRES_PASSWORD}@postgres-${TENANT_ID}:5432/dotmac_${TENANT_ID}

      # Cache Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-${TENANT_ID}:6379/0

      # Secrets Configuration
      OPENBAO_ADDR: http://openbao-${TENANT_ID}:8200
      OPENBAO_TOKEN: ${OPENBAO_ROOT_TOKEN}

      # Application-Specific Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}

      # Service Discovery
      SERVICE_REGISTRY_URL: http://service-registry-${TENANT_ID}:8080

      # Observability
      SIGNOZ_ENDPOINT: ${SIGNOZ_ENDPOINT:-http://signoz-collector:4317}
      PROMETHEUS_MULTIPROC_DIR: /tmp/prometheus_multiproc_dir

      # Features
      FEATURE_FLAGS: ${ISP_FRAMEWORK_FEATURES:-{}}

      # Custom Environment Variables (from ApplicationDeployment.environment_overrides)
      ${ISP_FRAMEWORK_ENV_OVERRIDES}
    volumes:
      - isp_framework_${TENANT_ID}_uploads:/app/uploads
      - isp_framework_${TENANT_ID}_logs:/app/logs
      - prometheus_multiproc_dir_${TENANT_ID}:/tmp/prometheus_multiproc_dir
    ports:
      - "${ISP_FRAMEWORK_PORT:-8000}:8000"
    networks:
      - tenant-${TENANT_ID}-network
    depends_on:
      postgres-${TENANT_ID}:
        condition: service_healthy
      redis-${TENANT_ID}:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${ISP_FRAMEWORK_CPU_LIMIT:-2.0}'
          memory: ${ISP_FRAMEWORK_MEMORY_LIMIT:-2G}
        reservations:
          cpus: '${ISP_FRAMEWORK_CPU_RESERVATION:-0.5}'
          memory: ${ISP_FRAMEWORK_MEMORY_RESERVATION:-1G}
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.app_type=isp_framework"
      - "dotmac.instance_name=main"
      - "dotmac.category=core"
      - "traefik.enable=true"
      - "traefik.http.routers.isp-framework-${TENANT_ID}.rule=Host(`main.${TENANT_ID}.dotmac.cloud`) || Host(`${TENANT_ID}.dotmac.cloud`)"
      - "traefik.http.routers.isp-framework-${TENANT_ID}.tls=true"
      - "traefik.http.routers.isp-framework-${TENANT_ID}.tls.certresolver=letsencrypt"
      - "traefik.http.services.isp-framework-${TENANT_ID}.loadbalancer.server.port=8000"

  # Status Dashboard Application (Optional Utility)
  status-dashboard-monitor-${TENANT_ID}:
    image: ${STATUS_DASHBOARD_IMAGE:-dotmac/status-dashboard:latest}
    container_name: status-dashboard-monitor-${TENANT_ID}
    environment:
      TENANT_ID: ${TENANT_ID}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-${TENANT_ID}:6379/1
      MONITOR_ENDPOINTS: |
        {
          "isp_framework": "http://isp-framework-main-${TENANT_ID}:8000/health",
          "database": "postgres-${TENANT_ID}:5432",
          "cache": "redis-${TENANT_ID}:6379"
        }
    ports:
      - "${STATUS_DASHBOARD_PORT:-3000}:3000"
    networks:
      - tenant-${TENANT_ID}-network
    depends_on:
      redis-${TENANT_ID}:
        condition: service_healthy
      isp-framework-main-${TENANT_ID}:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${STATUS_DASHBOARD_CPU_LIMIT:-0.5}'
          memory: ${STATUS_DASHBOARD_MEMORY_LIMIT:-512M}
        reservations:
          cpus: '${STATUS_DASHBOARD_CPU_RESERVATION:-0.1}'
          memory: ${STATUS_DASHBOARD_MEMORY_RESERVATION:-256M}
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.app_type=status_dashboard"
      - "dotmac.instance_name=monitor"
      - "dotmac.category=utility"
      - "traefik.enable=true"
      - "traefik.http.routers.status-dashboard-${TENANT_ID}.rule=Host(`status.${TENANT_ID}.dotmac.cloud`)"
      - "traefik.http.routers.status-dashboard-${TENANT_ID}.tls=true"
      - "traefik.http.routers.status-dashboard-${TENANT_ID}.tls.certresolver=letsencrypt"
      - "traefik.http.services.status-dashboard-${TENANT_ID}.loadbalancer.server.port=3000"
    profiles:
      - monitoring

  # Service Registry for Inter-App Communication
  service-registry-${TENANT_ID}:
    image: consul:latest
    container_name: service-registry-${TENANT_ID}
    environment:
      CONSUL_BIND_INTERFACE: eth0
    command: consul agent -dev -bind=0.0.0.0 -client=0.0.0.0 -datacenter=${TENANT_ID}
    ports:
      - "${CONSUL_PORT:-8500}:8500"
    networks:
      - tenant-${TENANT_ID}-network
    volumes:
      - consul_${TENANT_ID}_data:/consul/data
    healthcheck:
      test: ["CMD", "consul", "info"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '${CONSUL_CPU_LIMIT:-0.5}'
          memory: ${CONSUL_MEMORY_LIMIT:-512M}
        reservations:
          cpus: '${CONSUL_CPU_RESERVATION:-0.1}'
          memory: ${CONSUL_MEMORY_RESERVATION:-256M}
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.service_type=service_registry"
      - "dotmac.shared_service=true"
    profiles:
      - service-discovery

networks:
  tenant-${TENANT_ID}-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: "br-tenant-${TENANT_ID}"
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.network_type=tenant_isolated"

volumes:
  # Shared Infrastructure Volumes
  postgres_${TENANT_ID}_data:
    driver: local
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.volume_type=database"

  redis_${TENANT_ID}_data:
    driver: local
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.volume_type=cache"

  openbao_${TENANT_ID}_data:
    driver: local
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.volume_type=secrets"

  openbao_${TENANT_ID}_logs:
    driver: local
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.volume_type=logs"

  consul_${TENANT_ID}_data:
    driver: local
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.volume_type=service_registry"

  # Application-Specific Volumes
  isp_framework_${TENANT_ID}_uploads:
    driver: local
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.app_type=isp_framework"
      - "dotmac.volume_type=uploads"

  isp_framework_${TENANT_ID}_logs:
    driver: local
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.app_type=isp_framework"
      - "dotmac.volume_type=logs"

  prometheus_multiproc_dir_${TENANT_ID}:
    driver: local
    labels:
      - "dotmac.tenant_id=${TENANT_ID}"
      - "dotmac.volume_type=metrics"

# Secrets (These would be managed by the Application Orchestrator)
secrets:
  postgres_password_${TENANT_ID}:
    external: true

  redis_password_${TENANT_ID}:
    external: true

  jwt_secret_${TENANT_ID}:
    external: true

  encryption_key_${TENANT_ID}:
    external: true

# Configuration for different deployment profiles
# Use: docker-compose --profile monitoring --profile service-discovery up -d
# This allows selective deployment of optional services
