# Staging Configuration for DotMac Framework
# Intelligent CI/CD Pipeline - Staging Environment

environment: staging
deployment_mode: intelligent_cicd_staging
framework_version: "1.0.0-staging"

# Domain and SSL Configuration (Staging)
domain: staging.dotmac.framework
ssl_enabled: true
ssl_certificate_path: /etc/ssl/certs/staging-dotmac-framework.crt
ssl_private_key_path: /etc/ssl/private/staging-dotmac-framework.key

# Staging Pipeline Settings (Production-like but more forgiving)
intelligent_pipeline:
  test_success_threshold: 95.0 # Slightly relaxed from production
  quality_gate_enforcement: strict
  auto_deployment_enabled: true
  auto_remediation_enabled: true
  max_remediation_attempts: 4
  deployment_timeout: 1200 # 20 minutes
  rollback_timeout: 240 # 4 minutes

# Portal Applications Configuration (Staging)
portals:
  frontend:
    admin:
      port: 3001
      path: frontend/apps/admin
      replicas: 1 # Single replica for staging
      resources:
        cpu_limit: "800m"
        memory_limit: "768Mi"
        cpu_request: "300m"
        memory_request: "384Mi"
      environment_variables:
        NODE_ENV: production
        NEXT_PUBLIC_ENV: staging
        NEXT_PUBLIC_API_URL: https://api.staging.dotmac.framework
        NEXT_PUBLIC_PORTAL_TYPE: admin
        NEXT_PUBLIC_DEBUG: false
      health_check:
        path: /api/health
        interval: 45
        timeout: 8
        retries: 3

    customer:
      port: 3002
      path: frontend/apps/customer
      replicas: 2 # Slightly higher for testing load
      resources:
        cpu_limit: "600m"
        memory_limit: "768Mi"
        cpu_request: "300m"
        memory_request: "384Mi"
      environment_variables:
        NODE_ENV: production
        NEXT_PUBLIC_ENV: staging
        NEXT_PUBLIC_API_URL: https://api.staging.dotmac.framework
        NEXT_PUBLIC_PORTAL_TYPE: customer
        NEXT_PUBLIC_DEBUG: false
      health_check:
        path: /api/health
        interval: 45
        timeout: 8
        retries: 3

    reseller:
      port: 3003
      path: frontend/apps/reseller
      replicas: 1
      resources:
        cpu_limit: "600m"
        memory_limit: "768Mi"
        cpu_request: "300m"
        memory_request: "384Mi"
      environment_variables:
        NODE_ENV: production
        NEXT_PUBLIC_ENV: staging
        NEXT_PUBLIC_API_URL: https://api.staging.dotmac.framework
        NEXT_PUBLIC_PORTAL_TYPE: reseller
        NEXT_PUBLIC_DEBUG: false
      health_check:
        path: /api/health
        interval: 45
        timeout: 8
        retries: 3

    technician:
      port: 3004
      path: frontend/apps/technician
      replicas: 1
      resources:
        cpu_limit: "500m"
        memory_limit: "512Mi"
        cpu_request: "250m"
        memory_request: "256Mi"
      environment_variables:
        NODE_ENV: production
        NEXT_PUBLIC_ENV: staging
        NEXT_PUBLIC_API_URL: https://api.staging.dotmac.framework
        NEXT_PUBLIC_PORTAL_TYPE: technician
        NEXT_PUBLIC_OFFLINE_SUPPORT: true
        NEXT_PUBLIC_DEBUG: false
      health_check:
        path: /api/health
        interval: 45
        timeout: 8
        retries: 3

  backend:
    api_gateway:
      port: 8000
      service: dotmac_api_gateway
      replicas: 2
      resources:
        cpu_limit: "1200m"
        memory_limit: "1.5Gi"
        cpu_request: "600m"
        memory_request: "768Mi"
      environment_variables:
        ENVIRONMENT: staging
        LOG_LEVEL: info
        CORS_ORIGINS: "https://admin.staging.dotmac.framework,https://customer.staging.dotmac.framework,https://reseller.staging.dotmac.framework,https://technician.staging.dotmac.framework"
        RATE_LIMIT_REQUESTS_PER_MINUTE: 500
        DEBUG: false
      health_check:
        path: /health
        interval: 30
        timeout: 5
        retries: 3

    identity:
      port: 8001
      service: dotmac_identity
      replicas: 1
      resources:
        cpu_limit: "800m"
        memory_limit: "768Mi"
        cpu_request: "400m"
        memory_request: "384Mi"
      environment_variables:
        ENVIRONMENT: staging
        JWT_SECRET_KEY: ${STAGING_JWT_SECRET_KEY}
        JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 120 # 2 hours in staging
        PASSWORD_RESET_TOKEN_EXPIRE_HOURS: 2
        DEBUG: false
      health_check:
        path: /health
        interval: 30
        timeout: 5
        retries: 3

    billing:
      port: 8002
      service: dotmac_billing
      replicas: 1
      resources:
        cpu_limit: "800m"
        memory_limit: "768Mi"
        cpu_request: "400m"
        memory_request: "384Mi"
      environment_variables:
        ENVIRONMENT: staging
        PAYMENT_PROCESSOR_API_KEY: ${STAGING_PAYMENT_PROCESSOR_API_KEY}
        STRIPE_WEBHOOK_SECRET: ${STAGING_STRIPE_WEBHOOK_SECRET}
        DEBUG: false
      health_check:
        path: /health
        interval: 30
        timeout: 5
        retries: 3

# Load Balancer Configuration (Staging)
load_balancer:
  type: nginx
  port: 80
  ssl_port: 443
  worker_processes: auto
  worker_connections: 512
  client_max_body_size: 25M
  proxy_read_timeout: 60
  proxy_connect_timeout: 60
  proxy_send_timeout: 60

  backend_pools:
    api:
      servers:
        - localhost:8000 weight=2
        - localhost:8001 weight=1 backup
    frontend:
      admin:
        - localhost:3001
      customer:
        - localhost:3002 weight=2
      reseller:
        - localhost:3003
      technician:
        - localhost:3004

  rate_limiting:
    enabled: true
    requests_per_minute: 120 # Higher than production for testing
    burst: 30

  security_headers:
    x_frame_options: DENY
    x_content_type_options: nosniff
    x_xss_protection: "1; mode=block"
    strict_transport_security: "max-age=31536000; includeSubDomains" # Shorter than production
    content_security_policy: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' https:; media-src 'self'; object-src 'none'; child-src 'self'; frame-ancestors 'none'; form-action 'self'; base-uri 'self';"

# Database Configuration (Staging)
databases:
  primary:
    type: postgresql
    host: ${STAGING_DATABASE_HOST:-localhost}
    port: ${STAGING_DATABASE_PORT:-5432}
    database: ${STAGING_DATABASE_NAME:-dotmac_staging}
    username: ${STAGING_DATABASE_USER:-dotmac_staging_user}
    password: ${STAGING_DATABASE_PASSWORD}
    pool_size: 15
    max_overflow: 25
    pool_timeout: 30
    pool_recycle: 1800
    ssl_mode: require

  analytics:
    type: timescaledb
    host: ${STAGING_TIMESCALE_HOST:-localhost}
    port: ${STAGING_TIMESCALE_PORT:-5432}
    database: ${STAGING_TIMESCALE_DATABASE:-dotmac_analytics_staging}
    username: ${STAGING_TIMESCALE_USER:-dotmac_analytics_staging}
    password: ${STAGING_TIMESCALE_PASSWORD}
    pool_size: 8
    max_overflow: 15

  cache:
    type: redis
    host: ${STAGING_REDIS_HOST:-localhost}
    port: ${STAGING_REDIS_PORT:-6379}
    password: ${STAGING_REDIS_PASSWORD}
    database: 0
    max_connections: 30
    connection_pool_timeout: 20

# Monitoring and Observability (Staging)
monitoring:
  enabled: true
  metrics_collection_interval: 20 # seconds
  log_level: info
  log_rotation:
    max_size: 75MB
    max_files: 7
    compress: true

  prometheus:
    enabled: true
    port: 9090
    scrape_interval: 20s
    retention: 15d
    external_labels:
      environment: staging
      cluster: dotmac-staging

  grafana:
    enabled: true
    port: 3000
    admin_password: ${STAGING_GRAFANA_ADMIN_PASSWORD}
    auto_provisioning: true

  alerting:
    enabled: true
    alertmanager_port: 9093
    channels:
      slack:
        webhook_url: ${STAGING_SLACK_WEBHOOK_URL}
        channel: "#staging-alerts"
      email:
        smtp_server: smtp.gmail.com
        smtp_port: 587
        username: ${STAGING_ALERT_EMAIL_USERNAME}
        password: ${STAGING_ALERT_EMAIL_PASSWORD}
        from_email: staging-alerts@dotmac.framework
        to_emails:
          - staging-ops@dotmac.framework
          - qa-team@dotmac.framework

  apm:
    enabled: true
    service_name: dotmac-framework-staging
    environment: staging
    sample_rate: 0.2 # Higher sampling for staging
    capture_body: all

  logging:
    centralized: true
    log_shipper: fluentd
    elasticsearch_url: ${STAGING_ELASTICSEARCH_URL}
    log_retention_days: 15

# Security Configuration (Staging - Production-like)
security:
  jwt:
    secret_key: ${STAGING_JWT_SECRET_KEY}
    algorithm: HS256
    access_token_expire_minutes: 120 # 2 hours for testing
    refresh_token_expire_days: 7

  encryption:
    fernet_key: ${STAGING_FERNET_ENCRYPTION_KEY}

  cors:
    enabled: true
    allowed_origins:
      - https://admin.staging.dotmac.framework
      - https://customer.staging.dotmac.framework
      - https://reseller.staging.dotmac.framework
      - https://technician.staging.dotmac.framework
      - http://localhost:3000 # For local development against staging
      - http://localhost:3001
      - http://localhost:3002
      - http://localhost:3003
      - http://localhost:3004
    allow_credentials: true
    allowed_methods: ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"]
    allowed_headers: ["*"]

  rate_limiting:
    enabled: true
    default_rate_limit: "2000/hour" # Higher than production
    burst_limit: 100

  api_security:
    require_https: true
    api_key_header: X-API-Key
    request_id_header: X-Request-ID

  csp:
    enabled: true
    report_only: false
    report_uri: /api/security/csp-report

# Performance Configuration (Staging)
performance:
  caching:
    enabled: true
    default_ttl: 180 # 3 minutes (shorter for testing)
    redis_url: ${STAGING_REDIS_URL}

  database_pooling:
    enabled: true
    pool_size: 15
    max_overflow: 25
    pool_timeout: 30

  assets:
    compression: gzip
    caching_headers: true
    cdn_enabled: false

  # Staging performance thresholds
  thresholds:
    response_time_p95: 750 # ms (slightly higher than production)
    response_time_p99: 1500 # ms
    memory_usage_warning: 80 # %
    memory_usage_critical: 90 # %
    cpu_usage_warning: 75 # %
    cpu_usage_critical: 85 # %
    disk_usage_warning: 85 # %
    disk_usage_critical: 95 # %

# Resource Limits and Scaling (Staging)
scaling:
  auto_scaling:
    enabled: true
    min_replicas: 1
    max_replicas: 5 # Lower than production
    target_cpu_utilization: 75
    target_memory_utilization: 85

  resource_requests:
    cpu: 300m
    memory: 384Mi

  resource_limits:
    cpu: 1500m
    memory: 1.5Gi

  hpa:
    enabled: true
    metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 75
      - type: Resource
        resource:
          name: memory
          target:
            type: Utilization
            averageUtilization: 85

# Backup and Disaster Recovery (Staging)
backup:
  enabled: true
  schedule: "0 3 * * *" # Daily at 3 AM
  retention_days: 14 # Shorter retention
  storage_type: s3
  s3_bucket: ${STAGING_BACKUP_S3_BUCKET}

  databases:
    - primary
    - analytics

  files:
    - /var/log/dotmac-staging
    - /etc/ssl/staging
    - monitoring-config/
    - deployment-logs/

# Networking (Staging)
networking:
  service_mesh:
    enabled: false

  ingress:
    enabled: true
    class: nginx
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      cert-manager.io/cluster-issuer: "letsencrypt-staging"

  service_discovery:
    enabled: true
    type: dns

  network_policies:
    enabled: true
    default_deny: false

# Staging-specific Features
staging:
  # Data refresh from production
  data_refresh:
    enabled: true
    schedule: "0 1 * * 0" # Weekly on Sunday at 1 AM
    anonymize_pii: true

  # Test data generation
  test_data:
    enabled: true
    synthetic_users: 100
    synthetic_transactions: 1000

  # Performance testing
  performance_testing:
    enabled: true
    load_testing_schedule: "0 2 * * 1" # Weekly load tests

  # Security testing
  security_testing:
    enabled: true
    penetration_testing: monthly
    vulnerability_scans: weekly

# Feature Flags (Staging)
features:
  intelligent_deployment: true
  auto_remediation: true
  performance_monitoring: true
  security_monitoring: true
  user_analytics: true
  a11y_monitoring: true
  real_time_alerts: true
  deployment_rollback: true
  canary_deployments: true # Enable for testing
  blue_green_deployments: false

# Maintenance (Staging)
maintenance:
  maintenance_mode: false
  maintenance_message: "DotMac Staging Framework is temporarily unavailable for maintenance."
  allowed_ips:
    - "10.0.0.0/8" # Internal networks
    - "192.168.0.0/16" # Private networks

  # Staging maintenance windows (more flexible)
  windows:
    - day: Saturday
      start_time: "03:00"
      end_time: "05:00"
      timezone: UTC
    - day: Sunday
      start_time: "01:00"
      end_time: "03:00"
      timezone: UTC

# Testing Configuration (Staging)
testing:
  # Extended testing in staging
  unit_tests:
    coverage_threshold: 90 # Higher than development
    parallel_execution: true
    timeout: 300

  integration_tests:
    timeout: 600
    retry_attempts: 2
    extended_scenarios: true

  e2e_tests:
    timeout: 900
    browsers: ["chromium", "firefox"] # Multiple browsers
    parallel: true
    mobile_testing: true

  performance_tests:
    enabled: true
    load_testing: true
    stress_testing: true
    endurance_testing: true

  accessibility_tests:
    enabled: true
    standards: ["WCAG2AA", "WCAG2AAA"]
    automated_scans: true

  security_tests:
    enabled: true
    owasp_zap_scan: true
    dependency_scan: true
    secrets_scan: true

# Quality Assurance (Staging-specific)
quality_assurance:
  smoke_tests:
    enabled: true
    schedule: "*/30 * * * *" # Every 30 minutes

  regression_tests:
    enabled: true
    full_suite: true

  user_acceptance_testing:
    enabled: true
    test_users: 50

  api_testing:
    contract_testing: true
    fuzz_testing: true

  visual_testing:
    enabled: true
    screenshot_comparison: true

  chaos_engineering:
    enabled: true
    failure_scenarios:
      - service_shutdown
      - network_latency
      - database_connection_loss
      - memory_pressure
      - cpu_spike

# CI/CD Integration (Staging)
cicd:
  # Deployment gates for staging
  gates:
    security_scan: required
    performance_test: required
    accessibility_test: required
    smoke_test: required

  # Automated promotion to production
  promotion:
    enabled: true
    criteria:
      - all_tests_pass: true
      - performance_meets_threshold: true
      - security_scan_clean: true
      - manual_approval: true # Still require approval for production

  # Rollback strategy
  rollback:
    automatic: true
    triggers:
      - error_rate_threshold: 10%
      - response_time_threshold: 2000ms
      - health_check_failures: 3

# Environment Variables (Staging)
environment_variables:
  NODE_ENV: production
  ENVIRONMENT: staging
  DEBUG: false
  LOG_LEVEL: info
  CORS_ENABLED: true
  RATE_LIMITING_ENABLED: true
  SSL_ENABLED: true
  TESTING_MODE: true
