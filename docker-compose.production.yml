# Comprehensive Docker Compose Template for DotMac Platform
# Provides development, staging, and production configurations
# with security, observability, and scalability features

version: '3.8'

# ==========================================
# NETWORKS
# ==========================================
networks:
  dotmac-frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  dotmac-backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24
  dotmac-data:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.22.0.0/24

# ==========================================
# VOLUMES
# ==========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  logs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ==========================================
# SECRETS (for production)
# ==========================================
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt

# ==========================================
# SERVICES
# ==========================================
services:

  # ==========================================
  # Infrastructure Services
  # ==========================================
  
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: dotmac_platform
      POSTGRES_USER: dotmac
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - dotmac-data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dotmac -d dotmac_platform"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass-file /run/secrets/redis_password --appendonly yes
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    networks:
      - dotmac-data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$$(cat /run/secrets/redis_password)", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # Observability Services
  # ==========================================
  
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - dotmac-backend
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - dotmac-backend
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # DotMac Platform Services
  # ==========================================
  
  dotmac-platform:
    build:
      context: ../dotmac_platform
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
        SERVICE_NAME: dotmac_platform
        SERVICE_DESCRIPTION: "DotMac Platform Core SDK"
    restart: unless-stopped
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DATABASE_URL: postgresql://dotmac:${POSTGRES_PASSWORD}@postgres:5432/dotmac_platform
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    secrets:
      - jwt_secret
    volumes:
      - logs_data:/app/logs
    networks:
      - dotmac-backend
      - dotmac-data
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  dotmac-api-gateway:
    build:
      context: ../dotmac_api_gateway
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-latest}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
        SERVICE_NAME: dotmac_api_gateway
        SERVICE_DESCRIPTION: "DotMac API Gateway"
    restart: unless-stopped
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      UPSTREAM_PLATFORM_URL: http://dotmac-platform:8000
      UPSTREAM_IDENTITY_URL: http://dotmac-identity:8001
      UPSTREAM_SERVICES_URL: http://dotmac-services:8002
      RATE_LIMIT_REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/1
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    networks:
      - dotmac-frontend
      - dotmac-backend
    ports:
      - "80:8000"
      - "443:8443"
    depends_on:
      - dotmac-platform
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1'
          memory: 512M

  dotmac-identity:
    build:
      context: ../dotmac_identity
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-latest}
        SERVICE_NAME: dotmac_identity
        SERVICE_DESCRIPTION: "DotMac Identity Management"
    restart: unless-stopped
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DATABASE_URL: postgresql://dotmac:${POSTGRES_PASSWORD}@postgres:5432/dotmac_identity
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/2
      JWT_SECRET_FILE: /run/secrets/jwt_secret
    secrets:
      - jwt_secret
    networks:
      - dotmac-backend
      - dotmac-data
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  dotmac-services:
    build:
      context: ../dotmac_services
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-latest}
        SERVICE_NAME: dotmac_services
        SERVICE_DESCRIPTION: "DotMac Service Management"
    restart: unless-stopped
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DATABASE_URL: postgresql://dotmac:${POSTGRES_PASSWORD}@postgres:5432/dotmac_services
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/3
    networks:
      - dotmac-backend
      - dotmac-data
    ports:
      - "8002:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # Security Services
  # ==========================================
  
  security-scanner:
    image: aquasec/trivy:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security:/security
    command: >
      sh -c "
        trivy image --format json --output /security/platform-scan.json dotmac-platform:latest || true &&
        trivy image --format json --output /security/gateway-scan.json dotmac-api-gateway:latest || true &&
        trivy image --format json --output /security/identity-scan.json dotmac-identity:latest || true
      "
    networks:
      - dotmac-backend
    profiles:
      - security

  # ==========================================
  # Development Services
  # ==========================================
  
  # ==========================================
  # Testing Services
  # ==========================================
  
  environment:
    ENVIRONMENT: development
    DEBUG: true
    LOG_LEVEL: DEBUG
  volumes:
    - ../:/app:ro
  command: python -m ${SERVICE_NAME} --reload --debug

# Production override  
x-production: &production
  restart: unless-stopped
  deploy:
    restart_policy:
      condition: on-failure
      delay: 5s
      max_attempts: 3
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "5"