name: CI Minimal

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  POETRY_CACHE_DIR: ~/.cache/pypoetry

jobs:
  tests:
    name: Lint and Tests (Backend)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Enforce DRY service standards
        run: |
          python tools/enforce_patterns.py

      - name: Install Poetry and Dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry install --with dev,test

      - name: Run Docker E2E Tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
        run: |
          # Use our standardized Docker test runner
          chmod +x ./src/dotmac_shared/scripts/test-docker.sh
          ./src/dotmac_shared/scripts/test-docker.sh build
          ./src/dotmac_shared/scripts/test-docker.sh integration --verbose
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app:
          [
            admin,
            customer,
            reseller,
            technician,
            tenant-portal,
            management-admin,
            management-reseller,
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./frontend

      - name: Type check
        run: pnpm run type-check
        working-directory: ./frontend/apps/${{ matrix.app }}

      - name: Lint
        run: pnpm run lint
        working-directory: ./frontend/apps/${{ matrix.app }}

      - name: Run unit tests
        run: pnpm run test:unit --coverage
        working-directory: ./frontend/apps/${{ matrix.app }}

      - name: Run integration tests
        run: pnpm run test:integration
        working-directory: ./frontend/apps/${{ matrix.app }}

      - name: Build application
        run: pnpm run build
        working-directory: ./frontend/apps/${{ matrix.app }}
        env:
          ANALYZE: false

      - name: Generate bundle stats
        run: |
          if [ -f "next.config.js" ]; then
            ANALYZE=true pnpm run build
          else
            echo "Skipping bundle stats generation for ${{ matrix.app }}"
          fi
        working-directory: ./frontend/apps/${{ matrix.app }}

      - name: Bundle Size Gate
        run: |
          # Ensure the bundle size monitor script is executable
          chmod +x ../../scripts/bundle-size-monitor.js
          
          # Run bundle size monitoring with CI enforcement
          node ../../scripts/bundle-size-monitor.js --app=${{ matrix.app }} --ci
        working-directory: ./frontend/apps/${{ matrix.app }}
        env:
          CI: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}

      - name: Bundle analysis
        run: pnpm run analyze
        working-directory: ./frontend/apps/${{ matrix.app }}
        continue-on-error: true

      - name: Performance audit
        run: pnpm run audit:performance
        working-directory: ./frontend/apps/${{ matrix.app }}
        continue-on-error: true

      - name: Web Vitals Gate
        run: |
          npm install -g @lhci/cli@0.12.x
          node ../scripts/web-vitals-gate.js
        working-directory: ./frontend/apps/${{ matrix.app }}
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          LHCI_BUILD_CONTEXT__AUTHOR: ${{ github.actor }}
          LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/apps/${{ matrix.app }}/coverage/lcov.info
          flags: frontend-${{ matrix.app }}
          name: ${{ matrix.app }}-coverage

      - name: Upload bundle size reports
        uses: actions/upload-artifact@v4
        with:
          name: bundle-size-${{ matrix.app }}
          path: |
            frontend/apps/${{ matrix.app }}/.next/analyze/
            frontend/apps/${{ matrix.app }}/bundle-analysis/
            frontend/bundle-size-*.json
          retention-days: 30
        continue-on-error: true

  # Backend testing and validation
  backend-isp:
    name: ISP Framework CI
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run security checks
        run: |
          bandit -r src/dotmac_isp/
          safety check

      - name: Run linting
        run: |
          ruff check src/dotmac_isp/
          black --check src/dotmac_isp/
          mypy src/dotmac_isp/

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src/dotmac_isp --cov-report=xml --cov-report=term
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test

      - name: Run integration tests
        run: |
          pytest tests/ -m integration -v
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./src/coverage.xml
          flags: backend-isp
          name: isp-framework-coverage

  backend-management:
    name: Management Platform CI
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run security checks
        run: |
          bandit -r src/dotmac_management/
          safety check

      - name: Run linting
        run: |
          ruff check src/dotmac_management/
          black --check src/dotmac_management/
          mypy src/dotmac_management/

      - name: Run database migrations
        run: |
          # Skip migrations for now - need to check if alembic is configured
          echo "Database migrations skipped - needs configuration review"
        working-directory: ./src
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=src/dotmac_management --cov-report=xml --cov-report=term
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test

      - name: Run integration tests
        run: |
          pytest tests/ -m integration -v
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./src/coverage.xml
          flags: backend-management
          name: management-platform-coverage

  # E2E testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend-isp, backend-management]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./frontend

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Start backend services
        run: |
          cd management-platform && python -m app.main &
          cd isp-framework && python -m src.dotmac_isp.app &
          sleep 10
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test

      - name: Build and start frontend apps
        run: |
          pnpm run build
          pnpm run start:e2e &
          sleep 15
        working-directory: ./frontend

      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        working-directory: ./frontend

      - name: Run Playwright tests
        run: npx playwright test
        working-directory: ./frontend

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Generate Unified Test Report
        if: always()
        run: |
          python3 scripts/unified-test-reporter.py
          
      - name: Upload Unified Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unified-test-report
          path: test-results/
          retention-days: 30

  # Performance testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./frontend

      - name: Build applications
        run: pnpm run build
        working-directory: ./frontend

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        working-directory: ./frontend
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          LHCI_BUILD_CONTEXT__AUTHOR: ${{ github.actor }}
          LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}

      - name: Web Vitals Performance Gate
        run: node scripts/web-vitals-gate.js
        working-directory: ./frontend
        continue-on-error: false

      - name: Comprehensive Bundle Size Analysis
        run: |
          # Run comprehensive bundle size monitoring for all apps
          chmod +x scripts/bundle-size-monitor.js
          node scripts/bundle-size-monitor.js --all-apps --generate-reports
        working-directory: ./frontend
        env:
          CI: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run bundle analyzer
        run: pnpm run analyze:bundle
        working-directory: ./frontend

      - name: Generate Bundle Size Report
        run: |
          # Generate comprehensive bundle size comparison report
          if [ -f "bundle-analysis/bundle-comparison.json" ]; then
            echo "## 📦 Bundle Size Report" >> bundle-size-report.md
            echo "" >> bundle-size-report.md
            echo "### Size Changes" >> bundle-size-report.md
            echo "" >> bundle-size-report.md
            
            # Add bundle size data to report
            node scripts/bundle-size-monitor.js --generate-markdown >> bundle-size-report.md
          fi
        working-directory: ./frontend

      - name: Comment Bundle Size Report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './frontend/bundle-size-report.md';
            
            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            }

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            frontend/.lighthouseci/
            frontend/bundle-analysis/
            frontend/bundle-size-report.md
            frontend/bundle-size-*.json
          retention-days: 30

  # Docker builds and container scanning
  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [isp-framework, management-platform]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          tags: ${{ matrix.service }}:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ matrix.service }}:test"
          format: "sarif"
          output: "trivy-container-${{ matrix.service }}.sarif"

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-container-${{ matrix.service }}.sarif"

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  # Code quality and analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs:
      [
        security-scan,
        frontend,
        backend-isp,
        backend-management,
        e2e-tests,
        performance-tests,
        docker-build,
        dependency-scan,
        code-quality,
      ]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate deployment configuration
        run: |
          echo "✅ All CI checks passed"
          echo "✅ Security scans completed"
          echo "✅ Tests passed with coverage"
          echo "✅ Performance benchmarks met"
          echo "✅ Container builds successful"
          echo "✅ Ready for deployment"

      - name: Create deployment artifact
        run: |
          echo "COMMIT_SHA=${{ github.sha }}" > deployment.env
          echo "BUILD_NUMBER=${{ github.run_number }}" >> deployment.env
          echo "BUILD_TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)" >> deployment.env

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-config
          path: deployment.env
          retention-days: 90
