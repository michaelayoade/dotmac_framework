name: Main CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Change detection for efficient builds
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'src/**'
            shared:
              - 'pyproject.toml'
              - 'requirements*.txt'
              - '.github/workflows/**'

  # Security scanning (always runs)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      
      - name: Security checks
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
      
      - name: Secret scanning
        run: |
          if grep -r "sk_\|pk_\|rk_" . --include="*.js" --include="*.ts" --include="*.py" --exclude-dir=node_modules --exclude-dir=.git; then
            echo "❌ Potential API keys in source code!"
            exit 1
          fi
          echo "✅ No hard-coded secrets detected"
      
      - name: Security Bootstrap Validation
        env:
          AUTH_ADMIN_EMAIL: "${{ secrets.AUTH_ADMIN_EMAIL }}"
          AUTH_INITIAL_ADMIN_PASSWORD: "${{ secrets.AUTH_INITIAL_ADMIN_PASSWORD }}"
        run: |
          if [ -z "${AUTH_ADMIN_EMAIL:-}" ] || [ -z "${AUTH_INITIAL_ADMIN_PASSWORD:-}" ]; then
            echo "⚠️ Skipping bootstrap validation: secrets not configured"
            exit 0
          fi
          dotmac-admin bootstrap --check-only
          echo "✅ Security bootstrap environment validated"

  # Backend testing
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, security]
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.shared == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      
      - name: Lint and type check
        run: |
          ruff check src/
          black --check src/
          mypy src/ || true  # Non-blocking for now
      
      - name: Run tests
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: backend

  # Frontend testing
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.shared == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        app: [admin, customer, reseller, technician, tenant-portal, management-admin]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./frontend
      
      - name: Type check and lint
        run: |
          pnpm run type-check
          pnpm run lint
        working-directory: ./frontend/apps/${{ matrix.app }}
      
      - name: Run tests
        run: pnpm run test:unit --coverage
        working-directory: ./frontend/apps/${{ matrix.app }}
      
      - name: Build
        run: pnpm run build
        working-directory: ./frontend/apps/${{ matrix.app }}
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/apps/${{ matrix.app }}/coverage/lcov.info
          flags: frontend-${{ matrix.app }}

  # Integration tests (only if both frontend and backend pass)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: always() && (needs.backend.result == 'success' || needs.backend.result == 'skipped') && (needs.frontend.result == 'success' || needs.frontend.result == 'skipped')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install dependencies
        run: |
          # Backend
          python -m pip install --upgrade pip
          pip install -e .[dev]
          
          # Frontend
          cd frontend && pnpm install --frozen-lockfile
      
      - name: Start services and run E2E tests
        run: |
          # Start backend services in background
          python -m uvicorn src.dotmac_isp.main:app --host 0.0.0.0 --port 8000 &
          python -m uvicorn src.dotmac_management.main:app --host 0.0.0.0 --port 8001 &
          sleep 10
          
          # Build and start frontend
          cd frontend
          pnpm run build
          pnpm run start:preview &
          sleep 15
          
          # Run E2E tests
          npx playwright install --with-deps
          npx playwright test --reporter=html
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
      
      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

  # Final status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [security, backend, frontend, integration]
    if: always()
    
    steps:
      - name: Check results
        run: |
          echo "=== CI PIPELINE RESULTS ==="
          echo "Security: ${{ needs.security.result }}"
          echo "Backend: ${{ needs.backend.result }}"
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Integration: ${{ needs.integration.result }}"
          
          # Fail if critical jobs failed
          if [[ "${{ needs.security.result }}" == "failure" ]]; then
            echo "❌ Security checks failed"
            exit 1
          fi
          
          if [[ "${{ needs.backend.result }}" == "failure" ]]; then
            echo "❌ Backend tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.frontend.result }}" == "failure" ]]; then
            echo "❌ Frontend tests failed"
            exit 1
          fi
          
          echo "✅ All critical checks passed"
