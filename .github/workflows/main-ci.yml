name: Main CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: read
  checks: write
  statuses: write

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Change detection for efficient builds
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      shared: ${{ steps.changes.outputs.shared }}
      packages: ${{ steps.changes.outputs.packages }}
      database: ${{ steps.changes.outputs.database }}
      core-only: ${{ steps.changes.outputs.core-only }}
      tests-only: ${{ steps.changes.outputs.tests-only }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'src/**'
              - 'packages/**'
              - 'tests/**'
            shared:
              - 'pyproject.toml'
              - 'requirements*.txt'
              - '.github/workflows/**'
              - 'poetry.lock'
            packages:
              - 'packages/*/pyproject.toml'
              - 'packages/*/src/**'
            database:
              - 'alembic/**'
              - 'alembic.ini'
              - 'packages/dotmac-core/src/dotmac/core/database.py'
              - 'packages/dotmac-core/src/dotmac/core/db_toolkit/**'
            core-only:
              - 'packages/dotmac-core/**'
              - 'packages/dotmac-platform-services/**'
            tests-only:
              - 'tests/**'
              - '**/*test*.py'

  # Security scanning (always runs)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies (simplified)
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety ruff
          echo "‚úÖ Security tools installed"
      
      - name: Security checks
        run: |
          echo "üîç Running Bandit security scan..."
          bandit -r src/ -f json -o bandit-report.json -q || echo "‚ö†Ô∏è Bandit completed with findings"
          
          echo "üîç Running Safety vulnerability scan..."
          safety check --json > safety-report.json 2>/dev/null || echo "‚ö†Ô∏è Safety completed with findings"
          
          echo "üìã Security scan summary:"
          if [ -f "bandit-report.json" ] && [ -s "bandit-report.json" ]; then
            BANDIT_SIZE=$(wc -c < bandit-report.json)
            echo "‚úÖ Bandit report: ${BANDIT_SIZE} bytes"
          else
            echo "‚ùå Bandit report missing or empty"
            echo '{}' > bandit-report.json
          fi
          
          if [ -f "safety-report.json" ] && [ -s "safety-report.json" ]; then
            SAFETY_SIZE=$(wc -c < safety-report.json)
            echo "‚úÖ Safety report: ${SAFETY_SIZE} bytes"
          else
            echo "‚ùå Safety report missing or empty"
            echo '[]' > safety-report.json
          fi
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            bandit-report.json
            safety-report.json
            secrets-report.json
          retention-days: 30
      
      - name: Secret scanning (simplified)
        run: |
          echo "üîç Scanning for hardcoded secrets..."
          
          # Create secret scan report
          echo '{"secrets_found": false, "scan_timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > secrets-report.json
          
          SECRETS_FOUND=false
          
          # Check for common API key patterns
          if find src/ -name "*.py" -o -name "*.js" -o -name "*.ts" | xargs grep -l -E 'sk_[a-zA-Z0-9_]{32,}|pk_[a-zA-Z0-9_]{32,}' 2>/dev/null | head -5; then
            echo "‚ùå Potential API keys found in files above"
            SECRETS_FOUND=true
          fi
          
          # Check for hardcoded credentials (basic check)
          if find src/ -name "*.py" | xargs grep -l -E '(password|secret|key|token)\s*[:=]\s*["\'][a-zA-Z0-9]{12,}' 2>/dev/null | grep -v -E '(test|spec|example)' | head -3; then
            echo "‚ùå Potential hardcoded credentials found in files above"
            # Don't fail on credentials - just warn
            echo "‚ö†Ô∏è Please review the files above for hardcoded credentials"
          fi
          
          if [ "$SECRETS_FOUND" = "true" ]; then
            echo "‚ö†Ô∏è Security issues detected - please review"
            echo '{"secrets_found": true, "scan_timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > secrets-report.json
            exit 1
          else
            echo "‚úÖ No obvious secrets detected in production code"
          fi
      
      - name: Security Bootstrap Validation
        env:
          AUTH_ADMIN_EMAIL: "${{ secrets.AUTH_ADMIN_EMAIL }}"
          AUTH_INITIAL_ADMIN_PASSWORD: "${{ secrets.AUTH_INITIAL_ADMIN_PASSWORD }}"
        run: |
          if [ -z "${AUTH_ADMIN_EMAIL:-}" ] || [ -z "${AUTH_INITIAL_ADMIN_PASSWORD:-}" ]; then
            echo "‚ö†Ô∏è Skipping bootstrap validation: secrets not configured"
            exit 0
          fi
          
          # Basic validation of environment variables for security bootstrap
          echo "üîê Validating security bootstrap environment..."
          
          # Check email format
          if [[ ! "${AUTH_ADMIN_EMAIL}" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            echo "‚ùå Invalid email format for AUTH_ADMIN_EMAIL"
            exit 1
          fi
          
          # Check password strength (basic)
          if [[ ${#AUTH_INITIAL_ADMIN_PASSWORD} -lt 12 ]]; then
            echo "‚ùå AUTH_INITIAL_ADMIN_PASSWORD too short (minimum 12 characters)"
            exit 1
          fi
          
          echo "‚úÖ Security bootstrap environment validated"

  # Frontend lint + typecheck (monorepo)
  frontend-lint:
    name: Frontend Lint and Typecheck
    runs-on: ubuntu-latest
    needs: [detect-changes, security]
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.shared == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install frontend dependencies
        run: pnpm -C frontend install --frozen-lockfile

      - name: Lint (ESLint)
        run: pnpm -C frontend -r run lint

      - name: Typecheck (TypeScript)
        run: pnpm -C frontend -r run typecheck || pnpm -C frontend -r run type-check || pnpm -C frontend -r run ts:check

  # Gate A: Core Quality - Package Build Validation
  gate-a-validation:
    name: Gate A - Core Quality
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.shared == 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Cache Package Dependencies
        uses: actions/cache@v4
        with:
          path: |
            packages/*/.venv/
            packages/*/poetry.lock
            ~/.cache/pypoetry
          key: package-deps-v2-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('packages/*/pyproject.toml') }}
          restore-keys: |
            package-deps-v2-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            package-deps-v2-${{ runner.os }}-
            package-deps-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
          
      - name: Restore Package Builds Cache
        id: cache-builds
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist/
            dist/
            .gate-a-cache/
          key: package-builds-${{ hashFiles('packages/*/pyproject.toml', 'packages/*/src/**/*.py') }}
          restore-keys: |
            package-builds-${{ hashFiles('packages/*/pyproject.toml') }}-
            package-builds-
          
      - name: Validate Root Configuration
        run: |
          echo "üîç Validating root pyproject.toml..."
          poetry check
          echo "‚úÖ Root configuration valid"
          
      - name: Gate A - Smart Package Build Validation
        shell: bash
        run: |
          set -euo pipefail
          trap 'echo "‚ùå Gate A failed at line $LINENO. Exit code: $?" >&2' ERR
          echo "üèóÔ∏è Gate A: Smart package build validation with caching..."
          START_TIME=$(date +%s)
          mkdir -p .gate-a-cache
          
          SUCCESS=0
          TOTAL=0
          FAILED_PACKAGES=""
          SKIPPED_PACKAGES=""
          BUILD_LOGS_DIR=".gate-a-cache/build-logs"
          mkdir -p "$BUILD_LOGS_DIR"
          
          # Create summary files
          echo "# üéØ Gate A - Package Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for pkg in packages/dotmac-*; do
            if [ -d "$pkg" ]; then
              TOTAL=$((TOTAL + 1))
              PACKAGE_NAME=$(basename "$pkg")
              echo "Processing $PACKAGE_NAME..."
              
              # Check if package has cached successful build
              CACHE_FILE=".gate-a-cache/${PACKAGE_NAME}.success"
              WHEEL_EXISTS=false
              
              if [ -d "$pkg/dist" ] && [ -n "$(find "$pkg/dist" -name "*.whl" -print -quit)" ]; then
                WHEEL_EXISTS=true
              fi
              
              if [ -f "$CACHE_FILE" ] && [ "$WHEEL_EXISTS" = true ]; then
                echo "  ‚ö° $PACKAGE_NAME: CACHED (skipping build)"
                SUCCESS=$((SUCCESS + 1))
                SKIPPED_PACKAGES="$SKIPPED_PACKAGES $PACKAGE_NAME"
                echo "| ‚ö° $PACKAGE_NAME | Cached | Skipped (wheel exists) |" >> $GITHUB_STEP_SUMMARY
                continue
              fi
              
              echo "  üî® $PACKAGE_NAME: Building..."
              cd "$pkg"
              
              # Capture both stdout and stderr
              BUILD_LOG="$BUILD_LOGS_DIR/${PACKAGE_NAME}.log"
              if poetry build --format wheel >"$BUILD_LOG" 2>&1; then
                echo "  ‚úÖ $PACKAGE_NAME: SUCCESS"
                SUCCESS=$((SUCCESS + 1))
                # Mark as successfully built in cache
                echo "$(date -Iseconds)" > "../$CACHE_FILE"
                echo "| ‚úÖ $PACKAGE_NAME | Success | Built successfully |" >> $GITHUB_STEP_SUMMARY
              else
                echo "  ‚ùå $PACKAGE_NAME: FAILED"
                FAILED_PACKAGES="$FAILED_PACKAGES $PACKAGE_NAME"
                
                # Enhanced error reporting
                echo "| ‚ùå $PACKAGE_NAME | Failed | Build error (see logs) |" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "<details>" >> $GITHUB_STEP_SUMMARY
                echo "<summary>üîç $PACKAGE_NAME Build Error Details</summary>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                head -20 "$BUILD_LOG" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "</details>" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                
                # Also output to action log with annotation
                echo "::error file=$pkg/pyproject.toml::$PACKAGE_NAME build failed"
                echo "::group::$PACKAGE_NAME Build Error"
                cat "$BUILD_LOG"
                echo "::endgroup::"
              fi
              cd - >/dev/null
            fi
          done
          
          # Final summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Total packages:** $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "- **Successful:** $SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed:** $((TOTAL - SUCCESS))" >> $GITHUB_STEP_SUMMARY
          echo "- **Cached/Skipped:** $(echo $SKIPPED_PACKAGES | wc -w)" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "$SKIPPED_PACKAGES" ]; then
            echo "- **Cached packages:**$SKIPPED_PACKAGES" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "üéØ Gate A Results: $SUCCESS/$TOTAL packages successful"
          if [ -n "$SKIPPED_PACKAGES" ]; then
            echo "‚ö° Cached packages:$SKIPPED_PACKAGES"
          fi
          
          # Performance metrics
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "‚è±Ô∏è Gate A completed in ${DURATION} seconds"
          echo "- **Duration:** ${DURATION} seconds" >> $GITHUB_STEP_SUMMARY
          echo "- **Cache hits:** $(echo $SKIPPED_PACKAGES | wc -w)" >> $GITHUB_STEP_SUMMARY
          echo "- **Fresh builds:** $((SUCCESS - $(echo $SKIPPED_PACKAGES | wc -w)))" >> $GITHUB_STEP_SUMMARY
          
          # Set performance data for downstream jobs
          echo "GATE_A_DURATION=$DURATION" >> $GITHUB_ENV
          echo "GATE_A_CACHE_HITS=$(echo $SKIPPED_PACKAGES | wc -w)" >> $GITHUB_ENV
          
          if [ $SUCCESS -ne $TOTAL ]; then
            echo "‚ùå Gate A FAILED - Package build failures:$FAILED_PACKAGES"
            echo "::error::Gate A failed - $((TOTAL - SUCCESS)) of $TOTAL packages failed to build"
            
            # Create failure annotation for each failed package
            for failed_pkg in $FAILED_PACKAGES; do
              echo "::error::Package $failed_pkg failed to build - check build logs"
            done
            
            exit 1
          else
            echo "‚úÖ Gate A PASSED - All packages build successfully"
            echo "::notice::Gate A passed - all $TOTAL packages built successfully"
          fi
          
      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gate-a-build-logs-${{ github.run_number }}
          path: .gate-a-cache/build-logs/
          retention-days: 7
          
      - name: Cache Package Builds
        if: success()
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist/
            dist/
            .gate-a-cache/
          key: package-builds-${{ hashFiles('packages/*/pyproject.toml', 'packages/*/src/**/*.py') }}
          
      - name: Generate Build Matrix for Downstream
        if: success()
        run: |
          echo "üì¶ Generating package build matrix for downstream jobs..."
          # Create list of successfully built packages for potential parallel testing
          SUCCESSFUL_PACKAGES=$(find packages -name "*.whl" -path "*/dist/*" | sed 's|packages/\([^/]*\)/.*|\1|' | sort -u | tr '\n' ',' | sed 's/,$//')
          echo "BUILT_PACKAGES=$SUCCESSFUL_PACKAGES" >> $GITHUB_ENV
          echo "Built packages: $SUCCESSFUL_PACKAGES"

  # Gate B: Database & Core Services
  gate-b-validation:
    name: Gate B - Database & Core Services
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.shared == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD || 'test_password' }}
          POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER || 'test_user' }}  
          POSTGRES_DB: ${{ secrets.TEST_POSTGRES_DB || 'test_db' }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Restore Package Builds from Gate A
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist/
            dist/
            .gate-a-cache/
          key: package-builds-${{ hashFiles('packages/*/pyproject.toml', 'packages/*/src/**/*.py') }}
          restore-keys: |
            package-builds-${{ hashFiles('packages/*/pyproject.toml') }}-
            package-builds-
          
      - name: Install Core Dependencies
        run: |
          # Install core packages needed for database testing
          poetry install --with dev --no-interaction
          
          # Install dotmac-core package for proper imports
          cd packages/dotmac-core
          poetry install --no-interaction
          cd ../..
          
          echo "‚úÖ Core dependencies installed"
          
      - name: Gate B - Enhanced Database Health Validation
        shell: bash
        run: |
          set -euo pipefail
          trap 'echo "‚ùå Gate B failed at line $LINENO. Exit code: $?" >&2' ERR
          echo "üóÑÔ∏è Gate B: Database & Core Services validation..."
          START_TIME=$(date +%s)
          
          # Create Gate B summary
          echo "# üóÑÔ∏è Gate B - Database & Core Services Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          GATE_B_SUCCESS=true
          
          # Test 1: PostgreSQL Connectivity
          echo "üîç Testing PostgreSQL connectivity..."
          if PGPASSWORD=test_password psql -h localhost -U test_user -d test_db -c "SELECT version();" >/dev/null 2>&1; then
            echo "‚úÖ PostgreSQL: Connected successfully"
            echo "| üêò PostgreSQL | ‚úÖ Healthy | Connection successful |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå PostgreSQL: Connection failed"
            echo "| üêò PostgreSQL | ‚ùå Failed | Connection failed |" >> $GITHUB_STEP_SUMMARY
            GATE_B_SUCCESS=false
          fi
          
          # Test 2: Redis Connectivity  
          echo "üîç Testing Redis connectivity..."
          if redis-cli -h localhost ping | grep -q PONG; then
            echo "‚úÖ Redis: Connected successfully"
            echo "| ‚ö° Redis | ‚úÖ Healthy | Ping successful |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Redis: Connection failed"
            echo "| ‚ö° Redis | ‚ùå Failed | Ping failed |" >> $GITHUB_STEP_SUMMARY
            GATE_B_SUCCESS=false
          fi
          
          # Test 3: Database Schema Creation
          echo "üîç Testing database schema operations..."
          export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
          export PYTHONPATH="src:packages/dotmac-core/src:packages/dotmac-platform-services/src"
          
          if python3 -c "
          from sqlalchemy import create_engine, text
          engine = create_engine('$DATABASE_URL')
          with engine.connect() as conn:
              conn.execute(text('CREATE TABLE IF NOT EXISTS gate_b_test (id SERIAL PRIMARY KEY, created_at TIMESTAMP DEFAULT NOW())'))
              result = conn.execute(text('INSERT INTO gate_b_test DEFAULT VALUES RETURNING id'))
              test_id = result.scalar()
              conn.execute(text('DROP TABLE gate_b_test'))
              print(f'‚úÖ Database operations successful (test_id: {test_id})')
              conn.commit()
          "; then
            echo "‚úÖ Database Schema: Operations successful"
            echo "| üìä Schema Ops | ‚úÖ Healthy | CRUD operations working |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Database Schema: Operations failed"
            echo "| üìä Schema Ops | ‚ùå Failed | CRUD operations failed |" >> $GITHUB_STEP_SUMMARY
            GATE_B_SUCCESS=false
          fi
          
          # Test 4: Alembic Migration Check
          echo "üîç Testing Alembic migration system..."
          if [ -f "alembic.ini" ]; then
            # Test that alembic can connect and check current revision
            if alembic current >/dev/null 2>&1; then
              echo "‚úÖ Alembic: Migration system operational"
              echo "| üîÑ Migrations | ‚úÖ Healthy | Alembic operational |" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è Alembic: Migration system needs setup"
              echo "| üîÑ Migrations | ‚ö†Ô∏è Warning | Needs setup |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ö†Ô∏è Alembic: No alembic.ini found"
            echo "| üîÑ Migrations | ‚ö†Ô∏è Warning | No config found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test 5: Core Database Utilities
          echo "üîç Testing core database utilities..."
          if python3 -c "
          import sys
          sys.path.extend(['src', 'packages/dotmac-core/src'])
          try:
              from dotmac.core.database import Base, TimestampMixin
              from dotmac.core.db_toolkit.health.checker import HealthCheckResult, HealthStatus
              print('‚úÖ Core database utilities imported successfully')
          except ImportError as e:
              print(f'‚ùå Import failed: {e}')
              sys.exit(1)
          "; then
            echo "‚úÖ Core Utils: Database utilities available"
            echo "| üß∞ Core Utils | ‚úÖ Healthy | All utilities available |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Core Utils: Database utilities failed"
            echo "| üß∞ Core Utils | ‚ùå Failed | Import errors |" >> $GITHUB_STEP_SUMMARY
            GATE_B_SUCCESS=false
          fi
          
          # Final Gate B Assessment
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Gate B Summary" >> $GITHUB_STEP_SUMMARY
          
          # Performance tracking
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "‚è±Ô∏è Gate B completed in ${DURATION} seconds"
          echo "- **Duration:** ${DURATION} seconds" >> $GITHUB_STEP_SUMMARY
          echo "GATE_B_DURATION=$DURATION" >> $GITHUB_ENV
          
          if [ "$GATE_B_SUCCESS" = true ]; then
            echo "‚úÖ Gate B PASSED - All database and core services are healthy"
            echo "- **Status:** ‚úÖ PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- **Database:** Operational" >> $GITHUB_STEP_SUMMARY  
            echo "- **Redis:** Operational" >> $GITHUB_STEP_SUMMARY
            echo "- **Core Services:** Available" >> $GITHUB_STEP_SUMMARY
            echo "::notice::Gate B passed - database and core services are healthy"
          else
            echo "‚ùå Gate B FAILED - Database or core service issues detected"
            echo "- **Status:** ‚ùå FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- **Issues:** Critical service failures detected" >> $GITHUB_STEP_SUMMARY
            echo "::error::Gate B failed - database or core service issues"
            exit 1
          fi
        env:
          DATABASE_URL: postgresql://${{ secrets.TEST_POSTGRES_USER || 'test_user' }}:${{ secrets.TEST_POSTGRES_PASSWORD || 'test_password' }}@localhost:5432/${{ secrets.TEST_POSTGRES_DB || 'test_db' }}
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test

  # Gate C: Frontend & UI Validation
  gate-c-validation:
    name: Gate C - Frontend & UI Validation
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.shared == 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Cache Frontend Dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/node_modules
            frontend/.pnpm-store
            frontend/shared/packages/*/node_modules
          key: frontend-deps-v2-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('frontend/pnpm-lock.yaml', 'frontend/package.json', 'frontend/shared/packages/*/package.json') }}
          restore-keys: |
            frontend-deps-v2-${{ runner.os }}-${{ env.NODE_VERSION }}-
            frontend-deps-v2-${{ runner.os }}-
            
      - name: Gate C - Enhanced Frontend Validation
        shell: bash
        run: |
          set -euo pipefail
          trap 'echo "‚ùå Gate C failed at line $LINENO. Exit code: $?" >&2' ERR
          echo "üé® Gate C: Frontend & UI validation..."
          START_TIME=$(date +%s)
          
          # Create Gate C summary
          echo "# üé® Gate C - Frontend & UI Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          GATE_C_SUCCESS=true
          BUILT_PACKAGES=0
          TOTAL_PACKAGES=0
          
          cd frontend
          
          # Test 1: Workspace Structure Validation
          echo "üîç Testing workspace structure..."
          if [ -f "package.json" ] && [ -d "shared/packages" ] && [ -d "management-portal" ] && [ -d "isp-framework" ]; then
            echo "‚úÖ Workspace Structure: Valid"
            echo "| üèóÔ∏è Workspace | ‚úÖ Valid | Structure complete |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Workspace Structure: Invalid"
            echo "| üèóÔ∏è Workspace | ‚ùå Invalid | Missing directories |" >> $GITHUB_STEP_SUMMARY
            GATE_C_SUCCESS=false
          fi
          
          # Test 2: Install Dependencies
          echo "üîç Installing frontend dependencies..."
          if pnpm install --frozen-lockfile; then
            echo "‚úÖ Dependencies: Installed successfully"
            echo "| üì¶ Dependencies | ‚úÖ Installed | pnpm install successful |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Dependencies: Installation failed"
            echo "| üì¶ Dependencies | ‚ùå Failed | pnpm install failed |" >> $GITHUB_STEP_SUMMARY
            GATE_C_SUCCESS=false
          fi
          
          # Test 3: TypeScript Type Checking
          echo "üîç Running TypeScript validation..."
          if timeout 300 pnpm run type-check; then
            echo "‚úÖ TypeScript: Type checking passed"
            echo "| üî∑ TypeScript | ‚úÖ Valid | Type checking passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå TypeScript: Type checking failed"
            echo "| üî∑ TypeScript | ‚ùå Failed | Type errors detected |" >> $GITHUB_STEP_SUMMARY
            GATE_C_SUCCESS=false
          fi
          
          # Test 4: ESLint Validation
          echo "üîç Running ESLint validation..."
          if timeout 180 pnpm run lint:ci; then
            echo "‚úÖ ESLint: Linting passed"
            echo "| üßπ ESLint | ‚úÖ Clean | No linting errors |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå ESLint: Linting failed"
            echo "| üßπ ESLint | ‚ùå Failed | Linting errors found |" >> $GITHUB_STEP_SUMMARY
            GATE_C_SUCCESS=false
          fi
          
          # Test 5: Package Build Validation
          echo "üîç Testing shared package builds..."
          PACKAGE_BUILD_SUCCESS=true
          
          for pkg_dir in shared/packages/*; do
            if [ -d "$pkg_dir" ] && [ -f "$pkg_dir/package.json" ]; then
              TOTAL_PACKAGES=$((TOTAL_PACKAGES + 1))
              PACKAGE_NAME=$(basename "$pkg_dir")
              
              echo "  üî® Building $PACKAGE_NAME..."
              cd "$pkg_dir"
              
              # Check if package has build script
              if grep -q '"build"' package.json; then
                if timeout 120 pnpm run build; then
                  echo "  ‚úÖ $PACKAGE_NAME: Build successful"
                  BUILT_PACKAGES=$((BUILT_PACKAGES + 1))
                else
                  echo "  ‚ùå $PACKAGE_NAME: Build failed"
                  PACKAGE_BUILD_SUCCESS=false
                fi
              else
                echo "  ‚è≠Ô∏è $PACKAGE_NAME: No build script (skipped)"
                BUILT_PACKAGES=$((BUILT_PACKAGES + 1))
              fi
              
              cd - >/dev/null
            fi
          done
          
          if [ "$PACKAGE_BUILD_SUCCESS" = true ]; then
            echo "‚úÖ Package Builds: All packages built successfully"
            echo "| üì¶ Package Builds | ‚úÖ Success | $BUILT_PACKAGES/$TOTAL_PACKAGES packages |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Package Builds: Some packages failed"
            echo "| üì¶ Package Builds | ‚ùå Failed | Build errors detected |" >> $GITHUB_STEP_SUMMARY
            GATE_C_SUCCESS=false
          fi
          
          # Test 6: Unit Tests (Quick validation)
          echo "üîç Running unit test validation..."
          if timeout 300 pnpm run test:unit --passWithNoTests; then
            echo "‚úÖ Unit Tests: Validation passed"
            echo "| üß™ Unit Tests | ‚úÖ Passed | Tests successful |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Unit Tests: Some tests failed or timed out"
            echo "| üß™ Unit Tests | ‚ö†Ô∏è Warning | Test issues detected |" >> $GITHUB_STEP_SUMMARY
            # Don't fail Gate C for test warnings
          fi
          
          # Performance tracking
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "‚è±Ô∏è Gate C completed in ${DURATION} seconds"
          echo "- **Duration:** ${DURATION} seconds" >> $GITHUB_STEP_SUMMARY
          echo "- **Packages processed:** $TOTAL_PACKAGES" >> $GITHUB_STEP_SUMMARY
          echo "- **Successful builds:** $BUILT_PACKAGES" >> $GITHUB_STEP_SUMMARY
          echo "GATE_C_DURATION=$DURATION" >> $GITHUB_ENV
          echo "GATE_C_PACKAGES=$TOTAL_PACKAGES" >> $GITHUB_ENV
          
          # Final Gate C Assessment
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Gate C Summary" >> $GITHUB_STEP_SUMMARY
          
          if [ "$GATE_C_SUCCESS" = true ]; then
            echo "‚úÖ Gate C PASSED - Frontend and UI validation successful"
            echo "- **Status:** ‚úÖ PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- **Frontend:** Ready for deployment" >> $GITHUB_STEP_SUMMARY
            echo "- **TypeScript:** Valid" >> $GITHUB_STEP_SUMMARY
            echo "- **Packages:** $BUILT_PACKAGES/$TOTAL_PACKAGES built" >> $GITHUB_STEP_SUMMARY
            echo "::notice::Gate C passed - frontend and UI validation successful"
          else
            echo "‚ùå Gate C FAILED - Frontend validation issues detected"
            echo "- **Status:** ‚ùå FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- **Issues:** Critical frontend issues detected" >> $GITHUB_STEP_SUMMARY
            echo "::error::Gate C failed - frontend validation issues"
            exit 1
          fi
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'

  # Gate D: Security & Compliance Validation
  gate-d-validation:
    name: Gate D - Security & Compliance
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: always() # Security always runs regardless of changes
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Security Tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python*/site-packages
          key: security-tools-v1-${{ runner.os }}-${{ env.PYTHON_VERSION }}
          restore-keys: |
            security-tools-v1-${{ runner.os }}-
            
      - name: Install Security Tools
        run: |
          echo "üîí Installing comprehensive security tools..."
          pip install --user bandit safety pip-licenses semgrep truffleHog
          echo "‚úÖ Security tools installed"
      
      - name: Gate D - Enhanced Security Validation
        shell: bash
        run: |
          set -euo pipefail
          trap 'echo "‚ùå Gate D failed at line $LINENO. Exit code: $?" >&2' ERR
          
          echo "üîí Gate D: Security & Compliance validation..."
          START_TIME=$(date +%s)
          
          # Create Gate D summary
          echo "# üîí Gate D - Security & Compliance Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Security Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          GATE_D_SUCCESS=true
          SECURITY_FINDINGS=0
          CRITICAL_ISSUES=0
          
          # Test 1: Static Application Security Testing (SAST)
          echo "üîç Running Static Application Security Testing..."
          if timeout 300 bandit -r src/ packages/ -f json -o bandit-report.json -q; then
            echo "‚úÖ Bandit SAST: No critical issues found"
            echo "| üõ°Ô∏è SAST (Bandit) | ‚úÖ Clean | No critical vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Bandit SAST: Security findings detected"
            SECURITY_FINDINGS=$((SECURITY_FINDINGS + 1))
            
            # Check severity of findings
            if [ -f "bandit-report.json" ] && grep -q '"severity": "HIGH"' bandit-report.json; then
              echo "‚ùå Critical security vulnerabilities found"
              CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
              GATE_D_SUCCESS=false
              echo "| üõ°Ô∏è SAST (Bandit) | ‚ùå Critical | High severity vulnerabilities |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| üõ°Ô∏è SAST (Bandit) | ‚ö†Ô∏è Findings | Security issues detected |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Test 2: Dependency Vulnerability Scanning
          echo "üîç Running dependency vulnerability scanning..."
          if timeout 180 safety check --json > safety-report.json 2>/dev/null; then
            echo "‚úÖ Safety: No vulnerabilities in dependencies"
            echo "| üì¶ Dependencies | ‚úÖ Secure | No known vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Safety: Vulnerabilities found in dependencies"
            SECURITY_FINDINGS=$((SECURITY_FINDINGS + 1))
            
            # Check for critical vulnerabilities
            if grep -q '"vulnerability_id"' safety-report.json 2>/dev/null; then
              echo "‚ùå Critical dependency vulnerabilities found"
              CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
              GATE_D_SUCCESS=false
              echo "| üì¶ Dependencies | ‚ùå Critical | Vulnerable dependencies |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| üì¶ Dependencies | ‚ö†Ô∏è Warning | Dependency issues detected |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Test 3: Secret Detection
          echo "üîç Running secret detection..."
          SECRET_COUNT=0
          
          # Basic pattern matching for secrets
          if find src/ packages/ -name "*.py" -exec grep -l -E "(password|secret|key|token)\s*=\s*['\"][^'\"]{8,}" {} \; | head -1 > /dev/null 2>&1; then
            SECRET_FILES=$(find src/ packages/ -name "*.py" -exec grep -l -E "(password|secret|key|token)\s*=\s*['\"][^'\"]{8,}" {} \; | wc -l)
            if [ $SECRET_FILES -gt 0 ]; then
              echo "‚ö†Ô∏è Potential secrets detected in $SECRET_FILES files"
              SECURITY_FINDINGS=$((SECURITY_FINDINGS + 1))
              echo "| üïµÔ∏è Secret Scan | ‚ö†Ô∏è Warning | Potential secrets in $SECRET_FILES files |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚úÖ Secret detection: No obvious secrets found"
            echo "| üïµÔ∏è Secret Scan | ‚úÖ Clean | No obvious secrets detected |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test 4: License Compliance
          echo "üîç Running license compliance check..."
          if command -v pip-licenses &> /dev/null; then
            if pip-licenses --format=json > licenses-report.json 2>/dev/null; then
              echo "‚úÖ License compliance: Check completed"
              echo "| üìÑ Licenses | ‚úÖ Checked | License compliance verified |" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è License compliance: Issues detected"
              echo "| üìÑ Licenses | ‚ö†Ô∏è Warning | License compliance issues |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚è≠Ô∏è License compliance: Tool not available"
            echo "| üìÑ Licenses | ‚è≠Ô∏è Skipped | Tool not installed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test 5: Security Policy Validation
          echo "üîç Validating security policies..."
          POLICY_SCORE=0
          
          # Check for security documentation
          if [ -f "SECURITY.md" ] || [ -f ".github/SECURITY.md" ]; then
            POLICY_SCORE=$((POLICY_SCORE + 1))
            echo "  ‚úÖ Security documentation present"
          fi
          
          # Check for security package
          if [ -d "packages/dotmac-security" ]; then
            POLICY_SCORE=$((POLICY_SCORE + 1))
            echo "  ‚úÖ Security package implemented"
          fi
          
          # Check for security configurations
          if [ -d "security" ] || [ -f "bandit.yml" ]; then
            POLICY_SCORE=$((POLICY_SCORE + 1))
            echo "  ‚úÖ Security configurations present"
          fi
          
          if [ $POLICY_SCORE -ge 2 ]; then
            echo "‚úÖ Security policies: Well implemented"
            echo "| üìã Policies | ‚úÖ Good | Security policies implemented |" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Security policies: Needs improvement"
            echo "| üìã Policies | ‚ö†Ô∏è Warning | Security policies incomplete |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test 6: Container Security (if containers exist)
          echo "üîç Checking container security..."
          if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ]; then
            echo "  üì¶ Container files detected"
            
            # Basic Dockerfile security checks
            CONTAINER_ISSUES=0
            if [ -f "Dockerfile" ]; then
              # Check for common security issues
              if grep -q "^USER root" Dockerfile || ! grep -q "^USER " Dockerfile; then
                echo "  ‚ö†Ô∏è Dockerfile: Running as root user"
                CONTAINER_ISSUES=$((CONTAINER_ISSUES + 1))
              fi
              
              if grep -q "ADD.*http" Dockerfile; then
                echo "  ‚ö†Ô∏è Dockerfile: Using ADD with URLs (security risk)"
                CONTAINER_ISSUES=$((CONTAINER_ISSUES + 1))
              fi
            fi
            
            if [ $CONTAINER_ISSUES -eq 0 ]; then
              echo "‚úÖ Container security: No obvious issues"
              echo "| üê≥ Containers | ‚úÖ Good | No obvious security issues |" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è Container security: $CONTAINER_ISSUES issues found"
              echo "| üê≥ Containers | ‚ö†Ô∏è Warning | $CONTAINER_ISSUES security concerns |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚è≠Ô∏è Container security: No containers detected"
            echo "| üê≥ Containers | ‚è≠Ô∏è N/A | No container files |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance tracking
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "‚è±Ô∏è Gate D completed in ${DURATION} seconds"
          echo "- **Duration:** ${DURATION} seconds" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Findings:** $SECURITY_FINDINGS" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical Issues:** $CRITICAL_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "GATE_D_DURATION=$DURATION" >> $GITHUB_ENV
          echo "GATE_D_FINDINGS=$SECURITY_FINDINGS" >> $GITHUB_ENV
          echo "GATE_D_CRITICAL=$CRITICAL_ISSUES" >> $GITHUB_ENV
          
          # Final Gate D Assessment
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Gate D Security Summary" >> $GITHUB_STEP_SUMMARY
          
          if [ "$GATE_D_SUCCESS" = true ]; then
            echo "‚úÖ Gate D PASSED - Security validation successful"
            echo "- **Status:** ‚úÖ PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- **Security:** No critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "- **Compliance:** Policies validated" >> $GITHUB_STEP_SUMMARY
            echo "- **Findings:** $SECURITY_FINDINGS non-critical findings" >> $GITHUB_STEP_SUMMARY
            echo "::notice::Gate D passed - security and compliance validation successful"
          else
            echo "‚ùå Gate D FAILED - Critical security issues detected"
            echo "- **Status:** ‚ùå FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- **Critical Issues:** $CRITICAL_ISSUES found" >> $GITHUB_STEP_SUMMARY
            echo "- **Action Required:** Fix critical security vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "::error::Gate D failed - critical security issues detected"
            exit 1
          fi
          
      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gate-d-security-reports-${{ github.run_number }}
          path: |
            bandit-report.json
            safety-report.json
            licenses-report.json
          retention-days: 30

  # Backend testing
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, security, gate-a-validation, gate-b-validation, gate-c-validation, gate-d-validation]
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.shared == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: poetry-deps-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            poetry-deps-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            poetry-deps-${{ runner.os }}-
            
      - name: Restore Package Builds from Gate A
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist/
            dist/
            .gate-a-cache/
          key: package-builds-${{ hashFiles('packages/*/pyproject.toml', 'packages/*/src/**/*.py') }}
          restore-keys: |
            package-builds-${{ hashFiles('packages/*/pyproject.toml') }}-
            package-builds-
      
      - name: Install dependencies
        run: |
          poetry install --with dev --no-interaction
          echo "‚úÖ Main and dev dependencies installed"
          
          # Verify package builds are available
          WHEEL_COUNT=$(find packages -name "*.whl" -path "*/dist/*" | wc -l)
          echo "üì¶ Found $WHEEL_COUNT cached package wheels from Gate A"
          if [ "$WHEEL_COUNT" -gt 0 ]; then
            echo "‚ö° Backend tests can utilize pre-built packages"
          fi
      
      - name: Lint and type check
        run: |
          echo "üìú Linting with ruff (16-package structure)..."
          
          # Lint main src directory
          if [ -d "src" ]; then
            poetry run ruff check src/ --output-format=github || echo "‚ö†Ô∏è Main src linting completed with issues"
          fi
          
          # Lint package sources
          for pkg in packages/dotmac-*/src; do
            if [ -d "$pkg" ]; then
              echo "Linting $(dirname $pkg)..."
              poetry run ruff check "$pkg" --output-format=github || echo "‚ö†Ô∏è Package $(dirname $pkg) linting completed with issues"
            fi
          done
          
          echo "üé® Checking code formatting..."
          
          # Format check main src
          if [ -d "src" ]; then
            poetry run ruff format --check src/ || echo "‚ö†Ô∏è Main src formatting issues found"
          fi
          
          # Format check packages
          for pkg in packages/dotmac-*/src; do
            if [ -d "$pkg" ]; then
              echo "Format checking $(dirname $pkg)..."
              poetry run ruff format --check "$pkg" || echo "‚ö†Ô∏è Package $(dirname $pkg) formatting issues found"
            fi
          done
          
          echo "üîç Type checking with mypy..."
          if [ -d "src" ]; then
            poetry run mypy src/ --show-error-codes --no-strict-optional || echo "‚ö†Ô∏è Type check completed with warnings"
          fi
          
          echo "‚úÖ Linting and formatting checks completed"
      
      - name: Run tests
        run: |
          # Set PYTHONPATH to include all source directories
          export PYTHONPATH="src:$(find packages -name 'src' -type d | tr '\n' ':' | sed 's/:$//')"
          echo "PYTHONPATH: $PYTHONPATH"
          
          poetry run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term --cov-report=html --tb=short
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
          SKIP_OPENBAO_CHECKS: "true"
          SECRET_KEY: "test-secret-key-for-ci-only"
          JWT_SECRET: "test-jwt-secret-for-ci-only"
          ENCRYPTION_KEY: "test-encryption-key-for-ci-only-32-chars"
      
      - name: Generate coverage summary
        run: |
          echo "## üìä Backend Test Coverage" >> $GITHUB_STEP_SUMMARY
          if poetry run coverage report --format=markdown >> $GITHUB_STEP_SUMMARY 2>/dev/null; then
            echo "‚úÖ Coverage report generated"
          else
            echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
            poetry run coverage report >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Coverage PR Comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: backend-coverage
          message: |
            ## üìä Backend Test Coverage Report
            
            ```
            $(poetry run coverage report)
            ```
            
            üìÅ **Detailed HTML Report**: Available in workflow artifacts
      
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-${{ github.run_number }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

  # Frontend testing
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.shared == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - app: isp-framework/admin
            name: isp-admin
          - app: isp-framework/reseller
            name: isp-reseller
          - app: management-portal/admin
            name: mgmt-admin
          - app: management-portal/reseller
            name: mgmt-reseller
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: pnpm-${{ runner.os }}-${{ env.NODE_VERSION }}-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-${{ env.NODE_VERSION }}-
      
      - name: Check if app exists
        id: check-app
        run: |
          if [ -d "./frontend/${{ matrix.app }}" ] && [ -f "./frontend/${{ matrix.app }}/package.json" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ App ${{ matrix.app }} exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è App ${{ matrix.app }} does not exist, skipping"
            exit 0
          fi
      
      - name: Install dependencies
        if: steps.check-app.outputs.exists == 'true'
        run: |
          echo "üì¶ Installing dependencies for ${{ matrix.app }}..."
          if [ -f "pnpm-lock.yaml" ]; then
            pnpm install --frozen-lockfile
          else
            echo "‚ö†Ô∏è No pnpm-lock.yaml found, installing without frozen lockfile"
            pnpm install
          fi
        working-directory: ./frontend

      - name: Build shared packages
        if: steps.check-app.outputs.exists == 'true'
        run: pnpm run build:packages
        working-directory: ./frontend
      
      - name: Lint and type check
        if: steps.check-app.outputs.exists == 'true'
        run: |
          echo "üìú Checking available scripts in ${{ matrix.app }}..."
          
          # Show available scripts for debugging
          echo "Available scripts:"
          grep -A 10 '"scripts"' package.json | head -8
          
          # Try linting (various script names)
          if grep -q '"lint"' package.json; then
            echo "üßΩ Running linting..."
            if pnpm run lint; then
              echo "‚úÖ Linting passed"
            else
              echo "‚ö†Ô∏è Linting failed - non-blocking"
            fi
          else
            echo "‚ÑπÔ∏è No lint script found"
          fi
          
          # Try type checking (various script names)
          if grep -q '"type-check\|typecheck\|tsc"' package.json; then
            echo "üîç Running type checking..."
            if pnpm run type-check 2>/dev/null || pnpm run typecheck 2>/dev/null || pnpm run tsc 2>/dev/null; then
              echo "‚úÖ Type checking passed"
            else
              echo "‚ö†Ô∏è Type checking failed - non-blocking"
            fi
          else
            echo "‚ÑπÔ∏è No type checking script found"
          fi
        working-directory: ./frontend/${{ matrix.app }}
      
      - name: Run tests
        if: steps.check-app.outputs.exists == 'true'
        run: |
          echo "üß™ Checking for tests in ${{ matrix.app }}"
          
          # Check for test scripts
          if grep -q '"test"' package.json; then
            echo "Found test scripts, running tests..."
            if pnpm run test:unit --coverage 2>/dev/null; then
              echo "‚úÖ Unit tests passed"
            elif pnpm run test --coverage 2>/dev/null; then
              echo "‚úÖ Tests passed"
            elif pnpm run test 2>/dev/null; then
              echo "‚úÖ Tests passed (no coverage)"
            else
              echo "‚ö†Ô∏è Tests failed - continuing anyway"
            fi
          else
            echo "‚ÑπÔ∏è No test scripts found - skipping tests"
          fi
        working-directory: ./frontend/${{ matrix.app }}
      
      - name: Build
        if: steps.check-app.outputs.exists == 'true'
        run: |
          echo "üî® Building ${{ matrix.app }}..."
          if grep -q '"build"' package.json; then
            if pnpm run build; then
              echo "‚úÖ Build successful"
            else
              echo "‚ùå Build failed"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è No build script found, skipping"
          fi
        working-directory: ./frontend/${{ matrix.app }}
      
      - name: Upload frontend coverage
        if: steps.check-app.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-${{ matrix.name }}-${{ github.run_number }}
          path: |
            ./frontend/${{ matrix.app }}/coverage/
          retention-days: 30
        continue-on-error: true

  # Integration tests (only if both frontend and backend pass)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: always() && (needs.backend.result == 'success' || needs.backend.result == 'skipped') && (needs.frontend.result == 'success' || needs.frontend.result == 'skipped')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: poetry-deps-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            poetry-deps-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            poetry-deps-${{ runner.os }}-
            
      - name: Restore Package Builds from Gate A
        uses: actions/cache@v4
        with:
          path: |
            packages/*/dist/
            dist/
            .gate-a-cache/
          key: package-builds-${{ hashFiles('packages/*/pyproject.toml', 'packages/*/src/**/*.py') }}
          restore-keys: |
            package-builds-${{ hashFiles('packages/*/pyproject.toml') }}-
            package-builds-
      
      - name: Install dependencies
        run: |
          # Backend - install all dependency groups
          poetry install --with dev,security --no-interaction
          
          # Verify package builds are available for integration tests
          WHEEL_COUNT=$(find packages -name "*.whl" -path "*/dist/*" | wc -l)
          echo "üì¶ Found $WHEEL_COUNT cached package wheels for integration testing"
          
          # Frontend
          cd frontend && pnpm install --frozen-lockfile
      
      - name: Run comprehensive integration tests
        run: |
          echo "üß™ Running comprehensive test suite..."
          
          # Set PYTHONPATH for all tests
          export PYTHONPATH="src:$(find packages -name 'src' -type d | tr '\n' ':' | sed 's/:$//')"
          echo "PYTHONPATH: $PYTHONPATH"
          
          # Main framework tests (if not already run)
          if [ -d "tests" ]; then
            echo "Running main integration tests..."
            poetry run pytest tests/integration/ -v --tb=short || echo "‚ö†Ô∏è Integration tests had issues"
          fi
          
          # Simple smoke test for key packages
          echo "Running package smoke tests..."
          FAILED_PACKAGES=""
          for package_dir in packages/dotmac-platform-services packages/dotmac-business-logic; do
            if [ -d "${package_dir}" ]; then
              package_name=$(basename "${package_dir}")
              echo "Smoke testing ${package_name}..."
              
              if [ -d "${package_dir}/tests" ]; then
                if poetry run python -c "import sys; sys.path.append('${package_dir}/src'); import dotmac" 2>/dev/null; then
                  echo "  ‚úÖ ${package_name} imports successfully"
                else
                  echo "  ‚ö†Ô∏è ${package_name} import failed"
                  FAILED_PACKAGES="$FAILED_PACKAGES $package_name"
                fi
              else
                echo "  ‚ÑπÔ∏è No tests found for ${package_name}"
              fi
            fi
          done
          
          if [ -n "$FAILED_PACKAGES" ]; then
            echo "‚ö†Ô∏è Some packages had issues: $FAILED_PACKAGES"
          else
            echo "‚úÖ All smoke tests passed"
          fi
          
          echo "‚úÖ Integration test phase completed"
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test
          SKIP_OPENBAO_CHECKS: "true"
          SECRET_KEY: "test-secret-key-for-ci-only"
          JWT_SECRET: "test-jwt-secret-for-ci-only"
          ENCRYPTION_KEY: "test-encryption-key-for-ci-only-32-chars"
          PYTHONPATH: "src:packages/dotmac-core/src:packages/dotmac-platform-services/src:packages/dotmac-application/src:packages/dotmac-business-logic/src:packages/dotmac-communications/src:packages/dotmac-networking/src:packages/dotmac-plugins/src:packages/dotmac-security/src:packages/dotmac-ticketing/src:packages/dotmac-service-kernel/src:packages/dotmac-workflows/src:packages/dotmac-shared-core/src:packages/dotmac-tasks-utils/src:packages/dotmac-benchmarking/src:packages/dotmac-observability/src"
      
      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

  # Final status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [security, backend, frontend, integration]
    if: always()
    
    steps:
      - name: Check results
        run: |
          echo "=== CI PIPELINE RESULTS ==="
          echo "Security: ${{ needs.security.result }}"
          echo "Backend: ${{ needs.backend.result }}"
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Integration: ${{ needs.integration.result }}"
          
          # Fail if critical jobs failed
          if [[ "${{ needs.security.result }}" == "failure" ]]; then
            echo "‚ùå Security checks failed"
            exit 1
          fi
          
          if [[ "${{ needs.backend.result }}" == "failure" ]]; then
            echo "‚ùå Backend tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.frontend.result }}" == "failure" ]]; then
            echo "‚ùå Frontend tests failed"
            exit 1
          fi
          
          echo "‚úÖ All critical checks passed"

  # Gate E: Full E2E + Observability Testing
  gate-e-validation:
    name: "Gate E: Full E2E + Observability Testing"
    runs-on: ubuntu-latest
    needs: [gate-a-validation, gate-b-validation, gate-c-validation, gate-d-validation]
    timeout-minutes: 45
    if: |
      always() && 
      needs.gate-a-validation.result == 'success' && 
      needs.gate-b-validation.result == 'success' && 
      needs.gate-c-validation.result == 'success' && 
      needs.gate-d-validation.result == 'success'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install Python Dependencies
        run: |
          pip install requests
      
      - name: Install and Build Frontend Dependencies
        run: |
          pnpm install -w
          pnpm -r --filter="frontend/shared/packages/*" build
      
      - name: Install Playwright Browsers
        run: |
          npx playwright install --with-deps chromium firefox
      
      - name: Create Gate E Environment
        run: |
          cd .dev-artifacts/gate-e
          cp .env.gate-e .env
      
      - name: Start Docker Services for Gate E
        run: |
          cd .dev-artifacts/gate-e
          docker-compose --env-file .env.gate-e -f docker-compose.gate-e.yml up -d postgres redis
          
      - name: Wait for Infrastructure Services
        run: |
          timeout 120 bash -c 'until docker-compose --env-file .dev-artifacts/gate-e/.env.gate-e -f .dev-artifacts/gate-e/docker-compose.gate-e.yml exec postgres pg_isready -U dotmac_admin; do sleep 2; done'
          timeout 60 bash -c 'until docker-compose --env-file .dev-artifacts/gate-e/.env.gate-e -f .dev-artifacts/gate-e/docker-compose.gate-e.yml exec redis redis-cli ping; do sleep 2; done'
      
      - name: Start Application Services
        run: |
          cd .dev-artifacts/gate-e
          docker-compose --env-file .env.gate-e -f docker-compose.gate-e.yml up -d management-platform isp-service
      
      - name: Wait for Application Services
        run: |
          timeout 180 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
          timeout 180 bash -c 'until curl -f http://localhost:8001/health; do sleep 5; done'
      
      - name: Run Gate E Tests
        run: |
          cd .dev-artifacts/gate-e
          ./run-gate-e-tests.sh --timeout 25 --verbose
      
      - name: Upload Gate E Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gate-e-results
          path: |
            .dev-artifacts/gate-e/artifacts/
            .dev-artifacts/gate-e/test-results/
            .dev-artifacts/gate-e/*.json
          retention-days: 7
      
      - name: Gate E Results Summary
        if: always()
        run: |
          echo "# üöÄ Gate E: Full E2E + Observability Results" >> $GITHUB_STEP_SUMMARY
          
          if [ -f ".dev-artifacts/gate-e/gate-e-final-report.json" ]; then
            OVERALL_SUCCESS=$(jq -r '.overall_success' .dev-artifacts/gate-e/gate-e-final-report.json)
            TOTAL_TESTS=$(jq -r '.summary.total_tests' .dev-artifacts/gate-e/gate-e-final-report.json)
            PASSED_TESTS=$(jq -r '.summary.passed_tests' .dev-artifacts/gate-e/gate-e-final-report.json)
            FAILED_TESTS=$(jq -r '.summary.failed_tests' .dev-artifacts/gate-e/gate-e-final-report.json)
            
            if [ "$OVERALL_SUCCESS" = "true" ]; then
              echo "## ‚úÖ Gate E PASSED" >> $GITHUB_STEP_SUMMARY
              echo "- **Cross-Service Flows**: Login ‚Üí CRUD ‚Üí Jobs ‚Üí Notifications ‚Üí Metrics ‚úÖ" >> $GITHUB_STEP_SUMMARY  
              echo "- **Observability Pipeline**: Metrics & Tracing Validation ‚úÖ" >> $GITHUB_STEP_SUMMARY
            else
              echo "## ‚ùå Gate E FAILED" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "- **Total Tests**: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- **Passed**: $PASSED_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "- **Failed**: $FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚ö†Ô∏è Gate E Report Missing" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Stop Docker Services
        if: always()
        run: |
          cd .dev-artifacts/gate-e
          docker-compose --env-file .env.gate-e -f docker-compose.gate-e.yml down --remove-orphans || true

  # Gate Status Monitoring (Updated)
  gate-status-check:
    name: Gate Status Monitoring
    runs-on: ubuntu-latest
    needs: [gate-a-validation, gate-b-validation, gate-c-validation, gate-d-validation, gate-e-validation]
    if: always()
    steps:
      - name: Gate Health Assessment
        run: |
          echo "# üö¶ Gate Status Monitoring" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Gate | Status | Result | Action |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|---------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Gate A Status
          GATE_A_STATUS="${{ needs.gate-a-validation.result }}"
          case "$GATE_A_STATUS" in
            "success") echo "| Gate A | ‚úÖ Success | Passed | Continue |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| Gate A | ‚ùå Failed | Build issues | Block pipeline |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| Gate A | ‚è≠Ô∏è Skipped | No changes | Continue |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| Gate A | ‚ö†Ô∏è Unknown | $GATE_A_STATUS | Investigate |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Gate B Status  
          GATE_B_STATUS="${{ needs.gate-b-validation.result }}"
          case "$GATE_B_STATUS" in
            "success") echo "| Gate B | ‚úÖ Success | Services ready | Continue |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| Gate B | ‚ùå Failed | Database issues | Block pipeline |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| Gate B | ‚è≠Ô∏è Skipped | No changes | Continue |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| Gate B | ‚ö†Ô∏è Unknown | $GATE_B_STATUS | Investigate |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Gate C Status
          GATE_C_STATUS="${{ needs.gate-c-validation.result }}" 
          case "$GATE_C_STATUS" in
            "success") echo "| Gate C | ‚úÖ Success | Frontend ready | Continue |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| Gate C | ‚ùå Failed | Frontend issues | Block pipeline |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| Gate C | ‚è≠Ô∏è Skipped | No changes | Continue |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| Gate C | ‚ö†Ô∏è Unknown | $GATE_C_STATUS | Investigate |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Gate D Status
          GATE_D_STATUS="${{ needs.gate-d-validation.result }}"
          case "$GATE_D_STATUS" in
            "success") echo "| Gate D | ‚úÖ Success | Security validated | Continue |" >> $GITHUB_STEP_SUMMARY ;;
            "failure") echo "| Gate D | ‚ùå Failed | Security issues | Block pipeline |" >> $GITHUB_STEP_SUMMARY ;;
            "skipped") echo "| Gate D | ‚è≠Ô∏è Skipped | No security scan | Continue |" >> $GITHUB_STEP_SUMMARY ;;
            *) echo "| Gate D | ‚ö†Ô∏è Unknown | $GATE_D_STATUS | Investigate |" >> $GITHUB_STEP_SUMMARY ;;
          esac
          
          # Overall Assessment
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Overall Gate Assessment" >> $GITHUB_STEP_SUMMARY
          
          FAILED_GATES=0
          if [[ "$GATE_A_STATUS" == "failure" ]]; then FAILED_GATES=$((FAILED_GATES + 1)); fi
          if [[ "$GATE_B_STATUS" == "failure" ]]; then FAILED_GATES=$((FAILED_GATES + 1)); fi
          if [[ "$GATE_C_STATUS" == "failure" ]]; then FAILED_GATES=$((FAILED_GATES + 1)); fi
          if [[ "$GATE_D_STATUS" == "failure" ]]; then FAILED_GATES=$((FAILED_GATES + 1)); fi
          
          if [[ $FAILED_GATES -eq 0 ]]; then
            echo "- **Status**: ‚úÖ ALL GATES PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- **Pipeline**: Ready to proceed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ‚ùå $FAILED_GATES GATES FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- **Pipeline**: Blocked - fix failing gates" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Export gate status for downstream jobs
          echo "GATE_A_STATUS=$GATE_A_STATUS" >> $GITHUB_ENV
          echo "GATE_B_STATUS=$GATE_B_STATUS" >> $GITHUB_ENV  
          echo "GATE_C_STATUS=$GATE_C_STATUS" >> $GITHUB_ENV
          echo "GATE_D_STATUS=$GATE_D_STATUS" >> $GITHUB_ENV
          echo "FAILED_GATES=$FAILED_GATES" >> $GITHUB_ENV

  # Pipeline Performance Overview
  pipeline-overview:
    name: Pipeline Performance Overview
    runs-on: ubuntu-latest
    needs: [gate-a-validation, gate-b-validation, gate-c-validation, gate-d-validation, gate-e-validation, gate-status-check]
    if: always() && needs.gate-status-check.outputs.FAILED_GATES == '0'
    steps:
      - name: Performance Summary
        run: |
          echo "# üìä Pipeline Performance Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Gate | Duration | Status | Efficiency |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------|---------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Gate A | ${{ env.GATE_A_DURATION }}s | ‚úÖ | ${{ env.GATE_A_CACHE_HITS }} cached |" >> $GITHUB_STEP_SUMMARY
          echo "| Gate B | ${{ env.GATE_B_DURATION }}s | ‚úÖ | Services ready |" >> $GITHUB_STEP_SUMMARY
          echo "| Gate C | ${{ env.GATE_C_DURATION }}s | ‚úÖ | ${{ env.GATE_C_PACKAGES }} packages |" >> $GITHUB_STEP_SUMMARY
          echo "| Gate D | ${{ env.GATE_D_DURATION }}s | ‚úÖ | ${{ env.GATE_D_FINDINGS }} findings |" >> $GITHUB_STEP_SUMMARY
