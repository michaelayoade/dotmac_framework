name: Build and Deploy DotMac Framework

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/dotmac-framework

jobs:
  # Test job (runs before build)
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        poetry config virtualenvs.create false
        poetry install

    - name: Run tests
      run: |
        poetry run pytest src/ -v --tb=short
        
    - name: Run linting
      run: |
        poetry run black --check src/
        poetry run isort --check-only src/
        poetry run flake8 src/

  # Security scan
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and push Docker image
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD-HHmmss'}},format=short
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  # Deploy to staging (develop branch)
  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Deploy to Staging via Coolify Webhook
      run: |
        curl -X POST "${{ secrets.COOLIFY_STAGING_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "image": "${{ needs.build.outputs.image-tag }}",
            "digest": "${{ needs.build.outputs.image-digest }}"
          }'

  # Deploy to production (main branch or tags)
  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Deploy to Production via Coolify Webhook
      run: |
        curl -X POST "${{ secrets.COOLIFY_PRODUCTION_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "image": "${{ needs.build.outputs.image-tag }}",
            "digest": "${{ needs.build.outputs.image-digest }}"
          }'

  # Notification
  notify:
    needs: [build, deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify deployment status
      if: github.ref == 'refs/heads/main'
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Production deployment successful"
          # Add Slack/Discord notification here if needed
        else
          echo "❌ Production deployment failed"
          # Add error notification here if needed
        fi