name: DotMac Unified Platform CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===== DETECT CHANGES =====
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      isp-framework: ${{ steps.changes.outputs.isp-framework }}
      management-platform: ${{ steps.changes.outputs.management-platform }}
      frontend: ${{ steps.changes.outputs.frontend }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            isp-framework:
              - 'isp-framework/**'
            management-platform:
              - 'management-platform/**'
            frontend:
              - 'frontend/**'
            shared:
              - 'shared/**'
              - 'docker-compose.unified.yml'
              - 'Makefile.unified'

  # ===== SECURITY SCANS =====
  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.isp-framework == 'true' || needs.detect-changes.outputs.management-platform == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Security Scan - ISP Framework
        if: needs.detect-changes.outputs.isp-framework == 'true'
        run: |
          cd isp-framework
          pip install bandit safety
          bandit -r src/ -f json -o security-report.json || true
          safety check --json || true
      
      - name: Run Security Scan - Management Platform  
        if: needs.detect-changes.outputs.management-platform == 'true'
        run: |
          cd management-platform
          pip install bandit safety
          bandit -r app/ -f json -o security-report.json || true
          safety check --json || true

  # ===== ISP FRAMEWORK TESTS =====
  test-isp-framework:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.isp-framework == 'true' || needs.detect-changes.outputs.shared == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: dotmac_isp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-isp-${{ hashFiles('isp-framework/requirements*.txt') }}
      
      - name: Install ISP Framework dependencies
        run: |
          cd isp-framework
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run ISP Framework linting
        run: |
          cd isp-framework
          flake8 src/
          mypy src/ || true
      
      - name: Run ISP Framework tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/dotmac_isp_test
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
        run: |
          cd isp-framework
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
      
      - name: Upload ISP Framework coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./isp-framework/coverage.xml
          flags: isp-framework
          name: isp-framework-coverage

  # ===== MANAGEMENT PLATFORM TESTS =====
  test-management-platform:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.management-platform == 'true' || needs.detect-changes.outputs.shared == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: mgmt_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-mgmt-${{ hashFiles('management-platform/requirements.txt') }}
      
      - name: Install Management Platform dependencies
        run: |
          cd management-platform
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run Management Platform linting
        run: |
          cd management-platform
          flake8 app/
          mypy app/ || true
      
      - name: Run Management Platform tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:test_password@localhost:5432/mgmt_platform_test
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
        run: |
          cd management-platform
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
      
      - name: Upload Management Platform coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./management-platform/coverage.xml
          flags: management-platform
          name: management-platform-coverage

  # ===== FRONTEND TESTS =====
  test-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml
      
      - name: Install pnpm
        run: npm install -g pnpm
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          pnpm install
      
      - name: Run frontend linting
        run: |
          cd frontend
          pnpm run lint
      
      - name: Run frontend tests
        run: |
          cd frontend
          pnpm run test
      
      - name: Build frontend applications
        run: |
          cd frontend
          pnpm run build

  # ===== CROSS-PLATFORM INTEGRATION TESTS =====
  test-integration:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-isp-framework, test-management-platform]
    if: always() && (needs.detect-changes.outputs.isp-framework == 'true' || needs.detect-changes.outputs.management-platform == 'true' || needs.detect-changes.outputs.shared == 'true')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Start complete platform for integration testing
        run: |
          # Start infrastructure services
          docker-compose -f docker-compose.unified.yml up -d postgres-shared redis-shared openbao-shared
          
          # Wait for services to be ready
          sleep 30
          
          # Start application services
          docker-compose -f docker-compose.unified.yml up -d isp-framework management-platform
          
          # Wait for applications to be ready
          sleep 60
      
      - name: Run cross-platform integration tests
        run: |
          pip install requests pytest
          
          # Test ISP Framework health
          curl -f http://localhost:8001/health
          
          # Test Management Platform health  
          curl -f http://localhost:8000/health
          
          # Test cross-platform API integration
          python -c "
          import requests
          import json
          
          # Test Management Platform can reach ISP Framework
          mgmt_response = requests.get('http://localhost:8000/health')
          print(f'Management Platform Health: {mgmt_response.status_code}')
          
          # Test ISP Framework health from Management Platform perspective
          isp_response = requests.get('http://localhost:8001/health') 
          print(f'ISP Framework Health: {isp_response.status_code}')
          
          assert mgmt_response.status_code == 200
          assert isp_response.status_code == 200
          print('✅ Cross-platform integration test passed')
          "
      
      - name: Check service logs for errors
        if: failure()
        run: |
          echo "=== ISP Framework Logs ==="
          docker-compose -f docker-compose.unified.yml logs isp-framework
          
          echo "=== Management Platform Logs ==="
          docker-compose -f docker-compose.unified.yml logs management-platform

  # ===== BUILD DOCKER IMAGES =====
  build-images:
    runs-on: ubuntu-latest
    needs: [test-isp-framework, test-management-platform]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for ISP Framework
        id: meta-isp
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/isp-framework
      
      - name: Extract metadata for Management Platform
        id: meta-mgmt
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/management-platform
      
      - name: Build and push ISP Framework image
        uses: docker/build-push-action@v4
        with:
          context: ./isp-framework
          push: true
          tags: ${{ steps.meta-isp.outputs.tags }}
          labels: ${{ steps.meta-isp.outputs.labels }}
      
      - name: Build and push Management Platform image
        uses: docker/build-push-action@v4
        with:
          context: ./management-platform
          push: true
          tags: ${{ steps.meta-mgmt.outputs.tags }}
          labels: ${{ steps.meta-mgmt.outputs.labels }}

  # ===== DEPLOY TO STAGING =====
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-integration, build-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging environment..."
          # This would typically deploy to your staging Kubernetes cluster
          # kubectl apply -f shared/deployments/kubernetes/staging/
          echo "✅ Staging deployment completed"

  # ===== DEPLOY TO PRODUCTION =====
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-integration, build-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production environment
        run: |
          echo "🚀 Deploying to production environment..."
          # This would typically deploy to your production Kubernetes cluster
          # kubectl apply -f shared/deployments/kubernetes/production/
          echo "✅ Production deployment completed"

  # ===== NOTIFICATION =====
  notify:
    runs-on: ubuntu-latest
    needs: [test-integration, build-images]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.test-integration.result }}" == "success" && "${{ needs.build-images.result }}" == "success" ]]; then
            echo "✅ DotMac Platform CI/CD completed successfully"
          else
            echo "❌ DotMac Platform CI/CD failed"
            exit 1
          fi