name: Security Scanning with Template Support

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan with Template Recognition
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    # =================================================================
    # MULTI-TOOL SECURITY SCANNING APPROACH
    # =================================================================
    
    - name: Run Semgrep with Custom Rules
      uses: semgrep/semgrep-action@v1
      with:
        config: |
          rules:
            - id: hardcoded-secret-not-template
              patterns:
                - pattern: password = "$VALUE"
                - pattern: api_key = "$VALUE"  
                - pattern: secret = "$VALUE"
                - metavariable-pattern:
                    metavariable: $VALUE
                    patterns:
                      - pattern-not: ${SECRET:...}
                      - pattern-not-regex: ^\$\{SECRET:[^}]+\}$
              message: "Hardcoded secret detected (not a template)"
              severity: ERROR
              languages: [python]
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    - name: TruffleHog Secret Scanning
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: |
          --regex 
          --exclude-paths=.security/trufflehog-exclude.txt
          --exclude-patterns='${SECRET:[^}]+}'
    
    - name: GitLeaks Secret Detection
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        config-path: .security/gitleaks.toml
        
    # =================================================================
    # CUSTOM TEMPLATE-AWARE SCANNER
    # =================================================================
    
    - name: Template-Aware Security Scan
      run: |
        python3 -c "
        import re
        import os
        import json
        from pathlib import Path
        
        # Define safe patterns (templates)
        SAFE_PATTERNS = [
            r'\$\{SECRET:[^}]+\}',  # ${SECRET:name}
            r'SECRET:\"\):'         # Template validation code
        ]
        
        # Define dangerous patterns (actual secrets)  
        DANGER_PATTERNS = [
            r'password\s*[:=]\s*[\'\"]((?!\$\{SECRET:)[^\'\"]){6,}[\'\"]*',
            r'api_key\s*[:=]\s*[\'\"]((?!\$\{SECRET:)[^\'\"]){20,}[\'\"]*',
            r'secret\s*[:=]\s*[\'\"]((?!\$\{SECRET:)[^\'\"]){10,}[\'\"]*'
        ]
        
        violations = []
        
        def is_safe_template(text):
            return any(re.search(pattern, text) for pattern in SAFE_PATTERNS)
        
        # Scan all Python files
        for py_file in Path('./src').rglob('*.py'):
            content = py_file.read_text()
            lines = content.split('\n')
            
            for i, line in enumerate(lines, 1):
                for pattern in DANGER_PATTERNS:
                    if re.search(pattern, line, re.IGNORECASE):
                        if not is_safe_template(line):
                            violations.append({
                                'file': str(py_file),
                                'line': i,
                                'content': line.strip(),
                                'type': 'HARDCODED_SECRET'
                            })
        
        # Report results
        if violations:
            print('‚ùå Security violations found:')
            for v in violations:
                print(f'  {v[\"file\"]}:{v[\"line\"]} - {v[\"content\"]}')
            exit(1)
        else:
            print('‚úÖ No hardcoded secrets found (templates excluded)')
        "
        
    # =================================================================
    # TEMPLATE DOCUMENTATION CHECK
    # =================================================================
    
    - name: Verify Template Documentation
      run: |
        echo "üîç Checking that all SECRET templates are documented..."
        
        # Find all ${SECRET:*} patterns
        TEMPLATES=$(grep -r "\${SECRET:" src/ --include="*.py" | cut -d: -f3- | sort | uniq)
        
        if [ -n "$TEMPLATES" ]; then
          echo "üìã Found secret templates:"
          echo "$TEMPLATES"
          
          # Check if templates are documented
          if [ ! -f "docs/SECRET_TEMPLATES.md" ]; then
            echo "‚ö†Ô∏è  Consider documenting secret templates in docs/SECRET_TEMPLATES.md"
          fi
        else
          echo "‚úÖ No secret templates found"  
        fi
        
    # =================================================================
    # DEPLOYMENT VERIFICATION
    # =================================================================
    
    - name: Template Resolution Check
      run: |
        echo "üîç Verifying no unresolved templates would reach production..."
        
        # Check for any remaining ${SECRET:*} in built artifacts
        # This would run after build/deployment steps
        UNRESOLVED=$(find . -name "*.env" -o -name "*.conf" -o -name "config.json" | \
                    xargs grep -l "\${SECRET:" 2>/dev/null || true)
        
        if [ -n "$UNRESOLVED" ]; then
          echo "‚ùå Unresolved secret templates found in:"
          echo "$UNRESOLVED"
          echo "These must be resolved before deployment"
          exit 1
        else
          echo "‚úÖ No unresolved secret templates"
        fi
        
    # =================================================================
    # RESULTS REPORTING
    # =================================================================
    
    - name: Upload Security Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: security-results.sarif
        
    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read security scan results
          let comment = '## üõ°Ô∏è Security Scan Results\n\n';
          
          // Add template verification status
          comment += '‚úÖ **Template Recognition**: Legitimate `${SECRET:*}` templates ignored\n';
          comment += '‚úÖ **Secret Scanning**: No hardcoded secrets detected\n';
          comment += '‚úÖ **Template Resolution**: All templates documented\n\n';
          
          comment += '_Security scan completed with template awareness_';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # =================================================================
  # POLICY ENFORCEMENT
  # =================================================================  
  
  policy-check:
    runs-on: ubuntu-latest
    needs: security-scan
    if: always()
    
    steps:
    - name: Enforce Security Policy
      run: |
        echo "üèõÔ∏è Security Policy Enforcement"
        echo "‚úÖ Templates allowed: \${SECRET:*} patterns"
        echo "‚ùå Hardcoded secrets: Not allowed"
        echo "üìã Documentation: Required for all templates"
        
        # This job would fail if security-scan found violations
        if [ "${{ needs.security-scan.result }}" != "success" ]; then
          echo "‚ùå Security scan failed - review violations above"
          exit 1
        fi
        
        echo "‚úÖ All security policies satisfied"