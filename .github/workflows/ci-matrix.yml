name: CI Matrix - DotMac Framework

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly security scans
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.9"

jobs:
  detect-changes:
    name: Detect Package Changes
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.changes.outputs.packages }}
      changed-packages: ${{ steps.changes.outputs.changed-packages }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed packages
        id: changes
        run: |
          # List all packages
          ALL_PACKAGES=$(find . -name "pyproject.toml" -path "./dotmac_*" | cut -d'/' -f2 | sort | jq -R -s -c 'split("\n")[:-1]')
          echo "packages=$ALL_PACKAGES" >> $GITHUB_OUTPUT
          
          # Detect changed packages on push/PR
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            # For scheduled runs, test all packages
            echo "changed-packages=$ALL_PACKAGES" >> $GITHUB_OUTPUT
          else
            # For pushes/PRs, only test changed packages
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }} 2>/dev/null || echo "")
            CHANGED_PACKAGES=$(echo "$CHANGED_FILES" | grep -E '^dotmac_[^/]+/' | cut -d'/' -f1 | sort -u | jq -R -s -c 'split("\n")[:-1]')
            if [[ "$CHANGED_PACKAGES" == '[""]' ]]; then
              CHANGED_PACKAGES='[]'
            fi
            echo "changed-packages=$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
          fi

  complexity-audit:
    name: Complexity Rules Enforcement
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-packages != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed-packages) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Enforce Complexity Rules - ${{ matrix.package }}
        working-directory: ${{ matrix.package }}
        run: |
          echo "🔍 Checking complexity rules for ${{ matrix.package }}"
          
          # Run complexity checks - these should NOT be ignored anymore
          ruff check --select C901,PLR0913,PLR0915 . || {
            echo "❌ Complexity violations found in ${{ matrix.package }}"
            echo "🔧 C901: Functions are too complex (max: 10)"
            echo "🔧 PLR0913: Too many arguments (max: 8)" 
            echo "🔧 PLR0915: Too many statements (max: 50)"
            echo ""
            echo "Please refactor the code to reduce complexity instead of ignoring these rules."
            exit 1
          }
          
          echo "✅ Complexity rules passed for ${{ matrix.package }}"

  security-scan:
    name: Security Scanning
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-packages != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed-packages) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety pip-audit semgrep

      - name: Bandit Security Scan - ${{ matrix.package }}
        working-directory: ${{ matrix.package }}
        run: |
          echo "🔐 Running Bandit security scan for ${{ matrix.package }}"
          bandit -r . -f json -o bandit-report.json --exit-zero
          bandit -r . || echo "⚠️ Bandit found potential security issues"

      - name: Safety Dependency Scan - ${{ matrix.package }}
        working-directory: ${{ matrix.package }}
        run: |
          echo "🔍 Running Safety dependency scan for ${{ matrix.package }}"
          # Create requirements.txt from pyproject.toml for Safety
          python -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          deps = data.get('project', {}).get('dependencies', [])
          with open('requirements-temp.txt', 'w') as f:
              for dep in deps:
                  f.write(dep + '\n')
          "
          safety check --file=requirements-temp.txt --output=json --save-json safety-report.json || echo "⚠️ Safety found vulnerabilities"
          rm -f requirements-temp.txt

      - name: pip-audit Scan - ${{ matrix.package }}
        working-directory: ${{ matrix.package }}
        run: |
          echo "🔍 Running pip-audit scan for ${{ matrix.package }}"
          pip-audit --format=json --output=pip-audit-report.json . || echo "⚠️ pip-audit found vulnerabilities"

      - name: Semgrep Security Analysis - ${{ matrix.package }}
        working-directory: ${{ matrix.package }}
        run: |
          echo "🔍 Running Semgrep security analysis for ${{ matrix.package }}"
          semgrep --config=auto --json --output=semgrep-report.json . || echo "⚠️ Semgrep found security issues"

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ matrix.package }}
          path: |
            ${{ matrix.package }}/*-report.json

  code-quality:
    name: Code Quality & Type Checking
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-packages != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed-packages) }}
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        working-directory: ${{ matrix.package }}
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Format Check with Black
        working-directory: ${{ matrix.package }}
        run: |
          black --check --diff .

      - name: Lint with Ruff
        working-directory: ${{ matrix.package }}
        run: |
          ruff check .

      - name: Type Check with MyPy
        working-directory: ${{ matrix.package }}
        run: |
          mypy . --install-types --non-interactive

      - name: Verify py.typed marker
        working-directory: ${{ matrix.package }}
        run: |
          package_name=$(echo "${{ matrix.package }}" | tr '-' '_')
          if [[ ! -f "${package_name}/py.typed" ]]; then
            echo "❌ Missing py.typed marker in ${package_name}/"
            exit 1
          fi
          echo "✅ py.typed marker found"

  test-suite:
    name: Test Suite
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-packages != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed-packages) }}
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        working-directory: ${{ matrix.package }}
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"

      - name: Run Tests with Coverage
        working-directory: ${{ matrix.package }}
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest --cov --cov-report=xml --cov-report=html --cov-fail-under=80

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.9'
        with:
          file: ${{ matrix.package }}/coverage.xml
          flags: ${{ matrix.package }}
          name: coverage-${{ matrix.package }}

  performance-test:
    name: Performance Testing
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-packages != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed-packages) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: ${{ matrix.package }}
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Performance Tests
        working-directory: ${{ matrix.package }}
        run: |
          # Run performance-specific tests if they exist
          if [[ -d "tests/performance" ]]; then
            pytest tests/performance/ -v --tb=short
          else
            echo "⚠️ No performance tests found for ${{ matrix.package }}"
          fi

  integration-test:
    name: Integration Testing
    needs: detect-changes
    if: needs.detect-changes.outputs.changed-packages != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed-packages) }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: integration_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      kafka:
        image: confluentinc/cp-kafka:latest
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092

      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
        ports:
          - 2181:2181

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: ${{ matrix.package }}
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
          # Install additional integration dependencies
          if [[ -f "requirements-integration.txt" ]]; then
            pip install -r requirements-integration.txt
          fi

      - name: Wait for Services
        run: |
          sleep 30  # Wait for Kafka to be ready

      - name: Run Integration Tests
        working-directory: ${{ matrix.package }}
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/integration_test_db
          REDIS_URL: redis://localhost:6379/0
          KAFKA_BOOTSTRAP_SERVERS: localhost:9092
        run: |
          if [[ -d "tests/integration" ]]; then
            pytest tests/integration/ -v --tb=short -m "integration"
          else
            echo "⚠️ No integration tests found for ${{ matrix.package }}"
          fi

  build-and-package:
    name: Build & Package
    needs: [complexity-audit, security-scan, code-quality, test-suite]
    if: always() && needs.complexity-audit.result == 'success' && needs.code-quality.result == 'success' && needs.test-suite.result == 'success'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.detect-changes.outputs.changed-packages) }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build Package - ${{ matrix.package }}
        working-directory: ${{ matrix.package }}
        run: |
          python -m build

      - name: Verify Package
        working-directory: ${{ matrix.package }}
        run: |
          twine check dist/*

      - name: Upload Package Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages-${{ matrix.package }}
          path: ${{ matrix.package }}/dist/

  summary:
    name: CI Summary
    needs: [complexity-audit, security-scan, code-quality, test-suite, integration-test, build-and-package]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Print Results Summary
        run: |
          echo "🎯 CI Matrix Results Summary"
          echo "============================"
          echo "🔧 Complexity Audit: ${{ needs.complexity-audit.result }}"
          echo "🔐 Security Scan: ${{ needs.security-scan.result }}"
          echo "✨ Code Quality: ${{ needs.code-quality.result }}"
          echo "🧪 Test Suite: ${{ needs.test-suite.result }}"
          echo "🔗 Integration Test: ${{ needs.integration-test.result }}"
          echo "📦 Build & Package: ${{ needs.build-and-package.result }}"
          echo ""
          
          if [[ "${{ needs.complexity-audit.result }}" == "success" ]]; then
            echo "✅ All complexity rules are now ENFORCED across the framework"
            echo "   • C901: Function complexity ≤ 10"
            echo "   • PLR0913: Function arguments ≤ 8"
            echo "   • PLR0915: Function statements ≤ 50"
          else
            echo "❌ Complexity rules enforcement failed"
            echo "   Please refactor complex code instead of ignoring the rules"
          fi

      - name: Check Critical Failures
        run: |
          if [[ "${{ needs.complexity-audit.result }}" == "failure" ]]; then
            echo "❌ Critical failure: Complexity rules not met"
            exit 1
          fi
          
          if [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
            echo "❌ Critical failure: Code quality checks failed"
            exit 1
          fi
          
          if [[ "${{ needs.test-suite.result }}" == "failure" ]]; then
            echo "❌ Critical failure: Test suite failed"
            exit 1
          fi
          
          echo "✅ All critical checks passed!"