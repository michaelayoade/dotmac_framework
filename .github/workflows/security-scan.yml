name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security scanning tools
      run: |
        pip install bandit[toml] safety semgrep
        
    - name: Run Bandit security scanner
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
      continue-on-error: true

    - name: Run Safety scanner for dependencies
      run: |
        pip freeze | safety check --json --output safety-report.json || true
        pip freeze | safety check
      continue-on-error: true

    - name: Run Semgrep security scanner
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .
      continue-on-error: true

    - name: Scan for secrets with TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Check for hardcoded credentials
      run: |
        echo "Scanning for hardcoded credentials in production code only..."
        
        # Comprehensive exclusion of test files and directories
        find . -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" | \
        grep -v -E "(test|spec|__test__|__tests__|\.test\.|\.spec\.|tests/|test/|__pycache__|node_modules|\.git|examples|mock|fixtures|__mocks__|\.venv|venv)" | \
        xargs grep -l -E "(password|secret|key|token)\s*[:=]\s*[\"'][^\"']{8,}[\"']" 2>/dev/null | \
        xargs grep -v -E "(CHANGE_ME|INSECURE.*EXAMPLE|mock.*|test.*|example.*|placeholder|demo.*|dev.*)" 2>/dev/null | head -10 || true
        
        # If any found, exit with error
        if find . -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.yml" -o -name "*.yaml" -o -name "*.json" | \
           grep -v -E "(test|spec|__test__|__tests__|\.test\.|\.spec\.|tests/|test/|__pycache__|node_modules|\.git|examples|mock|fixtures|__mocks__|\.venv|venv)" | \
           xargs grep -l -E "(password|secret|key|token)\s*[:=]\s*[\"'][^\"']{8,}[\"']" 2>/dev/null | \
           xargs grep -v -E "(CHANGE_ME|INSECURE.*EXAMPLE|mock.*|test.*|example.*|placeholder|demo.*|dev.*|\$\{SECRET:|\$\{.*\})" 2>/dev/null | head -1; then
          echo "‚ùå Found potential hardcoded credentials in production code"
          exit 1
        else
          echo "‚úÖ No hardcoded credentials found in production code"
        fi

    - name: Validate production configurations
      run: |
        echo "Validating production configurations..."
        
        # Check that production configs use environment variables
        if find . -name "*.yml" -o -name "*.yaml" | xargs grep -l "production" | \
           xargs grep -E "(password|secret|key).*:" | \
           grep -v "\${" | grep -v "CHANGE_ME"; then
          echo "‚ùå Found hardcoded values in production configurations"
          exit 1
        else
          echo "‚úÖ Production configurations properly use environment variables"
        fi

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let summary = '## üõ°Ô∏è Security Scan Results\n\n';
          
          // Read bandit results
          try {
            const banditData = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            const issues = banditData.results.length;
            summary += `**Bandit (Static Analysis):** ${issues} potential issues found\n`;
          } catch (e) {
            summary += `**Bandit:** Scan completed\n`;
          }
          
          // Read safety results
          try {
            const safetyData = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            const vulns = safetyData.length;
            summary += `**Safety (Dependencies):** ${vulns} vulnerabilities found\n`;
          } catch (e) {
            summary += `**Safety:** Scan completed\n`;
          }
          
          summary += `\n‚úÖ Hardcoded credentials check: Passed\n`;
          summary += `‚úÖ Production configuration check: Passed\n\n`;
          summary += `See job artifacts for detailed reports.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });