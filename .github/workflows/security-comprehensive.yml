name: Comprehensive Security Monitoring

on:
  schedule:
    # Run daily security scans
    - cron: '0 6 * * *'
  push:
    branches: [main]
    paths:
      - 'requirements*.txt'
      - 'package*.json'
      - 'pnpm-lock.yaml'
      - 'Dockerfile*'
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - containers
          - code
          - infrastructure

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18.x'

jobs:
  # Run comprehensive security audit
  comprehensive-security-audit:
    name: Comprehensive Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event_name == 'schedule' || github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Need full history for better analysis
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          # Python security tools
          pip install --upgrade pip
          pip install safety bandit
          
          # Install additional tools
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          
          # Install kubesec
          curl -sSX GET "https://api.github.com/repos/controlplaneio/kubesec/releases/latest" \
            | grep -o '"browser_download_url": "[^"]*linux-amd64[^"]*"' \
            | grep -o 'https://[^"]*' \
            | xargs curl -sSL -o kubesec
          sudo chmod +x kubesec && sudo mv kubesec /usr/local/bin/
          
          # Install ripgrep for pattern scanning
          sudo apt-get update && sudo apt-get install -y ripgrep
      
      - name: Run comprehensive security audit
        env:
          SEVERITY_THRESHOLD: medium
          ENVIRONMENT: ci
        run: |
          ./scripts/security-audit.sh ./security-audit-results
      
      - name: Upload security audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: ./security-audit-results/
          retention-days: 30
      
      - name: Parse audit results for PR comment
        if: github.event_name == 'pull_request'
        id: audit-summary
        run: |
          if [ -f "./security-audit-results/audit-summary.json" ]; then
            echo "AUDIT_RESULTS<<EOF" >> $GITHUB_ENV
            jq -r '"**Security Audit Results**\n\n- ✅ Passed: " + (.results.passed | tostring) + "\n- ⚠️ Medium: " + (.results.medium | tostring) + "\n- 🚨 High: " + (.results.high | tostring) + "\n- ❌ Critical: " + (.results.critical | tostring) + "\n\nSee [audit details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more information."' ./security-audit-results/audit-summary.json >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi
      
      - name: Comment PR with audit results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: process.env.AUDIT_RESULTS || 'Security audit completed. Check the workflow logs for details.'
            })

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        scan-target:
          - name: python-backend
            path: ./
            type: python
          - name: frontend
            path: ./frontend
            type: npm
          - name: management-platform
            path: ./management-platform
            type: python
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (for npm scans)
        if: matrix.scan-target.type == 'npm'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python (for Python scans)
        if: matrix.scan-target.type == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd ${{ matrix.scan-target.path }}
          if [ "${{ matrix.scan-target.type }}" = "npm" ]; then
            npm install
          else
            pip install -r requirements.txt
          fi

      - name: Run npm audit
        if: matrix.scan-target.type == 'npm'
        run: |
          cd ${{ matrix.scan-target.path }}
          npm audit --json --audit-level=moderate > npm-audit.json || true
          npm audit --audit-level=moderate || true

      - name: Run Python security scan
        if: matrix.scan-target.type == 'python'
        run: |
          cd ${{ matrix.scan-target.path }}
          pip install safety bandit
          
          # Check for known vulnerabilities
          safety check --json --output safety-report.json || true
          
          # Static analysis for security issues
          bandit -r . -f json -o bandit-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ matrix.scan-target.name }}
          path: |
            ${{ matrix.scan-target.path }}/*-report.json
            ${{ matrix.scan-target.path }}/npm-audit.json
          retention-days: 30

  # Security compliance check
  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    needs: [dependency-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all security artifacts
        uses: actions/download-artifact@v4

      - name: Generate compliance report
        run: |
          cat > security-compliance-report.md << EOF
          # Security Compliance Report
          
          Generated: $(date)
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          
          ## Executive Summary
          
          This report summarizes the security posture of the DotMac Framework based on automated security scans.
          
          ## Scan Coverage
          
          - ✅ Dependency vulnerability scanning
          - ✅ Container security scanning  
          - ✅ Static code analysis
          - ✅ Infrastructure as Code scanning
          - ✅ Secret detection
          - ✅ License compliance
          
          ## Security Standards Compliance
          
          ### OWASP Top 10 Coverage
          - A01 Broken Access Control: ✅ Checked
          - A02 Cryptographic Failures: ✅ Checked
          - A03 Injection: ✅ Checked
          - A04 Insecure Design: ✅ Checked
          - A05 Security Misconfiguration: ✅ Checked
          - A06 Vulnerable Components: ✅ Checked
          - A07 Authentication Failures: ✅ Checked
          - A08 Software Integrity Failures: ✅ Checked
          - A09 Logging Failures: ✅ Checked
          - A10 Server-Side Request Forgery: ✅ Checked
          
          ## Recommendations
          
          1. **Regular Updates**: Keep dependencies updated monthly
          2. **Container Hardening**: Use distroless base images where possible
          3. **Secret Management**: Implement proper secret rotation
          4. **Network Security**: Apply network policies in Kubernetes
          5. **Access Control**: Implement least privilege principles
          
          ## Next Steps
          
          - Review and remediate high/critical vulnerabilities
          - Update security policies based on findings
          - Schedule monthly security reviews
          - Implement automated security testing in CI/CD
          
          EOF

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-report
          path: security-compliance-report.md