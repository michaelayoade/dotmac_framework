name: Security Audit

on:
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [main]
    paths:
      - 'requirements*.txt'
      - 'requirements*.lock'
      - '**/pyproject.toml'

env:
  PYTHON_VERSION: "3.11"

jobs:
  # =============================================================================
  # COMPREHENSIVE SECURITY AUDIT
  # =============================================================================
  security-audit:
    name: Comprehensive Security Audit
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
      issues: write  # For creating security issues
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install audit tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep pip-audit cyclonedx-bom osv-scanner

      - name: Generate SBOM (Software Bill of Materials)
        run: |
          echo "üìã Generating Software Bill of Materials..."
          cyclonedx-py -o sbom.json
          cyclonedx-py -o sbom.xml --format xml

      - name: Run OSV-Scanner (vulnerability database)
        run: |
          echo "üîç Running OSV vulnerability scan..."
          osv-scanner --format sarif --output osv-results.sarif . || true
          osv-scanner --format table . || true

      - name: Advanced dependency analysis
        run: |
          echo "üîç Advanced dependency vulnerability analysis..."
          
          # Create comprehensive audit report
          echo "# Security Audit Report - $(date)" > security-audit-report.md
          echo "" >> security-audit-report.md
          
          # Check for outdated packages
          echo "## Outdated Dependencies" >> security-audit-report.md
          pip list --outdated --format=json > outdated-packages.json || true
          python -c "
import json
with open('outdated-packages.json') as f:
    data = json.load(f)
    if data:
        print('| Package | Current | Latest | Type |')
        print('|---------|---------|--------|------|')
        for pkg in data:
            print(f'| {pkg[\"name\"]} | {pkg[\"version\"]} | {pkg[\"latest_version\"]} | {pkg[\"latest_filetype\"]} |')
    else:
        print('All packages up to date ‚úÖ')
" >> security-audit-report.md
          
          # License compliance check
          echo -e "\n## License Analysis" >> security-audit-report.md
          pip-licenses --format=markdown --order=license >> security-audit-report.md
          
          # High-risk package detection
          echo -e "\n## High-Risk Package Analysis" >> security-audit-report.md
          python -c "
import subprocess
import json
result = subprocess.run(['pip', 'list', '--format=json'], capture_output=True, text=True)
packages = json.loads(result.stdout)
high_risk_patterns = ['crypto', 'request', 'urllib', 'ssl', 'socket', 'subprocess', 'eval', 'exec']
print('| Package | Version | Risk Level |')
print('|---------|---------|------------|')
for pkg in packages:
    risk = 'Low'
    for pattern in high_risk_patterns:
        if pattern in pkg['name'].lower():
            risk = '‚ö†Ô∏è Medium'
            break
    print(f'| {pkg[\"name\"]} | {pkg[\"version\"]} | {risk} |')
" >> security-audit-report.md

      - name: Upload OSV SARIF results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: osv-results.sarif
          category: osv-scanner

      - name: Upload audit artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-audit-${{ github.run_number }}
          path: |
            security-audit-report.md
            sbom.json
            sbom.xml
            osv-results.sarif
            outdated-packages.json

      - name: Check for critical vulnerabilities
        id: vuln-check
        run: |
          echo "üîç Checking for critical vulnerabilities..."
          
          # Count vulnerabilities by severity
          critical_count=$(osv-scanner --format json . 2>/dev/null | jq '.results[].packages[].vulnerabilities[] | select(.severity == "CRITICAL") | length' | wc -l || echo "0")
          high_count=$(osv-scanner --format json . 2>/dev/null | jq '.results[].packages[].vulnerabilities[] | select(.severity == "HIGH") | length' | wc -l || echo "0")
          
          echo "critical_vulns=$critical_count" >> $GITHUB_OUTPUT
          echo "high_vulns=$high_count" >> $GITHUB_OUTPUT
          
          if [ "$critical_count" -gt 0 ] || [ "$high_count" -gt 5 ]; then
            echo "severe_vulns=true" >> $GITHUB_OUTPUT
          else
            echo "severe_vulns=false" >> $GITHUB_OUTPUT
          fi

      - name: Create security issue for critical findings
        if: steps.vuln-check.outputs.severe_vulns == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const critical = ${{ steps.vuln-check.outputs.critical_vulns }};
            const high = ${{ steps.vuln-check.outputs.high_vulns }};
            
            const title = `üö® Security Alert: ${critical} Critical, ${high} High Severity Vulnerabilities Detected`;
            const body = `
            # Security Vulnerability Alert
            
            **Date**: ${new Date().toISOString()}
            **Workflow**: Security Audit
            **Run**: ${{ github.run_number }}
            
            ## Summary
            - **Critical Vulnerabilities**: ${critical}
            - **High Severity Vulnerabilities**: ${high}
            
            ## Action Required
            1. Review the security audit report in the workflow artifacts
            2. Update vulnerable dependencies immediately
            3. Test thoroughly after updates
            4. Close this issue once vulnerabilities are resolved
            
            ## Artifacts
            - [Security Audit Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [SBOM (Software Bill of Materials)](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            **This issue was automatically created by the Security Audit workflow.**
            `;
            
            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,vulnerability'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Security Alert') && 
              issue.created_at > new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'vulnerability', 'urgent']
              });
            }

      - name: Security audit summary
        if: always()
        run: |
          echo "## üîí Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scans Performed" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ OSV vulnerability database scan" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SBOM generation" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Dependency analysis" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ License compliance check" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ High-risk package detection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical Vulnerabilities**: ${{ steps.vuln-check.outputs.critical_vulns }}" >> $GITHUB_STEP_SUMMARY
          echo "- **High Severity Vulnerabilities**: ${{ steps.vuln-check.outputs.high_vulns }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.vuln-check.outputs.severe_vulns }}" = "true" ]; then
            echo "üö® **Action Required**: Critical or multiple high-severity vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **Status**: No critical security issues detected" >> $GITHUB_STEP_SUMMARY
          fi

  # =============================================================================
  # SUPPLY CHAIN SECURITY
  # =============================================================================
  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install supply chain tools
        run: |
          python -m pip install --upgrade pip
          pip install cyclonedx-bom pip-audit

      - name: Verify package signatures (if available)
        run: |
          echo "üîê Verifying package integrity..."
          # This would verify package signatures if available
          pip install sigstore
          # Note: Most PyPI packages don't have signatures yet
          echo "Package signature verification would run here"

      - name: Check for typosquatting
        run: |
          echo "üéØ Checking for potential typosquatting attacks..."
          python -c "
import subprocess
import json
import difflib

# Get installed packages
result = subprocess.run(['pip', 'list', '--format=json'], capture_output=True, text=True)
packages = json.loads(result.stdout)

# Common packages that are often typosquatted
common_packages = [
    'requests', 'urllib3', 'certifi', 'charset-normalizer', 'idna',
    'numpy', 'pandas', 'matplotlib', 'scipy', 'pillow',
    'django', 'flask', 'fastapi', 'sqlalchemy', 'redis',
    'boto3', 'kubernetes', 'docker', 'pydantic', 'click'
]

print('# Typosquatting Analysis')
print('| Package | Potential Typosquat Target | Similarity |')
print('|---------|---------------------------|------------|')

for pkg in packages:
    pkg_name = pkg['name'].lower()
    for common in common_packages:
        if pkg_name != common:
            similarity = difflib.SequenceMatcher(None, pkg_name, common).ratio()
            if 0.7 < similarity < 0.95:  # Suspicious similarity
                print(f'| {pkg_name} | {common} | {similarity:.2f} |')
" > typosquat-analysis.md

      - name: Upload supply chain reports
        uses: actions/upload-artifact@v3
        with:
          name: supply-chain-reports
          path: |
            typosquat-analysis.md