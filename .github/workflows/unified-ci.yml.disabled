name: Unified CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Import shared configuration
env:
  NODE_VERSION: "18.x"
  PYTHON_VERSION: "3.11"
  PNPM_VERSION: "8.x"
  REGISTRY: ghcr.io
  COVERAGE_THRESHOLD: 80
  SECURITY_SEVERITY_THRESHOLD: "high"

jobs:
  # ===== CHANGE DETECTION =====
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      isp-framework: ${{ steps.changes.outputs.isp-framework }}
      management-platform: ${{ steps.changes.outputs.management-platform }}
      shared: ${{ steps.changes.outputs.shared }}
      config: ${{ steps.changes.outputs.config }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            isp-framework:
              - 'src/dotmac_isp/**'
            management-platform:
              - 'src/dotmac_management/**'
            shared:
              - 'src/dotmac_shared/**'
              - 'config/**'
            config:
              - '.github/workflows/**'
              - 'docker-compose*.yml'
              - 'Dockerfile*'

  # ===== SECURITY SCANNING =====
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: detect-changes
    if: always() # Run security on every change
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Semgrep security analysis
        uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,python
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ===== FRONTEND TESTING =====
  frontend-ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || needs.detect-changes.outputs.shared == 'true'

    strategy:
      fail-fast: false
      matrix:
        app:
          [
            admin,
            customer,
            reseller,
            technician,
            tenant-portal,
            management-admin,
            management-reseller,
          ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./frontend

      # Parallel execution of checks
      - name: Type check & Lint & Test
        run: |
          echo "Running parallel checks for ${{ matrix.app }}..."

          # Run type checking in background
          pnpm run type-check &
          TYPE_CHECK_PID=$!

          # Run linting in background
          pnpm run lint &
          LINT_PID=$!

          # Run unit tests with coverage
          pnpm run test:unit --coverage --maxWorkers=2

          # Wait for type checking and linting
          wait $TYPE_CHECK_PID
          wait $LINT_PID

          echo "All checks completed successfully"
        working-directory: ./frontend/apps/${{ matrix.app }}

      - name: Build application
        run: pnpm run build
        working-directory: ./frontend/apps/${{ matrix.app }}

      - name: Bundle analysis
        run: |
          pnpm run analyze || echo "Bundle analysis not configured for ${{ matrix.app }}"
        working-directory: ./frontend/apps/${{ matrix.app }}

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/apps/${{ matrix.app }}/coverage/lcov.info
          flags: frontend-${{ matrix.app }}
          name: ${{ matrix.app }}-coverage

  # ===== BACKEND TESTING =====
  backend-ci:
    name: Backend CI
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.isp-framework == 'true' || needs.detect-changes.outputs.management-platform == 'true' || needs.detect-changes.outputs.shared == 'true'

    strategy:
      fail-fast: false
      matrix:
        service:
          - name: isp-framework
            path: src/dotmac_isp
            enabled: ${{ needs.detect-changes.outputs.isp-framework == 'true' }}
          - name: management-platform
            path: src/dotmac_management
            enabled: ${{ needs.detect-changes.outputs.management-platform == 'true' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
        working-directory: ./src

      - name: Security checks
        run: |
          bandit -r ${{ matrix.service.path }} -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
          echo "Security scan completed"
        working-directory: ./src

      - name: Code quality checks
        run: |
          # Run linting and formatting checks in parallel
          ruff check ${{ matrix.service.path }} &
          RUFF_PID=$!

          black --check ${{ matrix.service.path }} &
          BLACK_PID=$!

          mypy ${{ matrix.service.path }} &
          MYPY_PID=$!

          # Wait for all checks
          wait $RUFF_PID
          wait $BLACK_PID
          wait $MYPY_PID

          echo "Code quality checks completed"
        working-directory: ./src

      - name: Run tests
        run: |
          PYTHONPATH=. pytest ${{ matrix.service.path }}/tests/ -v \
            --cov=${{ matrix.service.path }} \
            --cov-report=xml \
            --cov-report=term \
            --maxfail=5 \
            --tb=short
        working-directory: ./src
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./src/coverage.xml
          flags: backend-${{ matrix.service.name }}
          name: ${{ matrix.service.name }}-coverage

  # ===== INTEGRATION TESTING =====
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci]
    if: always() && (needs.frontend-ci.result == 'success' || needs.frontend-ci.result == 'skipped') && (needs.backend-ci.result == 'success' || needs.backend-ci.result == 'skipped')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: |
          # Frontend dependencies
          cd frontend && pnpm install --frozen-lockfile

          # Backend dependencies
          cd ../src
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start services
        run: |
          # Start backend services
          cd src
          python -m dotmac_isp.app &
          python -m dotmac_management.app &
          sleep 10

          # Build and start frontend
          cd ../frontend
          pnpm run build
          pnpm run start:preview &
          sleep 15
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: test

      - name: Run E2E tests
        run: |
          npx playwright install --with-deps
          npx playwright test --reporter=html
        working-directory: ./frontend

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 7

  # ===== PERFORMANCE TESTING =====
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend-ci]
    if: needs.frontend-ci.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ./frontend

      - name: Build for performance testing
        run: pnpm run build
        working-directory: ./frontend

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --config=.lighthouserc.json
        working-directory: ./frontend
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            frontend/.lighthouseci/
            frontend/bundle-analysis/
          retention-days: 7

  # ===== CONTAINER BUILDS =====
  container-builds:
    name: Container Builds
    runs-on: ubuntu-latest
    needs: [security-scan, backend-ci]
    if: needs.backend-ci.result == 'success'

    strategy:
      matrix:
        service:
          - name: isp-framework
            context: .
            dockerfile: ./Dockerfile
          - name: management-platform
            context: .
            dockerfile: ./docker/Dockerfile.management

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build container image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service.name }}:latest
          format: "sarif"
          output: "container-scan-${{ matrix.service.name }}.sarif"

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "container-scan-${{ matrix.service.name }}.sarif"

  # ===== CI SUMMARY =====
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs:
      [
        security-scan,
        frontend-ci,
        backend-ci,
        integration-tests,
        performance-tests,
        container-builds,
      ]
    if: always()

    steps:
      - name: Check CI results
        run: |
          echo "=== CI PIPELINE RESULTS ==="
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Frontend CI: ${{ needs.frontend-ci.result }}"
          echo "Backend CI: ${{ needs.backend-ci.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          echo "Container Builds: ${{ needs.container-builds.result }}"

          # Check if any critical job failed
          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "❌ Security scan failed - blocking deployment"
            exit 1
          fi

          if [[ "${{ needs.backend-ci.result }}" == "failure" ]]; then
            echo "❌ Backend CI failed - blocking deployment"
            exit 1
          fi

          if [[ "${{ needs.frontend-ci.result }}" == "failure" ]]; then
            echo "❌ Frontend CI failed - blocking deployment"
            exit 1
          fi

          echo "✅ All critical checks passed - ready for deployment"

      - name: Create deployment readiness artifact
        if: github.ref == 'refs/heads/main' && success()
        run: |
          cat > deployment-ready.json << EOF
          {
            "commit": "${{ github.sha }}",
            "build_number": "${{ github.run_number }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "branch": "${{ github.ref_name }}",
            "security_scan": "${{ needs.security-scan.result }}",
            "frontend_ci": "${{ needs.frontend-ci.result }}",
            "backend_ci": "${{ needs.backend-ci.result }}",
            "integration_tests": "${{ needs.integration-tests.result }}",
            "performance_tests": "${{ needs.performance-tests.result }}",
            "container_builds": "${{ needs.container-builds.result }}",
            "ready_for_deployment": true
          }
          EOF

      - name: Upload deployment artifact
        if: github.ref == 'refs/heads/main' && success()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-ready
          path: deployment-ready.json
          retention-days: 90
