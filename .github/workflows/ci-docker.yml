name: Docker CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: dotmac/framework

jobs:
  docker-lint:
    name: Dockerfile Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint on Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif
        if: always()

      - name: Run Hadolint on test Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.test
          failure-threshold: warning
        continue-on-error: true

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [docker-lint]
    
    strategy:
      matrix:
        dockerfile: [Dockerfile, Dockerfile.test]
        include:
          - dockerfile: Dockerfile
            image-suffix: ""
            target: ""
          - dockerfile: Dockerfile.test
            image-suffix: "-test"
            target: "test"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}${{ matrix.image-suffix }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          target: ${{ matrix.target }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Test Docker image
        run: |
          echo "::group::Docker Image Test"
          
          # Test the built image
          if [ "${{ matrix.dockerfile }}" = "Dockerfile.test" ]; then
            # Test the test image
            docker run --rm ${{ steps.meta.outputs.tags }} python --version
            docker run --rm ${{ steps.meta.outputs.tags }} pytest --version
          else
            # Test the main image
            docker run --rm ${{ steps.meta.outputs.tags }} python --version || true
          fi
          
          echo "::endgroup::"

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          load: true
          tags: dotmac-framework:scan
          cache-from: type=gha

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dotmac-framework:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        if: always()

      - name: Run Trivy with table output
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dotmac-framework:scan'
          format: 'table'
          severity: 'CRITICAL,HIGH'

  docker-integration:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start Docker test environment
        run: |
          echo "::group::Starting Docker Test Environment"
          docker-compose -f docker-compose.test.yml up -d --build
          echo "::endgroup::"

      - name: Wait for services
        run: |
          echo "::group::Waiting for Services"
          timeout 300 bash -c 'until docker-compose -f docker-compose.test.yml exec -T postgres-test pg_isready -U dotmac_test; do sleep 5; done'
          timeout 300 bash -c 'until docker-compose -f docker-compose.test.yml exec -T redis-test redis-cli ping; do sleep 5; done'
          echo "Services ready!"
          echo "::endgroup::"

      - name: Run Docker integration tests
        run: |
          echo "::group::Docker Integration Tests"
          docker-compose -f docker-compose.test.yml exec -T test-runner \
            python -m pytest \
            -m "docker and integration" \
            --tb=short \
            --junit-xml=/app/test-reports/junit-docker-integration.xml \
            -v
          echo "::endgroup::"

      - name: Check service health
        run: |
          echo "::group::Service Health Check"
          
          # Check all services are healthy
          services=$(docker-compose -f docker-compose.test.yml ps --services)
          for service in $services; do
            status=$(docker-compose -f docker-compose.test.yml ps -q $service | xargs docker inspect --format='{{.State.Health.Status}}' 2>/dev/null || echo "no-health")
            echo "$service: $status"
            
            if [ "$status" = "unhealthy" ]; then
              echo "❌ Service $service is unhealthy"
              docker-compose -f docker-compose.test.yml logs $service
              exit 1
            fi
          done
          
          echo "✅ All services are healthy"
          echo "::endgroup::"

      - name: Copy test results
        run: |
          docker-compose -f docker-compose.test.yml cp test-runner:/app/test-reports ./docker-test-reports
        if: always()

      - name: Stop test environment
        run: |
          docker-compose -f docker-compose.test.yml down -v
        if: always()

      - name: Upload Docker test results
        uses: actions/upload-artifact@v4
        with:
          name: docker-integration-test-results
          path: docker-test-reports/
        if: always()

  docker-smoke:
    name: Docker Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [docker-build]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start minimal environment
        run: |
          echo "::group::Starting Minimal Environment"
          docker-compose -f docker-compose.test.yml up -d postgres-test redis-test
          echo "::endgroup::"

      - name: Wait for core services
        run: |
          timeout 180 bash -c 'until docker-compose -f docker-compose.test.yml exec -T postgres-test pg_isready -U dotmac_test; do sleep 3; done'
          timeout 180 bash -c 'until docker-compose -f docker-compose.test.yml exec -T redis-test redis-cli ping; do sleep 3; done'

      - name: Run smoke tests
        run: |
          echo "::group::Smoke Tests"
          docker-compose -f docker-compose.test.yml run --rm test-runner \
            python -m pytest \
            -m "smoke" \
            --tb=short \
            --junit-xml=/app/test-reports/junit-smoke.xml \
            -v
          echo "::endgroup::"

      - name: Copy smoke test results
        run: |
          docker-compose -f docker-compose.test.yml cp test-runner:/app/test-reports ./smoke-test-reports
        if: always()

      - name: Stop environment
        run: |
          docker-compose -f docker-compose.test.yml down -v
        if: always()

      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        with:
          name: docker-smoke-test-results
          path: smoke-test-reports/
        if: always()

  docker-summary:
    name: Docker Pipeline Summary
    runs-on: ubuntu-latest
    needs: [docker-lint, docker-build, docker-security, docker-integration, docker-smoke]
    if: always()
    
    steps:
      - name: Docker Pipeline Summary
        run: |
          echo "## Docker Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dockerfile Linting | ${{ needs.docker-lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scanning | ${{ needs.docker-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.docker-integration.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Tests | ${{ needs.docker-smoke.result == 'success' && '✅ Passed' || needs.docker-smoke.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Check for critical failures
          if [ "${{ needs.docker-lint.result }}" != "success" ] || [ "${{ needs.docker-build.result }}" != "success" ]; then
            echo ""
            echo "❌ Docker pipeline failed!"
            exit 1
          fi
          
          echo ""
          echo "✅ Docker pipeline completed successfully!"