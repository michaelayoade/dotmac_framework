name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to rollback"
        required: true
        type: choice
        options:
          - staging
          - production
      rollback_version:
        description: "Version/tag to rollback to (e.g., v1.2.3 or commit hash)"
        required: true
        type: string
      reason:
        description: "Reason for rollback"
        required: true
        type: string
      services:
        description: 'Services to rollback (comma-separated or "all")'
        required: false
        default: "all"
        type: string
      skip_validation:
        description: "Skip pre-rollback validation (EMERGENCY ONLY)"
        required: false
        default: false
        type: boolean

env:
  KUBECTL_VERSION: "v1.28.0"
  REGISTRY: ghcr.io
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  ROLLBACK_VERSION: ${{ github.event.inputs.rollback_version }}
  ROLLBACK_REASON: ${{ github.event.inputs.reason }}

jobs:
  # ===== PRE-ROLLBACK VALIDATION =====
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_validation == 'false'

    outputs:
      rollback-approved: ${{ steps.validate.outputs.rollback-approved }}
      target-version: ${{ steps.validate.outputs.target-version }}
      services-list: ${{ steps.validate.outputs.services-list }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate rollback request
        id: validate
        run: |
          echo "=== ROLLBACK VALIDATION ==="
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Target Version: ${{ env.ROLLBACK_VERSION }}"
          echo "Reason: ${{ env.ROLLBACK_REASON }}"
          echo "Services: ${{ github.event.inputs.services }}"

          # Validate version exists
          if git tag -l | grep -q "^${{ env.ROLLBACK_VERSION }}$"; then
            echo "✅ Version tag ${{ env.ROLLBACK_VERSION }} found"
            VERSION_TYPE="tag"
          elif git rev-parse --verify "${{ env.ROLLBACK_VERSION }}" >/dev/null 2>&1; then
            echo "✅ Commit ${{ env.ROLLBACK_VERSION }} found"
            VERSION_TYPE="commit"
          else
            echo "❌ Version ${{ env.ROLLBACK_VERSION }} not found in repository"
            exit 1
          fi

          # Validate environment
          if [[ "${{ env.ENVIRONMENT }}" != "staging" && "${{ env.ENVIRONMENT }}" != "production" ]]; then
            echo "❌ Invalid environment: ${{ env.ENVIRONMENT }}"
            exit 1
          fi

          # Check if this is a forward rollback (newer version)
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "unknown")
          echo "Current version: $CURRENT_TAG"
          echo "Target version: ${{ env.ROLLBACK_VERSION }}"

          # Parse services list
          if [[ "${{ github.event.inputs.services }}" == "all" ]]; then
            SERVICES="isp-framework,management-platform,frontend-admin,frontend-customer,frontend-reseller,frontend-technician,frontend-tenant-portal,frontend-management-admin,frontend-management-reseller"
          else
            SERVICES="${{ github.event.inputs.services }}"
          fi

          # Set outputs
          echo "rollback-approved=true" >> $GITHUB_OUTPUT
          echo "target-version=${{ env.ROLLBACK_VERSION }}" >> $GITHUB_OUTPUT
          echo "services-list=$SERVICES" >> $GITHUB_OUTPUT

          echo "✅ Rollback validation passed"

      - name: Check deployment history
        run: |
          echo "=== DEPLOYMENT HISTORY CHECK ==="

          # Get recent releases
          if command -v gh &> /dev/null; then
            echo "Recent releases:"
            gh release list --limit 10 --repo ${{ github.repository }} || echo "No releases found via GitHub CLI"
          fi

          # Show recent commits
          echo "Recent commits:"
          git log --oneline --max-count=10

          echo "Target commit details:"
          git show --no-patch --format="Hash: %H%nAuthor: %an%nDate: %ai%nSubject: %s" "${{ env.ROLLBACK_VERSION }}"

  # ===== EMERGENCY BYPASS =====
  emergency-bypass:
    name: Emergency Bypass Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_validation == 'true'

    outputs:
      rollback-approved: ${{ steps.emergency.outputs.rollback-approved }}
      target-version: ${{ steps.emergency.outputs.target-version }}
      services-list: ${{ steps.emergency.outputs.services-list }}

    steps:
      - name: Emergency rollback approval
        id: emergency
        run: |
          echo "⚠️  EMERGENCY ROLLBACK MODE - SKIPPING VALIDATION"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Target Version: ${{ env.ROLLBACK_VERSION }}"
          echo "Reason: ${{ env.ROLLBACK_REASON }}"

          # Parse services for emergency mode
          if [[ "${{ github.event.inputs.services }}" == "all" ]]; then
            SERVICES="isp-framework,management-platform,frontend-admin,frontend-customer,frontend-reseller,frontend-technician,frontend-tenant-portal,frontend-management-admin,frontend-management-reseller"
          else
            SERVICES="${{ github.event.inputs.services }}"
          fi

          echo "rollback-approved=true" >> $GITHUB_OUTPUT
          echo "target-version=${{ env.ROLLBACK_VERSION }}" >> $GITHUB_OUTPUT
          echo "services-list=$SERVICES" >> $GITHUB_OUTPUT

  # ===== BACKUP CURRENT STATE =====
  backup-current-state:
    name: Backup Current State
    runs-on: ubuntu-latest
    needs: [validate-rollback, emergency-bypass]
    if: |
      always() &&
      (needs.validate-rollback.outputs.rollback-approved == 'true' ||
       needs.emergency-bypass.outputs.rollback-approved == 'true')

    outputs:
      backup-id: ${{ steps.backup.outputs.backup-id }}

    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          if [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_PRODUCTION }}
          else
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_STAGING }}
          fi

      - name: Backup current deployment state
        id: backup
        run: |
          BACKUP_ID="rollback-backup-$(date +%Y%m%d-%H%M%S)"
          echo "Creating backup: $BACKUP_ID"

          mkdir -p backup

          # Backup deployment configurations
          kubectl get deployments -n ${{ env.ENVIRONMENT }} -o yaml > backup/deployments.yaml
          kubectl get services -n ${{ env.ENVIRONMENT }} -o yaml > backup/services.yaml
          kubectl get configmaps -n ${{ env.ENVIRONMENT }} -o yaml > backup/configmaps.yaml
          kubectl get ingresses -n ${{ env.ENVIRONMENT }} -o yaml > backup/ingresses.yaml

          # Backup current image versions
          kubectl get deployments -n ${{ env.ENVIRONMENT }} -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.template.spec.containers[0].image}{"\n"}{end}' > backup/current-images.txt

          # Create backup metadata
          cat > backup/metadata.json << EOF
          {
            "backup_id": "$BACKUP_ID",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ env.ENVIRONMENT }}",
            "rollback_target": "${{ env.ROLLBACK_VERSION }}",
            "reason": "${{ env.ROLLBACK_REASON }}",
            "created_by": "${{ github.actor }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF

          echo "backup-id=$BACKUP_ID" >> $GITHUB_OUTPUT
          echo "✅ Current state backed up as: $BACKUP_ID"

      - name: Upload backup artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.backup.outputs.backup-id }}
          path: backup/
          retention-days: 90

  # ===== DATABASE BACKUP =====
  backup-database:
    name: Backup Database
    runs-on: ubuntu-latest
    needs: backup-current-state
    if: env.ENVIRONMENT == 'production'

    steps:
      - name: Create database backup
        run: |
          echo "⚠️  Production database backup should be handled by your DBA"
          echo "This step would typically trigger your database backup procedure"
          echo "For safety, manual database backup verification is recommended"

          # Create backup request file
          cat > db-backup-request.json << EOF
          {
            "request_id": "$(uuidgen)",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ env.ENVIRONMENT }}",
            "type": "pre-rollback-backup",
            "rollback_target": "${{ env.ROLLBACK_VERSION }}",
            "requested_by": "${{ github.actor }}",
            "workflow_run": "${{ github.run_id }}"
          }
          EOF

          echo "📋 Database backup request created"
          echo "Manual verification recommended before proceeding"

      - name: Upload backup request
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-request
          path: db-backup-request.json
          retention-days: 90

  # ===== EXECUTE ROLLBACK =====
  execute-rollback:
    name: Execute Rollback
    runs-on: ubuntu-latest
    needs:
      [
        validate-rollback,
        emergency-bypass,
        backup-current-state,
        backup-database,
      ]
    if: |
      always() &&
      (needs.validate-rollback.outputs.rollback-approved == 'true' ||
       needs.emergency-bypass.outputs.rollback-approved == 'true') &&
      needs.backup-current-state.result == 'success' &&
      (needs.backup-database.result == 'success' || needs.backup-database.result == 'skipped')

    environment: ${{ github.event.inputs.environment }}

    strategy:
      fail-fast: false
      matrix:
        service:
          - isp-framework
          - management-platform
          - frontend-admin
          - frontend-customer
          - frontend-reseller
          - frontend-technician
          - frontend-tenant-portal
          - frontend-management-admin
          - frontend-management-reseller

    steps:
      - name: Checkout target version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-rollback.outputs.target-version || needs.emergency-bypass.outputs.target-version }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          if [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_PRODUCTION }}
          else
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_STAGING }}
          fi

      - name: Check if service should be rolled back
        id: should_rollback
        run: |
          SERVICES_LIST="${{ needs.validate-rollback.outputs.services-list || needs.emergency-bypass.outputs.services-list }}"

          if [[ "$SERVICES_LIST" == *"${{ matrix.service }}"* ]]; then
            echo "should_rollback=true" >> $GITHUB_OUTPUT
            echo "✅ Rolling back ${{ matrix.service }}"
          else
            echo "should_rollback=false" >> $GITHUB_OUTPUT
            echo "⏭️ Skipping ${{ matrix.service }}"
          fi

      - name: Rollback service
        if: steps.should_rollback.outputs.should_rollback == 'true'
        run: |
          SERVICE_NAME="${{ matrix.service }}"
          TARGET_VERSION="${{ needs.validate-rollback.outputs.target-version || needs.emergency-bypass.outputs.target-version }}"

          echo "Rolling back $SERVICE_NAME to $TARGET_VERSION"

          # Determine image name
          if [[ "$SERVICE_NAME" == "isp-framework" ]]; then
            IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/isp-framework"
          elif [[ "$SERVICE_NAME" == "management-platform" ]]; then
            IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/management-platform"
          else
            # Frontend service
            IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository_owner }}/$SERVICE_NAME"
          fi

          # Construct image tag
          IMAGE_TAG="$IMAGE_NAME:$TARGET_VERSION"

          echo "Target image: $IMAGE_TAG"

          # Check if deployment exists
          if kubectl get deployment "$SERVICE_NAME" -n ${{ env.ENVIRONMENT }} >/dev/null 2>&1; then
            echo "Found deployment: $SERVICE_NAME"

            # Update deployment image
            kubectl set image deployment/$SERVICE_NAME \
              $SERVICE_NAME=$IMAGE_TAG \
              -n ${{ env.ENVIRONMENT }}

            # Wait for rollout with timeout
            echo "Waiting for rollout to complete..."
            kubectl rollout status deployment/$SERVICE_NAME \
              -n ${{ env.ENVIRONMENT }} \
              --timeout=300s

            # Verify rollback
            CURRENT_IMAGE=$(kubectl get deployment $SERVICE_NAME -n ${{ env.ENVIRONMENT }} -o jsonpath='{.spec.template.spec.containers[0].image}')
            echo "Current image after rollback: $CURRENT_IMAGE"

            if [[ "$CURRENT_IMAGE" == "$IMAGE_TAG" ]]; then
              echo "✅ Successfully rolled back $SERVICE_NAME to $TARGET_VERSION"
            else
              echo "❌ Rollback verification failed for $SERVICE_NAME"
              echo "Expected: $IMAGE_TAG"
              echo "Got: $CURRENT_IMAGE"
              exit 1
            fi
          else
            echo "⚠️ Deployment $SERVICE_NAME not found in namespace ${{ env.ENVIRONMENT }}"
          fi

      - name: Verify service health
        if: steps.should_rollback.outputs.should_rollback == 'true'
        run: |
          SERVICE_NAME="${{ matrix.service }}"
          echo "Verifying health of $SERVICE_NAME"

          # Wait for pods to be ready
          sleep 30

          # Check pod status
          kubectl get pods -n ${{ env.ENVIRONMENT }} -l app=$SERVICE_NAME

          # Check if pods are ready
          READY_PODS=$(kubectl get pods -n ${{ env.ENVIRONMENT }} -l app=$SERVICE_NAME -o jsonpath='{.items[?(@.status.conditions[?(@.type=="Ready" && @.status=="True")])].metadata.name}' | wc -w)
          TOTAL_PODS=$(kubectl get pods -n ${{ env.ENVIRONMENT }} -l app=$SERVICE_NAME --no-headers | wc -l)

          echo "Ready pods: $READY_PODS/$TOTAL_PODS"

          if [[ $READY_PODS -gt 0 ]]; then
            echo "✅ Service $SERVICE_NAME is healthy after rollback"
          else
            echo "⚠️ Service $SERVICE_NAME may have health issues"
            kubectl describe pods -n ${{ env.ENVIRONMENT }} -l app=$SERVICE_NAME
          fi

  # ===== POST-ROLLBACK VERIFICATION =====
  post-rollback-verification:
    name: Post-Rollback Verification
    runs-on: ubuntu-latest
    needs: execute-rollback
    if: always() && needs.execute-rollback.result == 'success'

    steps:
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          if [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_PRODUCTION }}
          else
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME_STAGING }}
          fi

      - name: Verify all services
        run: |
          echo "=== POST-ROLLBACK VERIFICATION ==="
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Target Version: ${{ env.ROLLBACK_VERSION }}"
          echo ""

          # Check all pods
          echo "Pod Status:"
          kubectl get pods -n ${{ env.ENVIRONMENT }}
          echo ""

          # Check services
          echo "Service Status:"
          kubectl get services -n ${{ env.ENVIRONMENT }}
          echo ""

          # Count ready vs total pods
          TOTAL_PODS=$(kubectl get pods -n ${{ env.ENVIRONMENT }} --no-headers | wc -l)
          READY_PODS=$(kubectl get pods -n ${{ env.ENVIRONMENT }} -o jsonpath='{.items[?(@.status.conditions[?(@.type=="Ready" && @.status=="True")])].metadata.name}' | wc -w)
          FAILED_PODS=$(kubectl get pods -n ${{ env.ENVIRONMENT }} --field-selector=status.phase=Failed --no-headers | wc -l)

          echo "Summary:"
          echo "- Total pods: $TOTAL_PODS"
          echo "- Ready pods: $READY_PODS"
          echo "- Failed pods: $FAILED_PODS"

          if [[ $FAILED_PODS -gt 0 ]]; then
            echo "❌ Some pods failed after rollback"
            kubectl get pods -n ${{ env.ENVIRONMENT }} --field-selector=status.phase=Failed
            exit 1
          elif [[ $READY_PODS -eq $TOTAL_PODS ]]; then
            echo "✅ All pods are ready after rollback"
          else
            echo "⚠️ Some pods may still be starting up"
          fi

      - name: Run basic health checks
        run: |
          echo "Running basic health checks..."

          # Get service URLs
          if [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
            API_URL="https://api.dotmac.com"
            APP_URL="https://app.dotmac.com"
          else
            API_URL="https://staging-api.dotmac.com"
            APP_URL="https://staging.dotmac.com"
          fi

          # Test API health endpoint
          echo "Testing API health..."
          if curl -f -s "$API_URL/health" > /dev/null; then
            echo "✅ API health check passed"
          else
            echo "⚠️ API health check failed"
          fi

          # Test management health
          echo "Testing management platform..."
          if curl -f -s "$API_URL/api/v1/status" > /dev/null; then
            echo "✅ Management platform check passed"
          else
            echo "⚠️ Management platform check failed"
          fi

          echo "Basic health checks completed"

  # ===== ROLLBACK SUMMARY =====
  rollback-summary:
    name: Rollback Summary
    runs-on: ubuntu-latest
    needs: [backup-current-state, execute-rollback, post-rollback-verification]
    if: always()

    steps:
      - name: Generate rollback summary
        run: |
          echo "=== ROLLBACK OPERATION SUMMARY ===" | tee rollback-summary.md
          echo "**Timestamp:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" | tee -a rollback-summary.md
          echo "**Environment:** ${{ env.ENVIRONMENT }}" | tee -a rollback-summary.md
          echo "**Target Version:** ${{ env.ROLLBACK_VERSION }}" | tee -a rollback-summary.md
          echo "**Reason:** ${{ env.ROLLBACK_REASON }}" | tee -a rollback-summary.md
          echo "**Executed by:** ${{ github.actor }}" | tee -a rollback-summary.md
          echo "**Backup ID:** ${{ needs.backup-current-state.outputs.backup-id }}" | tee -a rollback-summary.md
          echo "" | tee -a rollback-summary.md

          echo "## Results" | tee -a rollback-summary.md
          echo "- **Backup:** ${{ needs.backup-current-state.result }}" | tee -a rollback-summary.md
          echo "- **Rollback Execution:** ${{ needs.execute-rollback.result }}" | tee -a rollback-summary.md
          echo "- **Verification:** ${{ needs.post-rollback-verification.result }}" | tee -a rollback-summary.md
          echo "" | tee -a rollback-summary.md

          if [[ "${{ needs.execute-rollback.result }}" == "success" &&
                "${{ needs.post-rollback-verification.result }}" == "success" ]]; then
            echo "✅ **ROLLBACK SUCCESSFUL**" | tee -a rollback-summary.md
            echo "ROLLBACK_STATUS=SUCCESS" >> $GITHUB_ENV
          else
            echo "❌ **ROLLBACK FAILED OR INCOMPLETE**" | tee -a rollback-summary.md
            echo "ROLLBACK_STATUS=FAILED" >> $GITHUB_ENV
            echo "" | tee -a rollback-summary.md
            echo "**Recovery Steps:**" | tee -a rollback-summary.md
            echo "1. Check pod logs: \`kubectl logs -n ${{ env.ENVIRONMENT }} -l app=<service>\`" | tee -a rollback-summary.md
            echo "2. Review backup: ${{ needs.backup-current-state.outputs.backup-id }}" | tee -a rollback-summary.md
            echo "3. Consider manual intervention or restore from backup" | tee -a rollback-summary.md
          fi

      - name: Upload rollback summary
        uses: actions/upload-artifact@v4
        with:
          name: rollback-summary
          path: rollback-summary.md
          retention-days: 90

      - name: Create incident report
        if: env.ROLLBACK_STATUS == 'FAILED'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('rollback-summary.md', 'utf8');

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Rollback Failed - ${process.env.ENVIRONMENT} - ${new Date().toISOString().split('T')[0]}`,
              body: `## Rollback Incident Report\n\n${summary}\n\n**Immediate Action Required:** Manual intervention needed to restore service stability.\n\n**Backup Available:** ${context.payload.inputs.backup_id}\n**Workflow:** [${context.runId}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              labels: ['incident', 'rollback-failed', 'critical', 'automated']
            });

      - name: Notify team of rollback results
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            🔄 **Emergency Rollback Report**

            **Environment:** ${{ env.ENVIRONMENT }}
            **Status:** ${{ env.ROLLBACK_STATUS == 'SUCCESS' && '✅ SUCCESSFUL' || '❌ FAILED' }}
            **Target Version:** ${{ env.ROLLBACK_VERSION }}
            **Reason:** ${{ env.ROLLBACK_REASON }}
            **Executed by:** ${{ github.actor }}

            **Results:**
            - Backup: ${{ needs.backup-current-state.result }}
            - Rollback: ${{ needs.execute-rollback.result }}
            - Verification: ${{ needs.post-rollback-verification.result }}

            ${{ env.ROLLBACK_STATUS == 'FAILED' && '⚠️ **MANUAL INTERVENTION REQUIRED**' || '' }}

            [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
