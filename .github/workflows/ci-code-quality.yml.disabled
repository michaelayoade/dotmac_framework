name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  lint:
    name: Linting & Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.lock

      - name: Run Ruff linting
        run: |
          echo "::group::Ruff Check"
          ruff check . --output-format=github
          echo "::endgroup::"
          
          echo "::group::Ruff Format Check"
          ruff format --check .
          echo "::endgroup::"

      - name: Run Black formatting check
        run: |
          echo "::group::Black Format Check"
          black --check --diff .
          echo "::endgroup::"

      - name: Run isort import sorting check
        run: |
          echo "::group::isort Check"
          isort --check-only --diff .
          echo "::endgroup::"

      - name: Check complexity violations
        run: |
          echo "::group::Complexity Check"
          echo "Checking for complexity violations..."
          violations=$(ruff check . --select C901,PLR0913,PLR0915 --output-format=text 2>/dev/null || echo "violations found")
          if [ "$violations" != "" ] && [ "$violations" != "All checks passed!" ]; then
            echo "❌ Complexity violations found:"
            ruff check . --select C901,PLR0913,PLR0915 --output-format=text
            echo ""
            echo "Please refactor complex functions before proceeding."
            exit 1
          else
            echo "✅ No complexity violations found."
          fi
          echo "::endgroup::"

      - name: Generate complexity report
        run: |
          echo "::group::Complexity Report"
          make complexity-report || true
          echo "::endgroup::"
        continue-on-error: true

      - name: Upload complexity report
        uses: actions/upload-artifact@v4
        with:
          name: complexity-report
          path: complexity-report.md
        if: always()

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.lock

      - name: Run MyPy type checking
        run: |
          echo "::group::MyPy Type Check"
          mypy . --show-error-codes --no-error-summary --pretty || true
          echo "::endgroup::"
        continue-on-error: true  # Allow gradual adoption

  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.lock

      - name: Run Bandit security check
        run: |
          echo "::group::Bandit Security Scan"
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt || true
          echo "::endgroup::"

      - name: Run Safety dependency check
        run: |
          echo "::group::Safety Dependency Check"
          safety check --json --output safety-report.json || true
          safety check || true
          echo "::endgroup::"

      - name: Run pip-audit vulnerability check
        run: |
          echo "::group::pip-audit Vulnerability Check"
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit || true
          echo "::endgroup::"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
        if: always()

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit hooks
        run: |
          echo "::group::Pre-commit Hooks"
          pre-commit run --all-files --show-diff-on-failure
          echo "::endgroup::"

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, type-check, security, pre-commit]
    if: always()
    
    steps:
      - name: Check quality gate
        run: |
          echo "Quality Gate Results:"
          echo "- Lint: ${{ needs.lint.result }}"
          echo "- Type Check: ${{ needs.type-check.result }}"
          echo "- Security: ${{ needs.security.result }}"
          echo "- Pre-commit: ${{ needs.pre-commit.result }}"
          
          # Fail if critical checks failed
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Linting failed - this is a blocking issue"
            exit 1
          fi
          
          if [ "${{ needs.pre-commit.result }}" != "success" ]; then
            echo "❌ Pre-commit hooks failed - this is a blocking issue"
            exit 1
          fi
          
          echo "✅ Quality gate passed!"