name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  dependency-check:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Install project dependencies
        run: |
          pip install -r requirements.lock

      - name: Run Safety check
        run: |
          echo "::group::Safety Vulnerability Check"
          safety check --json --output safety-report.json || true
          safety check --full-report || echo "Safety check completed with issues"
          echo "::endgroup::"

      - name: Run pip-audit
        run: |
          echo "::group::pip-audit Vulnerability Check"
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --format=cyclonedx --output=pip-audit-sbom.json || true
          pip-audit || echo "pip-audit completed with issues"
          echo "::endgroup::"

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-reports
          path: |
            safety-report.json
            pip-audit-report.json
            pip-audit-sbom.json
        if: always()

  code-security:
    name: Code Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] semgrep

      - name: Run Bandit security scan
        run: |
          echo "::group::Bandit Security Scan"
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium || echo "Bandit scan completed with findings"
          echo "::endgroup::"

      - name: Run Semgrep security scan
        run: |
          echo "::group::Semgrep Security Scan"
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto . || echo "Semgrep scan completed with findings"
          echo "::endgroup::"

      - name: Upload code security reports
        uses: actions/upload-artifact@v4
        with:
          name: code-security-reports
          path: |
            bandit-report.json
            semgrep-report.json
        if: always()

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        run: |
          docker build -f Dockerfile.test -t dotmac-framework:test .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dotmac-framework:test'
          format: 'sarif'
          output: 'trivy-container-report.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-container-report.sarif'
        if: always()

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-report.sarif'

      - name: Upload Trivy filesystem results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-fs-report.sarif'
        if: always()

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret detection

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  security-tests:
    name: Security Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: dotmac_test
          POSTGRES_PASSWORD: test_password_123
          POSTGRES_DB: dotmac_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.lock

      - name: Run security tests
        env:
          DATABASE_URL: postgresql://dotmac_test:test_password_123@localhost/dotmac_test
          TESTING: true
        run: |
          echo "::group::Security Tests"
          python -m pytest \
            -m "security" \
            --tb=short \
            --junit-xml=junit-security.xml \
            -v
          echo "::endgroup::"

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: junit-security.xml
        if: always()

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  security-gate:
    name: Security Quality Gate
    runs-on: ubuntu-latest
    needs: [dependency-check, code-security, container-security, secret-scan, security-tests]
    if: always()
    
    steps:
      - name: Download all security reports
        uses: actions/download-artifact@v4

      - name: Security Gate Analysis
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | ${{ needs.dependency-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Security | ${{ needs.code-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Detection | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Check for critical security failures
          critical_failures=0
          
          if [ "${{ needs.secret-scan.result }}" != "success" ]; then
            echo ""
            echo "❌ **CRITICAL**: Secret detection failed!"
            critical_failures=$((critical_failures + 1))
          fi
          
          if [ "${{ needs.security-tests.result }}" != "success" ]; then
            echo ""
            echo "❌ **CRITICAL**: Security tests failed!"
            critical_failures=$((critical_failures + 1))
          fi
          
          if [ $critical_failures -gt 0 ]; then
            echo ""
            echo "❌ Security quality gate FAILED with $critical_failures critical issue(s)!"
            exit 1
          fi
          
          # Check for non-critical warnings
          warnings=0
          
          if [ "${{ needs.dependency-check.result }}" != "success" ]; then
            echo ""
            echo "⚠️ Warning: Dependency vulnerabilities detected"
            warnings=$((warnings + 1))
          fi
          
          if [ "${{ needs.code-security.result }}" != "success" ]; then
            echo ""
            echo "⚠️ Warning: Code security issues detected"
            warnings=$((warnings + 1))
          fi
          
          if [ $warnings -gt 0 ]; then
            echo ""
            echo "⚠️ Security quality gate passed with $warnings warning(s)"
          else
            echo ""
            echo "✅ Security quality gate passed!"
          fi