name: Frontend CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths: ['frontend/**']
  pull_request:
    branches: [main, develop]
    paths: ['frontend/**']

env:
  NODE_VERSION: "18"
  PNPM_VERSION: "8.15.4"

jobs:
  # =============================================================================
  # FRONTEND LINTING AND TYPE CHECKING
  # =============================================================================
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: |
          echo "üîç Running ESLint..."
          pnpm lint --format=github

      - name: Run TypeScript type checking
        run: |
          echo "üîç Running TypeScript type checking..."
          pnpm type-check

      - name: Run Prettier check
        run: |
          echo "üé® Checking code formatting..."
          pnpm format --check

  # =============================================================================
  # UNIT AND INTEGRATION TESTS
  # =============================================================================
  test-unit-integration:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    strategy:
      matrix:
        test-type: ['unit', 'integration', 'a11y']
      fail-fast: false
    
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ${{ matrix.test-type }} tests
        run: |
          echo "üß™ Running ${{ matrix.test-type }} tests..."
          pnpm test:ci --selectProjects="${{ matrix.test-type == 'unit' && 'Unit Tests' || matrix.test-type == 'integration' && 'Integration Tests' || 'Accessibility Tests' }}"
        env:
          NODE_ENV: test
          CI: true
          REDIS_URL: redis://localhost:6379

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            frontend/coverage/
            frontend/test-results/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.test-type == 'unit'
        with:
          file: frontend/coverage/lcov.info
          flags: frontend-${{ matrix.test-type }}
          name: frontend-${{ matrix.test-type }}-coverage

  # =============================================================================
  # E2E TESTS
  # =============================================================================
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    strategy:
      matrix:
        browser: ['chromium', 'firefox', 'webkit']
        portal: ['customer', 'admin', 'reseller']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Start application
        run: |
          pnpm start &
          sleep 30
        env:
          NODE_ENV: production

      - name: Wait for application
        run: |
          echo "‚è≥ Waiting for application to be ready..."
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: |
          echo "üé≠ Running E2E tests for ${{ matrix.portal }} portal on ${{ matrix.browser }}..."
          pnpm test:e2e --project=${{ matrix.browser }} --grep="${{ matrix.portal }}"
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}-${{ matrix.portal }}
          path: |
            frontend/test-results/
            frontend/playwright-report/

      - name: Upload E2E test videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-videos-${{ matrix.browser }}-${{ matrix.portal }}
          path: frontend/test-results/**/video.webm

  # =============================================================================
  # VISUAL REGRESSION TESTS
  # =============================================================================
  test-visual:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    strategy:
      matrix:
        theme: ['light', 'dark']
        viewport: ['desktop', 'tablet', 'mobile']
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps chromium

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Start application
        run: |
          pnpm start &
          sleep 30
        env:
          NODE_ENV: production

      - name: Run visual tests
        run: |
          echo "üì∑ Running visual tests for ${{ matrix.theme }} theme on ${{ matrix.viewport }}..."
          pnpm test:visual --project="${{ matrix.viewport }}" --grep="@visual"
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          THEME: ${{ matrix.theme }}

      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-results-${{ matrix.theme }}-${{ matrix.viewport }}
          path: |
            frontend/visual-test-results/
            frontend/test-results/

      - name: Upload visual diffs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: visual-diffs-${{ matrix.theme }}-${{ matrix.viewport }}
          path: frontend/test-results/**/*-diff.png

  # =============================================================================
  # PERFORMANCE TESTS
  # =============================================================================
  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Analyze bundle size
        run: |
          echo "üì¶ Analyzing bundle sizes..."
          pnpm bundle:analyze

      - name: Run performance tests
        run: |
          echo "‚ö° Running performance tests..."
          pnpm test:perf

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            frontend/reports/bundle-analysis/
            frontend/test-results/performance/

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    permissions:
      security-events: write
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          echo "üîí Running npm security audit..."
          pnpm audit --audit-level moderate

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./frontend
          base: main
          head: HEAD

      - name: Run ESLint security rules
        run: |
          echo "üîç Running ESLint security rules..."
          pnpm lint --config .eslintrc-security.js

  # =============================================================================
  # BUILD AND DEPLOYMENT PREPARATION
  # =============================================================================
  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test-unit-integration]
    defaults:
      run:
        working-directory: ./frontend
    
    strategy:
      matrix:
        environment: ['development', 'staging', 'production']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install pnpm
        run: npm install -g pnpm@${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for ${{ matrix.environment }}
        run: |
          echo "üèóÔ∏è Building for ${{ matrix.environment }}..."
          pnpm build
        env:
          NODE_ENV: ${{ matrix.environment }}
          NEXT_PUBLIC_ENV: ${{ matrix.environment }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.environment }}
          path: |
            frontend/.next/
            frontend/dist/
            frontend/out/

  # =============================================================================
  # TEST RESULTS SUMMARY
  # =============================================================================
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test-unit-integration, test-e2e, test-visual, test-performance]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts

      - name: Generate test summary
        run: |
          echo "## üß™ Frontend Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          
          # Check if unit tests passed
          if [ -d "test-artifacts/test-results-unit" ]; then
            echo "| Unit Tests | ‚úÖ Passed | [View Coverage](test-artifacts/test-results-unit/coverage/) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit Tests | ‚ùå Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check if integration tests passed
          if [ -d "test-artifacts/test-results-integration" ]; then
            echo "| Integration Tests | ‚úÖ Passed | [View Results](test-artifacts/test-results-integration/) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Integration Tests | ‚ùå Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check if E2E tests passed
          if [ -d "test-artifacts/e2e-results-chromium-customer" ]; then
            echo "| E2E Tests | ‚úÖ Passed | [View Report](test-artifacts/e2e-results-chromium-customer/) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| E2E Tests | ‚ùå Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check if visual tests passed
          if [ -d "test-artifacts/visual-results-light-desktop" ]; then
            echo "| Visual Tests | ‚úÖ Passed | [View Snapshots](test-artifacts/visual-results-light-desktop/) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Visual Tests | ‚ùå Failed | N/A |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Bundle size analysis available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Core Web Vitals results included in E2E test reports" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Test Coverage Report](./test-artifacts/test-results-unit/coverage/)" >> $GITHUB_STEP_SUMMARY
          echo "- [E2E Test Report](./test-artifacts/e2e-results-chromium-customer/)" >> $GITHUB_STEP_SUMMARY
          echo "- [Visual Regression Report](./test-artifacts/visual-results-light-desktop/)" >> $GITHUB_STEP_SUMMARY
          echo "- [Bundle Analysis](./test-artifacts/performance-results/)" >> $GITHUB_STEP_SUMMARY

  # =============================================================================
  # NOTIFICATION
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Comment PR with results
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Frontend CI Results')
            );
            
            const commentBody = `## üöÄ Frontend CI Results
            
            ‚úÖ All frontend tests have completed. Check the [Actions tab](${context.payload.pull_request.html_url}/checks) for detailed results.
            
            ### Test Coverage
            - Unit Tests: Coverage report available in artifacts
            - Integration Tests: API integration verified
            - E2E Tests: User workflows tested across browsers
            - Visual Tests: UI consistency verified
            - Performance Tests: Bundle size and Core Web Vitals checked
            
            ### Next Steps
            ${context.payload.pull_request.mergeable ? '‚úÖ PR is ready for review' : '‚ùå Merge conflicts need to be resolved'}
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }