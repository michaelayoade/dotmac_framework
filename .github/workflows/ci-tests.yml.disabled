name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  POSTGRES_PASSWORD: test_password_123
  REDIS_PASSWORD: test_redis_password

jobs:
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.lock

      - name: Run unit tests
        run: |
          echo "::group::Unit Tests"
          python -m pytest \
            -m "unit and not slow" \
            --tb=short \
            --cov-report=xml:coverage-unit.xml \
            --cov-report=html:htmlcov-unit \
            --cov-report=term-missing:skip-covered \
            --junit-xml=junit-unit.xml \
            --maxfail=5 \
            -v
          echo "::endgroup::"

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v4
        with:
          file: coverage-unit.xml
          flags: unit-tests
          name: unit-tests

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            junit-unit.xml
            htmlcov-unit/
            coverage-unit.xml
        if: always()

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: dotmac_test
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: dotmac_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.lock

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5432 -U dotmac_test; do
            echo "Waiting for postgres..."
            sleep 2
          done
          
          echo "Waiting for Redis..."
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for redis..."
            sleep 2
          done

      - name: Set up test databases
        run: |
          PGPASSWORD=${{ env.POSTGRES_PASSWORD }} psql -h localhost -U dotmac_test -d dotmac_test -c "
            CREATE DATABASE dotmac_identity_test;
            CREATE DATABASE dotmac_billing_test;
            CREATE DATABASE dotmac_services_test;
            CREATE DATABASE dotmac_networking_test;
            CREATE DATABASE dotmac_analytics_test;
            CREATE DATABASE dotmac_platform_test;
          "

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://dotmac_test:${{ env.POSTGRES_PASSWORD }}@localhost/dotmac_test
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: development
        run: |
          echo "::group::Integration Tests"
          python -m pytest \
            -m "integration and not slow" \
            --tb=short \
            --cov-report=xml:coverage-integration.xml \
            --cov-report=html:htmlcov-integration \
            --junit-xml=junit-integration.xml \
            --maxfail=3 \
            -v
          echo "::endgroup::"

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v4
        with:
          file: coverage-integration.xml
          flags: integration-tests
          name: integration-tests

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            junit-integration.xml
            htmlcov-integration/
            coverage-integration.xml
        if: always()

  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.lock

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start test environment
        run: |
          echo "::group::Starting Test Environment"
          docker-compose -f docker-compose.test.yml --profile notifications --profile filestorage up -d --build
          echo "::endgroup::"

      - name: Wait for services to be ready
        run: |
          echo "::group::Waiting for Services"
          timeout 300 bash -c 'until docker-compose -f docker-compose.test.yml exec -T postgres-test pg_isready -U dotmac_test; do sleep 5; done'
          timeout 300 bash -c 'until docker-compose -f docker-compose.test.yml exec -T redis-test redis-cli ping; do sleep 5; done'
          echo "Services are ready!"
          echo "::endgroup::"

      - name: Run E2E tests
        run: |
          echo "::group::End-to-End Tests"
          docker-compose -f docker-compose.test.yml exec -T test-runner \
            python -m pytest \
            -m "e2e" \
            --tb=short \
            --junit-xml=/app/test-reports/junit-e2e.xml \
            --html=/app/test-reports/e2e-report.html \
            --self-contained-html \
            -v
          echo "::endgroup::"

      - name: Copy test results
        run: |
          docker-compose -f docker-compose.test.yml cp test-runner:/app/test-reports ./test-reports

      - name: Stop test environment
        run: |
          docker-compose -f docker-compose.test.yml --profile notifications --profile filestorage down -v
        if: always()

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: test-reports/
        if: always()

  test-contract:
    name: API Contract Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: dotmac_test
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: dotmac_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.lock

      - name: Run contract tests
        env:
          DATABASE_URL: postgresql://dotmac_test:${{ env.POSTGRES_PASSWORD }}@localhost/dotmac_test
          ENVIRONMENT: development
        run: |
          echo "::group::Contract Tests"
          python -m pytest \
            -m "contract" \
            --tb=short \
            --junit-xml=junit-contract.xml \
            -v
          echo "::endgroup::"

      - name: Upload contract test results
        uses: actions/upload-artifact@v4
        with:
          name: contract-test-results
          path: junit-contract.xml
        if: always()

  test-coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-test-results

      - name: Download integration test coverage
        uses: actions/download-artifact@v4
        with:
          name: integration-test-results

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install coverage[toml]

      - name: Combine coverage reports
        run: |
          echo "::group::Combining Coverage"
          coverage combine coverage-unit.xml coverage-integration.xml || true
          coverage report --show-missing
          coverage xml -o coverage-combined.xml
          coverage html -d htmlcov-combined
          echo "::endgroup::"

      - name: Upload combined coverage
        uses: codecov/codecov-action@v4
        with:
          file: coverage-combined.xml
          flags: combined
          name: combined-coverage

      - name: Upload combined coverage report
        uses: actions/upload-artifact@v4
        with:
          name: combined-coverage-report
          path: |
            coverage-combined.xml
            htmlcov-combined/

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, test-e2e, test-contract]
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test-unit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.test-integration.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.test-e2e.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Contract Tests | ${{ needs.test-contract.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          # Fail if any critical tests failed
          if [ "${{ needs.test-unit.result }}" != "success" ] || [ "${{ needs.test-integration.result }}" != "success" ]; then
            echo ""
            echo "❌ Critical tests failed!"
            exit 1
          fi
          
          echo ""
          echo "✅ All tests passed!"