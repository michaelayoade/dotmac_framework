name: Performance Budget & Security CI

on:
  pull_request:
    paths:
      - 'isp-framework/customer/**'
      - 'packages/**'
  push:
    branches: [main]
    paths:
      - 'isp-framework/customer/**'
      - 'packages/**'

jobs:
  performance-budget:
    name: Check Performance Budget
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./isp-framework/customer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: https://api.dotmac.com
          SKIP_ENV_VALIDATION: true

      - name: Run bundle size check
        run: pnpm size

      - name: Run performance monitor
        run: node scripts/performance-monitor.js

      - name: Bundle analyzer
        run: pnpm analyze
        env:
          ANALYZE: true

      - name: Upload bundle analyzer report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analyzer-report-${{ github.sha }}
          path: |
            isp-framework/customer/.next/analyze/
            isp-framework/customer/bundle-report.html
          retention-days: 7

      - name: Comment PR with bundle size
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read bundle size report
            let bundleReport = '';
            try {
              const sizeLimitOutput = await exec.exec('pnpm', ['size'], {
                cwd: './isp-framework/customer',
                silent: true,
                listeners: {
                  stdout: (data) => {
                    bundleReport += data.toString();
                  }
                }
              });
            } catch (error) {
              bundleReport = 'Bundle size check failed: ' + error.message;
            }

            // Create comment
            const comment = `
            ## 📦 Bundle Size Report
            
            \`\`\`
            ${bundleReport}
            \`\`\`
            
            ### 📊 Performance Metrics
            - Bundle analyzer report available in artifacts
            - Performance recommendations generated
            
            **Note**: This is an automated comment generated by the Performance Budget workflow.
            `;

            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  lighthouse-ci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./isp-framework/customer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: https://api.dotmac.com
          SKIP_ENV_VALIDATION: true

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse CI failed but continuing"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports-${{ github.sha }}
          path: |
            isp-framework/customer/.lighthouseci/
            isp-framework/customer/lighthouse-reports/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./isp-framework/customer

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for vulnerable packages
        run: |
          echo "Checking for known vulnerabilities..."
          pnpm audit --json > audit-results.json || true
          
          # Parse results and create summary
          node -e "
            const fs = require('fs');
            try {
              const audit = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
              const vulnerabilities = audit.metadata?.vulnerabilities || {};
              const total = Object.values(vulnerabilities).reduce((sum, count) => sum + count, 0);
              
              console.log('Security Audit Summary:');
              console.log('======================');
              Object.entries(vulnerabilities).forEach(([level, count]) => {
                if (count > 0) console.log(\`\${level}: \${count}\`);
              });
              
              if (total === 0) {
                console.log('✅ No vulnerabilities found');
              } else {
                console.log(\`⚠️ Total vulnerabilities: \${total}\`);
                if (vulnerabilities.high > 0 || vulnerabilities.critical > 0) {
                  process.exit(1);
                }
              }
            } catch (error) {
              console.log('Could not parse audit results');
            }
          "

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.sha }}
          path: isp-framework/customer/audit-results.json
          retention-days: 30