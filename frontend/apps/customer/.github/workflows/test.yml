name: Customer App Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/customer/**'
      - 'packages/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/customer/**'
      - 'packages/**'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        test-type: [unit, integration, e2e]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type check
        run: pnpm --filter=@dotmac/customer-app type-check

      - name: Lint
        run: pnpm --filter=@dotmac/customer-app lint

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pnpm --filter=@dotmac/customer-app test:unit --coverage --maxWorkers=2
        env:
          CI: true

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          pnpm --filter=@dotmac/customer-app test:integration --coverage --maxWorkers=2
        env:
          CI: true

      - name: Install Playwright browsers
        if: matrix.test-type == 'e2e'
        run: |
          cd apps/customer
          pnpm exec playwright install --with-deps

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: |
          cd apps/customer
          pnpm test:e2e
        env:
          CI: true

      - name: Upload test coverage
        if: matrix.test-type != 'e2e'
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/customer/coverage/lcov.info
          flags: customer-app,${{ matrix.test-type }}
          name: customer-app-${{ matrix.test-type }}
          fail_ci_if_error: false

      - name: Upload E2E test results
        if: matrix.test-type == 'e2e' && always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: apps/customer/playwright-report/
          retention-days: 30

      - name: Upload E2E videos
        if: matrix.test-type == 'e2e' && always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-videos
          path: apps/customer/test-results/
          retention-days: 7

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate combined coverage report
        run: |
          cd apps/customer
          pnpm test:coverage
        env:
          CI: true

      - name: Coverage threshold check
        run: |
          cd apps/customer
          node -e "
            const fs = require('fs');
            const path = 'coverage/coverage-summary.json';
            if (fs.existsSync(path)) {
              const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
              const { statements, branches, functions, lines } = coverage.total;
              
              console.log('Coverage Summary:');
              console.log(\`Statements: \${statements.pct}%\`);
              console.log(\`Branches: \${branches.pct}%\`);
              console.log(\`Functions: \${functions.pct}%\`);
              console.log(\`Lines: \${lines.pct}%\`);
              
              // Phase 2 targets: 90% coverage
              const thresholds = {
                statements: 90,
                branches: 85,
                functions: 90,
                lines: 90
              };
              
              let failed = false;
              for (const [key, threshold] of Object.entries(thresholds)) {
                if (coverage.total[key].pct < threshold) {
                  console.error(\`‚ùå \${key} coverage (\${coverage.total[key].pct}%) below threshold (\${threshold}%)\`);
                  failed = true;
                } else {
                  console.log(\`‚úÖ \${key} coverage (\${coverage.total[key].pct}%) meets threshold (\${threshold}%)\`);
                }
              }
              
              if (failed) {
                process.exit(1);
              } else {
                console.log('üéâ All coverage thresholds met!');
              }
            } else {
              console.warn('No coverage report found');
            }
          "

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = './apps/customer/coverage/coverage-summary.json';
            
            if (fs.existsSync(path)) {
              const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
              const { statements, branches, functions, lines } = coverage.total;
              
              const coverageComment = \`
            ## üìä Customer App Test Coverage Report
            
            | Metric | Coverage | Status |
            |--------|----------|---------|
            | Statements | \${statements.pct}% | \${statements.pct >= 90 ? '‚úÖ' : '‚ùå'} |
            | Branches | \${branches.pct}% | \${branches.pct >= 85 ? '‚úÖ' : '‚ùå'} |
            | Functions | \${functions.pct}% | \${functions.pct >= 90 ? '‚úÖ' : '‚ùå'} |
            | Lines | \${lines.pct}% | \${lines.pct >= 90 ? '‚úÖ' : '‚ùå'} |
            
            **Target**: 90% statements, 85% branches, 90% functions, 90% lines
            
            \${statements.pct >= 90 && branches.pct >= 85 && functions.pct >= 90 && lines.pct >= 90 
              ? 'üéâ All coverage targets met!' 
              : '‚ö†Ô∏è Some coverage targets not met. Please add more tests.'}
            \`;
            
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: coverageComment
              });
            }

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          cd apps/customer
          pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Run dependency vulnerability scan
        uses: securecodewarrior/github-action-add-sarif@v1
        if: always()
        with:
          sarif-file: 'security-scan-results.sarif'
        continue-on-error: true

  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app
        run: |
          cd apps/customer
          pnpm build

      - name: Start app
        run: |
          cd apps/customer
          pnpm start &
          sleep 10
        env:
          CI: true

      - name: Run accessibility tests
        run: |
          cd apps/customer
          # Run axe-core accessibility tests
          npx axe-cli http://localhost:3001 --exit

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app
        run: |
          cd apps/customer
          pnpm build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './apps/customer/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true