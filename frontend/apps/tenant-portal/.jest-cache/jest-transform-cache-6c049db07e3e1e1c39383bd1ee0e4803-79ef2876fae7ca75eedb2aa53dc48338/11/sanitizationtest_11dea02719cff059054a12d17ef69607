eda65e4b641addf5fd782c720da6a282
/**
 * Sanitization Tests
 * Unit tests for input sanitization functions
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _sanitization = require("../../lib/sanitization");
describe("sanitizeText", ()=>{
    it("should remove HTML tags", ()=>{
        const input = '<script>alert("xss")</script>Hello World';
        const result = (0, _sanitization.sanitizeText)(input);
        expect(result).toBe("Hello World");
    });
    it("should remove dangerous JavaScript", ()=>{
        const input = 'javascript:alert("xss")';
        const result = (0, _sanitization.sanitizeText)(input);
        expect(result).toBe('javascript:alert("xss")'); // DOMPurify handles this in HTML context
    });
    it("should handle empty input", ()=>{
        expect((0, _sanitization.sanitizeText)("")).toBe("");
        expect((0, _sanitization.sanitizeText)(null)).toBe("");
        expect((0, _sanitization.sanitizeText)(undefined)).toBe("");
    });
    it("should trim whitespace", ()=>{
        const input = "  Hello World  ";
        const result = (0, _sanitization.sanitizeText)(input);
        expect(result).toBe("Hello World");
    });
    it("should handle special characters safely", ()=>{
        const input = "Hello & World < > \" ' /";
        const result = (0, _sanitization.sanitizeText)(input);
        expect(result).toContain("Hello");
        expect(result).toContain("World");
    });
});
describe("sanitizeRichText", ()=>{
    it("should allow safe HTML tags", ()=>{
        const input = "<p>Hello <strong>World</strong></p>";
        const result = (0, _sanitization.sanitizeRichText)(input);
        expect(result).toContain("<p>");
        expect(result).toContain("<strong>");
        expect(result).toContain("Hello World");
    });
    it("should remove dangerous HTML tags", ()=>{
        const input = '<p>Hello</p><script>alert("xss")</script>';
        const result = (0, _sanitization.sanitizeRichText)(input);
        expect(result).toContain("<p>Hello</p>");
        expect(result).not.toContain("<script>");
        expect(result).not.toContain("alert");
    });
    it("should handle mixed content", ()=>{
        const input = '<p>Safe content</p><iframe src="evil"></iframe><em>More safe</em>';
        const result = (0, _sanitization.sanitizeRichText)(input);
        expect(result).toContain("<p>Safe content</p>");
        expect(result).toContain("<em>More safe</em>");
        expect(result).not.toContain("<iframe>");
    });
});
describe("sanitizeEmail", ()=>{
    it("should sanitize and normalize email", ()=>{
        expect((0, _sanitization.sanitizeEmail)("  TEST@EXAMPLE.COM  ")).toBe("test@example.com");
    });
    it("should remove HTML from email", ()=>{
        const input = 'test@example.com<script>alert("xss")</script>';
        const result = (0, _sanitization.sanitizeEmail)(input);
        expect(result).toBe("test@example.com");
    });
    it("should handle invalid input types", ()=>{
        expect((0, _sanitization.sanitizeEmail)(null)).toBe("");
        expect((0, _sanitization.sanitizeEmail)(123)).toBe("");
    });
});
describe("sanitizeURL", ()=>{
    it("should allow safe URLs", ()=>{
        expect((0, _sanitization.sanitizeURL)("https://example.com")).toBe("https://example.com");
        expect((0, _sanitization.sanitizeURL)("http://example.com/path?query=value")).toBe("http://example.com/path?query=value");
    });
    it("should remove dangerous protocols", ()=>{
        expect((0, _sanitization.sanitizeURL)('javascript:alert("xss")')).toBe('alert("xss")');
        expect((0, _sanitization.sanitizeURL)('data:text/html,<script>alert("xss")</script>')).toBe("text/html,");
        expect((0, _sanitization.sanitizeURL)('vbscript:msgbox("xss")')).toBe('msgbox("xss")');
    });
    it("should handle malformed URLs", ()=>{
        expect((0, _sanitization.sanitizeURL)('<script>alert("xss")</script>')).toBe("");
    });
});
describe("sanitizeFileName", ()=>{
    it("should remove dangerous characters", ()=>{
        const input = "my<file>name.txt";
        const result = (0, _sanitization.sanitizeFileName)(input);
        expect(result).toBe("myfilename.txt");
    });
    it("should remove path traversal attempts", ()=>{
        expect((0, _sanitization.sanitizeFileName)("../../../etc/passwd")).toBe("etc/passwd");
        expect((0, _sanitization.sanitizeFileName)("...file")).toBe("file");
    });
    it("should handle Windows reserved characters", ()=>{
        const input = "file:name|with*bad?chars.txt";
        const result = (0, _sanitization.sanitizeFileName)(input);
        expect(result).not.toContain(":");
        expect(result).not.toContain("|");
        expect(result).not.toContain("*");
        expect(result).not.toContain("?");
    });
});
describe("sanitizeSearchQuery", ()=>{
    it("should remove special regex characters", ()=>{
        const input = "search[term]with{regex}chars";
        const result = (0, _sanitization.sanitizeSearchQuery)(input);
        expect(result).not.toContain("[");
        expect(result).not.toContain("]");
        expect(result).not.toContain("{");
        expect(result).not.toContain("}");
    });
    it("should normalize whitespace", ()=>{
        const input = "search   with    multiple    spaces";
        const result = (0, _sanitization.sanitizeSearchQuery)(input);
        expect(result).toBe("search with multiple spaces");
    });
    it("should handle HTML injection attempts", ()=>{
        const input = '<script>alert("xss")</script>search term';
        const result = (0, _sanitization.sanitizeSearchQuery)(input);
        expect(result).not.toContain("<script>");
        expect(result).toContain("search term");
    });
});
describe("sanitizeUserProfile", ()=>{
    it("should sanitize all profile fields", ()=>{
        const input = {
            name: '<script>alert("xss")</script>John Doe',
            email: "  JOHN@EXAMPLE.COM  ",
            phone: "+1-555-0123",
            bio: "<p>Software developer</p><script>evil</script>",
            website: "https://johndoe.com"
        };
        const result = (0, _sanitization.sanitizeUserProfile)(input);
        expect(result.name).toBe("John Doe");
        expect(result.email).toBe("john@example.com");
        expect(result.phone).toBe("+1-555-0123");
        expect(result.bio).toContain("<p>Software developer</p>");
        expect(result.bio).not.toContain("<script>");
        expect(result.website).toBe("https://johndoe.com");
    });
    it("should handle null/undefined profile", ()=>{
        expect((0, _sanitization.sanitizeUserProfile)(null)).toEqual({});
        expect((0, _sanitization.sanitizeUserProfile)(undefined)).toEqual({});
    });
});
describe("sanitizeFormData", ()=>{
    it("should sanitize nested form data", ()=>{
        const input = {
            name: '<script>alert("xss")</script>John',
            details: {
                bio: "<p>Developer</p><script>evil</script>",
                preferences: {
                    theme: "dark<script>evil</script>"
                }
            },
            tags: [
                "<script>tag1</script>",
                "tag2"
            ]
        };
        const result = (0, _sanitization.sanitizeFormData)(input);
        expect(result.name).toBe("John");
        expect(result.details.bio).toContain("Developer");
        expect(result.details.bio).not.toContain("<script>");
        expect(result.details.preferences.theme).toBe("dark");
        expect(result.tags).toEqual([
            "tag1",
            "tag2"
        ]);
    });
});
describe("sanitizeCSSContent", ()=>{
    it("should remove dangerous CSS patterns", ()=>{
        const input = `
      .safe { color: red; }
      .evil { background: url('javascript:alert("xss")'); }
      .expression { width: expression(alert('xss')); }
      @import url('evil.css');
    `;
        const result = (0, _sanitization.sanitizeCSSContent)(input);
        expect(result).toContain(".safe { color: red; }");
        expect(result).not.toContain("javascript:");
        expect(result).not.toContain("expression(");
        expect(result).not.toContain("@import");
    });
});
describe("containsDangerousContent", ()=>{
    it("should detect dangerous content", ()=>{
        expect((0, _sanitization.containsDangerousContent)('<script>alert("xss")</script>')).toBe(true);
        expect((0, _sanitization.containsDangerousContent)('javascript:alert("xss")')).toBe(true);
        expect((0, _sanitization.containsDangerousContent)('onclick="alert(1)"')).toBe(true);
        expect((0, _sanitization.containsDangerousContent)('<iframe src="evil"></iframe>')).toBe(true);
        expect((0, _sanitization.containsDangerousContent)('eval("evil code")')).toBe(true);
    });
    it("should not flag safe content", ()=>{
        expect((0, _sanitization.containsDangerousContent)("Hello World")).toBe(false);
        expect((0, _sanitization.containsDangerousContent)("<p>Safe HTML</p>")).toBe(false);
        expect((0, _sanitization.containsDangerousContent)("https://example.com")).toBe(false);
    });
});
describe("sanitizeColor", ()=>{
    it("should validate hex colors", ()=>{
        expect((0, _sanitization.sanitizeColor)("#FF0000")).toBe("#FF0000");
        expect((0, _sanitization.sanitizeColor)("#f00")).toBe("#f00");
        expect((0, _sanitization.sanitizeColor)("#invalid")).toBe("");
    });
    it("should validate RGB colors", ()=>{
        expect((0, _sanitization.sanitizeColor)("rgb(255, 0, 0)")).toBe("rgb(255, 0, 0)");
        expect((0, _sanitization.sanitizeColor)("rgba(255, 0, 0, 0.5)")).toBe("rgba(255, 0, 0, 0.5)");
        expect((0, _sanitization.sanitizeColor)("rgb(300, 0, 0)")).toBe(""); // Invalid range
    });
    it("should reject malicious color values", ()=>{
        expect((0, _sanitization.sanitizeColor)("red; background: url(javascript:alert(1))")).toBe("");
        expect((0, _sanitization.sanitizeColor)("<script>alert(1)</script>")).toBe("");
    });
});
describe("sanitizePhoneNumber", ()=>{
    it("should keep valid phone number characters", ()=>{
        expect((0, _sanitization.sanitizePhoneNumber)("+1 (555) 123-4567")).toBe("+1 (555) 123-4567");
        expect((0, _sanitization.sanitizePhoneNumber)("555.123.4567")).toBe("555.123.4567");
    });
    it("should remove invalid characters", ()=>{
        expect((0, _sanitization.sanitizePhoneNumber)("+1<script>alert(1)</script>(555)123-4567")).toBe("+1(555)123-4567");
        expect((0, _sanitization.sanitizePhoneNumber)("555abc123def4567")).toBe("5551234567");
    });
});
describe("sanitizeQueryParams", ()=>{
    it("should escape SQL injection attempts", ()=>{
        const input = {
            search: "'; DROP TABLE users; --",
            filter: "normal value",
            sort: "name' OR '1'='1"
        };
        const result = (0, _sanitization.sanitizeQueryParams)(input);
        expect(result.search).toBe("'''' DROP TABLE users ");
        expect(result.filter).toBe("normal value");
        expect(result.sort).toBe("name'' OR ''1''=''1");
    });
    it("should handle non-string values", ()=>{
        const input = {
            page: 1,
            active: true,
            tags: [
                "tag1",
                "tag2"
            ],
            metadata: {
                key: "value"
            }
        };
        const result = (0, _sanitization.sanitizeQueryParams)(input);
        expect(result.page).toBe(1);
        expect(result.active).toBe(true);
        expect(result.tags).toEqual([
            "tag1",
            "tag2"
        ]);
        expect(result.metadata).toBeUndefined(); // Objects are filtered out
    });
});

//# sourceMappingURL=data:application/json;base64,