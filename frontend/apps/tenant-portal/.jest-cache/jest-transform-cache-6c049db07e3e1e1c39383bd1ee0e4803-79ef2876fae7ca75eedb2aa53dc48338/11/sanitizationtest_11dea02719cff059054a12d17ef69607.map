{"version":3,"sources":["/home/dotmac_framework/frontend/apps/tenant-portal/src/__tests__/lib/sanitization.test.ts"],"sourcesContent":["/**\n * Sanitization Tests\n * Unit tests for input sanitization functions\n */\n\nimport {\n  sanitizeText,\n  sanitizeRichText,\n  sanitizeBasicHTML,\n  sanitizeEmail,\n  sanitizeURL,\n  sanitizeFileName,\n  sanitizeSearchQuery,\n  sanitizeUserProfile,\n  sanitizeTenantSettings,\n  sanitizeSupportTicket,\n  sanitizeFormData,\n  sanitizeCSSContent,\n  sanitizeJSONString,\n  sanitizeQueryParams,\n  containsDangerousContent,\n  sanitizeColor,\n  sanitizePhoneNumber,\n} from '@/lib/sanitization';\n\ndescribe('sanitizeText', () => {\n  it('should remove HTML tags', () => {\n    const input = '<script>alert(\"xss\")</script>Hello World';\n    const result = sanitizeText(input);\n    expect(result).toBe('Hello World');\n  });\n\n  it('should remove dangerous JavaScript', () => {\n    const input = 'javascript:alert(\"xss\")';\n    const result = sanitizeText(input);\n    expect(result).toBe('javascript:alert(\"xss\")'); // DOMPurify handles this in HTML context\n  });\n\n  it('should handle empty input', () => {\n    expect(sanitizeText('')).toBe('');\n    expect(sanitizeText(null as any)).toBe('');\n    expect(sanitizeText(undefined as any)).toBe('');\n  });\n\n  it('should trim whitespace', () => {\n    const input = '  Hello World  ';\n    const result = sanitizeText(input);\n    expect(result).toBe('Hello World');\n  });\n\n  it('should handle special characters safely', () => {\n    const input = 'Hello & World < > \" \\' /';\n    const result = sanitizeText(input);\n    expect(result).toContain('Hello');\n    expect(result).toContain('World');\n  });\n});\n\ndescribe('sanitizeRichText', () => {\n  it('should allow safe HTML tags', () => {\n    const input = '<p>Hello <strong>World</strong></p>';\n    const result = sanitizeRichText(input);\n    expect(result).toContain('<p>');\n    expect(result).toContain('<strong>');\n    expect(result).toContain('Hello World');\n  });\n\n  it('should remove dangerous HTML tags', () => {\n    const input = '<p>Hello</p><script>alert(\"xss\")</script>';\n    const result = sanitizeRichText(input);\n    expect(result).toContain('<p>Hello</p>');\n    expect(result).not.toContain('<script>');\n    expect(result).not.toContain('alert');\n  });\n\n  it('should handle mixed content', () => {\n    const input = '<p>Safe content</p><iframe src=\"evil\"></iframe><em>More safe</em>';\n    const result = sanitizeRichText(input);\n    expect(result).toContain('<p>Safe content</p>');\n    expect(result).toContain('<em>More safe</em>');\n    expect(result).not.toContain('<iframe>');\n  });\n});\n\ndescribe('sanitizeEmail', () => {\n  it('should sanitize and normalize email', () => {\n    expect(sanitizeEmail('  TEST@EXAMPLE.COM  ')).toBe('test@example.com');\n  });\n\n  it('should remove HTML from email', () => {\n    const input = 'test@example.com<script>alert(\"xss\")</script>';\n    const result = sanitizeEmail(input);\n    expect(result).toBe('test@example.com');\n  });\n\n  it('should handle invalid input types', () => {\n    expect(sanitizeEmail(null as any)).toBe('');\n    expect(sanitizeEmail(123 as any)).toBe('');\n  });\n});\n\ndescribe('sanitizeURL', () => {\n  it('should allow safe URLs', () => {\n    expect(sanitizeURL('https://example.com')).toBe('https://example.com');\n    expect(sanitizeURL('http://example.com/path?query=value')).toBe('http://example.com/path?query=value');\n  });\n\n  it('should remove dangerous protocols', () => {\n    expect(sanitizeURL('javascript:alert(\"xss\")')).toBe('alert(\"xss\")');\n    expect(sanitizeURL('data:text/html,<script>alert(\"xss\")</script>')).toBe('text/html,');\n    expect(sanitizeURL('vbscript:msgbox(\"xss\")')).toBe('msgbox(\"xss\")');\n  });\n\n  it('should handle malformed URLs', () => {\n    expect(sanitizeURL('<script>alert(\"xss\")</script>')).toBe('');\n  });\n});\n\ndescribe('sanitizeFileName', () => {\n  it('should remove dangerous characters', () => {\n    const input = 'my<file>name.txt';\n    const result = sanitizeFileName(input);\n    expect(result).toBe('myfilename.txt');\n  });\n\n  it('should remove path traversal attempts', () => {\n    expect(sanitizeFileName('../../../etc/passwd')).toBe('etc/passwd');\n    expect(sanitizeFileName('...file')).toBe('file');\n  });\n\n  it('should handle Windows reserved characters', () => {\n    const input = 'file:name|with*bad?chars.txt';\n    const result = sanitizeFileName(input);\n    expect(result).not.toContain(':');\n    expect(result).not.toContain('|');\n    expect(result).not.toContain('*');\n    expect(result).not.toContain('?');\n  });\n});\n\ndescribe('sanitizeSearchQuery', () => {\n  it('should remove special regex characters', () => {\n    const input = 'search[term]with{regex}chars';\n    const result = sanitizeSearchQuery(input);\n    expect(result).not.toContain('[');\n    expect(result).not.toContain(']');\n    expect(result).not.toContain('{');\n    expect(result).not.toContain('}');\n  });\n\n  it('should normalize whitespace', () => {\n    const input = 'search   with    multiple    spaces';\n    const result = sanitizeSearchQuery(input);\n    expect(result).toBe('search with multiple spaces');\n  });\n\n  it('should handle HTML injection attempts', () => {\n    const input = '<script>alert(\"xss\")</script>search term';\n    const result = sanitizeSearchQuery(input);\n    expect(result).not.toContain('<script>');\n    expect(result).toContain('search term');\n  });\n});\n\ndescribe('sanitizeUserProfile', () => {\n  it('should sanitize all profile fields', () => {\n    const input = {\n      name: '<script>alert(\"xss\")</script>John Doe',\n      email: '  JOHN@EXAMPLE.COM  ',\n      phone: '+1-555-0123',\n      bio: '<p>Software developer</p><script>evil</script>',\n      website: 'https://johndoe.com',\n    };\n\n    const result = sanitizeUserProfile(input);\n\n    expect(result.name).toBe('John Doe');\n    expect(result.email).toBe('john@example.com');\n    expect(result.phone).toBe('+1-555-0123');\n    expect(result.bio).toContain('<p>Software developer</p>');\n    expect(result.bio).not.toContain('<script>');\n    expect(result.website).toBe('https://johndoe.com');\n  });\n\n  it('should handle null/undefined profile', () => {\n    expect(sanitizeUserProfile(null)).toEqual({});\n    expect(sanitizeUserProfile(undefined)).toEqual({});\n  });\n});\n\ndescribe('sanitizeFormData', () => {\n  it('should sanitize nested form data', () => {\n    const input = {\n      name: '<script>alert(\"xss\")</script>John',\n      details: {\n        bio: '<p>Developer</p><script>evil</script>',\n        preferences: {\n          theme: 'dark<script>evil</script>',\n        },\n      },\n      tags: ['<script>tag1</script>', 'tag2'],\n    };\n\n    const result = sanitizeFormData(input);\n\n    expect(result.name).toBe('John');\n    expect(result.details.bio).toContain('Developer');\n    expect(result.details.bio).not.toContain('<script>');\n    expect(result.details.preferences.theme).toBe('dark');\n    expect(result.tags).toEqual(['tag1', 'tag2']);\n  });\n});\n\ndescribe('sanitizeCSSContent', () => {\n  it('should remove dangerous CSS patterns', () => {\n    const input = `\n      .safe { color: red; }\n      .evil { background: url('javascript:alert(\"xss\")'); }\n      .expression { width: expression(alert('xss')); }\n      @import url('evil.css');\n    `;\n\n    const result = sanitizeCSSContent(input);\n\n    expect(result).toContain('.safe { color: red; }');\n    expect(result).not.toContain('javascript:');\n    expect(result).not.toContain('expression(');\n    expect(result).not.toContain('@import');\n  });\n});\n\ndescribe('containsDangerousContent', () => {\n  it('should detect dangerous content', () => {\n    expect(containsDangerousContent('<script>alert(\"xss\")</script>')).toBe(true);\n    expect(containsDangerousContent('javascript:alert(\"xss\")')).toBe(true);\n    expect(containsDangerousContent('onclick=\"alert(1)\"')).toBe(true);\n    expect(containsDangerousContent('<iframe src=\"evil\"></iframe>')).toBe(true);\n    expect(containsDangerousContent('eval(\"evil code\")')).toBe(true);\n  });\n\n  it('should not flag safe content', () => {\n    expect(containsDangerousContent('Hello World')).toBe(false);\n    expect(containsDangerousContent('<p>Safe HTML</p>')).toBe(false);\n    expect(containsDangerousContent('https://example.com')).toBe(false);\n  });\n});\n\ndescribe('sanitizeColor', () => {\n  it('should validate hex colors', () => {\n    expect(sanitizeColor('#FF0000')).toBe('#FF0000');\n    expect(sanitizeColor('#f00')).toBe('#f00');\n    expect(sanitizeColor('#invalid')).toBe('');\n  });\n\n  it('should validate RGB colors', () => {\n    expect(sanitizeColor('rgb(255, 0, 0)')).toBe('rgb(255, 0, 0)');\n    expect(sanitizeColor('rgba(255, 0, 0, 0.5)')).toBe('rgba(255, 0, 0, 0.5)');\n    expect(sanitizeColor('rgb(300, 0, 0)')).toBe(''); // Invalid range\n  });\n\n  it('should reject malicious color values', () => {\n    expect(sanitizeColor('red; background: url(javascript:alert(1))')).toBe('');\n    expect(sanitizeColor('<script>alert(1)</script>')).toBe('');\n  });\n});\n\ndescribe('sanitizePhoneNumber', () => {\n  it('should keep valid phone number characters', () => {\n    expect(sanitizePhoneNumber('+1 (555) 123-4567')).toBe('+1 (555) 123-4567');\n    expect(sanitizePhoneNumber('555.123.4567')).toBe('555.123.4567');\n  });\n\n  it('should remove invalid characters', () => {\n    expect(sanitizePhoneNumber('+1<script>alert(1)</script>(555)123-4567')).toBe('+1(555)123-4567');\n    expect(sanitizePhoneNumber('555abc123def4567')).toBe('5551234567');\n  });\n});\n\ndescribe('sanitizeQueryParams', () => {\n  it('should escape SQL injection attempts', () => {\n    const input = {\n      search: \"'; DROP TABLE users; --\",\n      filter: \"normal value\",\n      sort: \"name' OR '1'='1\",\n    };\n\n    const result = sanitizeQueryParams(input);\n\n    expect(result.search).toBe(\"'''' DROP TABLE users \");\n    expect(result.filter).toBe(\"normal value\");\n    expect(result.sort).toBe(\"name'' OR ''1''=''1\");\n  });\n\n  it('should handle non-string values', () => {\n    const input = {\n      page: 1,\n      active: true,\n      tags: ['tag1', 'tag2'],\n      metadata: { key: 'value' },\n    };\n\n    const result = sanitizeQueryParams(input);\n\n    expect(result.page).toBe(1);\n    expect(result.active).toBe(true);\n    expect(result.tags).toEqual(['tag1', 'tag2']);\n    expect(result.metadata).toBeUndefined(); // Objects are filtered out\n  });\n});"],"names":["describe","it","input","result","sanitizeText","expect","toBe","undefined","toContain","sanitizeRichText","not","sanitizeEmail","sanitizeURL","sanitizeFileName","sanitizeSearchQuery","name","email","phone","bio","website","sanitizeUserProfile","toEqual","details","preferences","theme","tags","sanitizeFormData","sanitizeCSSContent","containsDangerousContent","sanitizeColor","sanitizePhoneNumber","search","filter","sort","sanitizeQueryParams","page","active","metadata","key","toBeUndefined"],"mappings":"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"}