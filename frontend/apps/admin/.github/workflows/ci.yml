name: Admin Portal CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['frontend/apps/admin/**']
  pull_request:
    branches: [main, develop]
    paths: ['frontend/apps/admin/**']

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # ============================================================================
  # QUALITY CHECKS
  # ============================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/apps/admin
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm lint

      - name: Type check
        run: pnpm type-check

      - name: Format check
        run: pnpm format --check

      - name: Security audit
        run: pnpm audit --audit-level moderate

  # ============================================================================
  # TESTING
  # ============================================================================
  test:
    name: Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/apps/admin
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test:ci
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/apps/admin/coverage
          flags: admin-portal
          name: admin-portal-coverage

      - name: Coverage comment
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: frontend/apps/admin/coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name == 'pull_request'

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend/apps/admin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium
          command: test
        continue-on-error: true

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # ============================================================================
  # BUILD
  # ============================================================================
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    defaults:
      run:
        working-directory: frontend/apps/admin
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_BUILD_VERSION: ${{ github.sha }}
          NEXT_PUBLIC_BUILD_TIME: ${{ github.event.head_commit.timestamp }}

      - name: Analyze bundle size
        run: |
          npx @next/bundle-analyzer
          echo "Bundle analysis complete"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            frontend/apps/admin/.next
            frontend/apps/admin/out
          retention-days: 7

  # ============================================================================
  # PERFORMANCE TESTING
  # ============================================================================
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: frontend/apps/admin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: frontend/apps/admin/

      - name: Run Lighthouse CI
        run: npx lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Bundle size analysis
        uses: preactjs/compressed-size-action@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          pattern: "frontend/apps/admin/.next/static/**/*.{js,css}"
          build-script: "cd frontend/apps/admin && pnpm build"

  # ============================================================================
  # DEPLOYMENT (STAGING)
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, test, security, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: frontend/apps/admin/

      - name: Deploy to staging
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: frontend/apps/admin/out
          publish_branch: staging-deploy

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Admin Portal deployed to staging'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # DEPLOYMENT (PRODUCTION)
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, test, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: frontend/apps/admin/

      - name: Deploy to production
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: frontend/apps/admin/out
          publish_branch: production-deploy

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: admin-v${{ github.run_number }}
          release_name: Admin Portal v${{ github.run_number }}
          body: |
            Changes in this Release
            - Build: ${{ github.sha }}
            - Timestamp: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Admin Portal deployed to production'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # POST-DEPLOYMENT MONITORING
  # ============================================================================
  monitor:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 60
          
          # Health check
          response=$(curl -s -o /dev/null -w "%{http_code}" https://admin.dotmac.com/api/health)
          if [ $response -eq 200 ]; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed with status $response"
            exit 1
          fi

      - name: Smoke tests
        run: |
          # Basic smoke tests
          curl -f https://admin.dotmac.com/ || exit 1
          curl -f https://admin.dotmac.com/login || exit 1
          echo "✅ Smoke tests passed"

      - name: Performance verification
        run: |
          # Run lighthouse on production
          npx lighthouse https://admin.dotmac.com/ \
            --only-categories=performance,accessibility,seo \
            --chrome-flags="--headless --no-sandbox" \
            --output=json \
            --output-path=lighthouse-results.json
          
          # Check performance score
          performance_score=$(cat lighthouse-results.json | jq '.categories.performance.score * 100')
          if (( $(echo "$performance_score < 80" | bc -l) )); then
            echo "❌ Performance score too low: $performance_score"
            exit 1
          fi
          
          echo "✅ Performance verification passed: $performance_score"