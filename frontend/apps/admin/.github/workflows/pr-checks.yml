name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]
    paths: ['frontend/apps/admin/**']
  pull_request_review:
    types: [submitted]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # ============================================================================
  # PR VALIDATION
  # ============================================================================
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
          requireScope: false

      - name: Check PR size
        uses: noqcks/pr-size-labeler@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate branch naming
        run: |
          branch_name="${GITHUB_HEAD_REF}"
          if [[ ! $branch_name =~ ^(feature|bugfix|hotfix|release)\/[a-z0-9-]+$ ]]; then
            echo "❌ Branch name must follow pattern: (feature|bugfix|hotfix|release)/your-branch-name"
            exit 1
          fi
          echo "✅ Branch name is valid: $branch_name"

  # ============================================================================
  # SECURITY REVIEW
  # ============================================================================
  security-review:
    name: Security Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: frontend/apps/admin

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security-sensitive files check
        run: |
          # Check for sensitive files in PR
          sensitive_files=$(git diff --name-only origin/main...HEAD | grep -E '\.(env|key|pem|p12|pfx)$' || true)
          if [ ! -z "$sensitive_files" ]; then
            echo "❌ Sensitive files detected:"
            echo "$sensitive_files"
            exit 1
          fi
          echo "✅ No sensitive files detected"

      - name: Secret scanning
        run: |
          # Check for hardcoded secrets in changed files
          git diff origin/main...HEAD --name-only | xargs grep -l "password\|secret\|key\|token" || echo "No potential secrets found"

      - name: Dependency vulnerability check
        run: |
          # Check for new vulnerabilities in dependencies
          pnpm audit --audit-level high --production
          echo "✅ No high-severity vulnerabilities found"

  # ============================================================================
  # CODE QUALITY CHECKS
  # ============================================================================
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: frontend/apps/admin

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint changed files
        run: |
          # Only lint changed files
          changed_files=$(git diff --name-only --diff-filter=AM origin/main...HEAD | grep -E '\.(ts|tsx|js|jsx)$' || true)
          if [ ! -z "$changed_files" ]; then
            echo "Linting changed files:"
            echo "$changed_files"
            echo "$changed_files" | xargs pnpm eslint
          else
            echo "No relevant files to lint"
          fi

      - name: Type check
        run: pnpm type-check

      - name: Test coverage check
        run: |
          pnpm test:ci
          
          # Check if coverage meets minimum requirements
          coverage_lines=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          coverage_functions=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          coverage_branches=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
          coverage_statements=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          
          minimum_coverage=70
          
          if (( $(echo "$coverage_lines < $minimum_coverage" | bc -l) )) || \
             (( $(echo "$coverage_functions < $minimum_coverage" | bc -l) )) || \
             (( $(echo "$coverage_branches < $minimum_coverage" | bc -l) )) || \
             (( $(echo "$coverage_statements < $minimum_coverage" | bc -l) )); then
            echo "❌ Coverage below minimum threshold of ${minimum_coverage}%"
            echo "Lines: ${coverage_lines}%"
            echo "Functions: ${coverage_functions}%"
            echo "Branches: ${coverage_branches}%"
            echo "Statements: ${coverage_statements}%"
            exit 1
          fi
          
          echo "✅ Coverage meets requirements:"
          echo "Lines: ${coverage_lines}%"
          echo "Functions: ${coverage_functions}%"
          echo "Branches: ${coverage_branches}%"
          echo "Statements: ${coverage_statements}%"

      - name: Check for TODO/FIXME comments
        run: |
          # Find TODO/FIXME comments in changed files
          changed_files=$(git diff --name-only --diff-filter=AM origin/main...HEAD | grep -E '\.(ts|tsx|js|jsx)$' || true)
          if [ ! -z "$changed_files" ]; then
            todos=$(echo "$changed_files" | xargs grep -n "TODO\|FIXME" || true)
            if [ ! -z "$todos" ]; then
              echo "⚠️ TODO/FIXME comments found in changed files:"
              echo "$todos"
              echo "Please address these before merging or add GitHub issues"
            fi
          fi

  # ============================================================================
  # PERFORMANCE IMPACT
  # ============================================================================
  performance-impact:
    name: Performance Impact
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: frontend/apps/admin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build PR version
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Analyze bundle size
        uses: preactjs/compressed-size-action@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          pattern: "frontend/apps/admin/.next/static/**/*.{js,css}"
          build-script: "cd frontend/apps/admin && pnpm build"
          minimum-change-threshold: 100

  # ============================================================================
  # ACCESSIBILITY CHECK
  # ============================================================================
  accessibility:
    name: Accessibility Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: frontend/apps/admin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'frontend/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Start application
        run: |
          pnpm start &
          sleep 10
        env:
          NODE_ENV: production

      - name: Run accessibility tests
        run: |
          # Install axe-core CLI
          npm install -g @axe-core/cli
          
          # Test key pages for accessibility
          pages=("/" "/login")
          
          for page in "${pages[@]}"; do
            echo "Testing accessibility for page: $page"
            axe http://localhost:3000$page --exit || exit 1
          done
          
          echo "✅ All accessibility tests passed"

  # ============================================================================
  # AUTO-ASSIGN REVIEWERS
  # ============================================================================
  auto-assign:
    name: Auto-assign Reviewers
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'

    steps:
      - name: Auto-assign reviewers
        uses: kentaro-m/auto-assign-action@v1.2.5
        with:
          configuration-path: '.github/auto-assign.yml'

  # ============================================================================
  # PR COMMENT WITH RESULTS
  # ============================================================================
  pr-comment:
    name: PR Summary Comment
    runs-on: ubuntu-latest
    needs: [pr-validation, security-review, quality-gate, performance-impact, accessibility]
    if: always() && github.event_name == 'pull_request'

    steps:
      - name: Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const results = {
              'PR Validation': '${{ needs.pr-validation.result }}',
              'Security Review': '${{ needs.security-review.result }}',
              'Quality Gate': '${{ needs.quality-gate.result }}',
              'Performance Impact': '${{ needs.performance-impact.result }}',
              'Accessibility': '${{ needs.accessibility.result }}'
            };

            const getEmoji = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏭️';
                default: return '⏳';
              }
            };

            let comment = '## 📋 PR Check Results\n\n';
            
            Object.entries(results).forEach(([check, result]) => {
              comment += `${getEmoji(result)} **${check}**: ${result}\n`;
            });

            const allPassed = Object.values(results).every(result => result === 'success');
            
            if (allPassed) {
              comment += '\n🎉 All checks passed! This PR is ready for review.\n';
            } else {
              comment += '\n⚠️ Some checks failed. Please address the issues before merging.\n';
            }

            comment += '\n---\n*Automated comment from GitHub Actions*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ============================================================================
  # APPROVAL REQUIRED CHECK
  # ============================================================================
  approval-check:
    name: Approval Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_review'

    steps:
      - name: Check required approvals
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const approvals = reviews.filter(review => review.state === 'APPROVED');
            const requiredApprovals = pr.base.ref === 'main' ? 2 : 1;

            if (approvals.length < requiredApprovals) {
              core.setFailed(`PR requires ${requiredApprovals} approvals but only has ${approvals.length}`);
            } else {
              console.log(`✅ PR has sufficient approvals: ${approvals.length}/${requiredApprovals}`);
            }