{
  "complexityGovernance": {
    "version": "1.0.0",
    "description": "Component Complexity Governance Rules for Strategic Architecture",

    "thresholds": {
      "default": {
        "maxLines": 100,
        "maxComplexity": 15,
        "maxParams": 5,
        "maxDepth": 4
      },
      "exceptions": {
        "uiComponents": {
          "maxLines": 200,
          "maxComplexity": 25,
          "maxParams": 8,
          "maxDepth": 6,
          "justification": "UI components require higher complexity for comprehensive user interaction handling"
        },
        "dataComponents": {
          "maxLines": 300,
          "maxComplexity": 30,
          "maxParams": 10,
          "maxDepth": 8,
          "justification": "Data manipulation components handle complex transformation logic"
        },
        "frameworkComponents": {
          "maxLines": 150,
          "maxComplexity": 20,
          "maxParams": 6,
          "maxDepth": 5,
          "justification": "Framework integration components need flexibility for various configurations"
        }
      }
    },

    "strategicPatterns": {
      "compositionFirst": {
        "description": "Prefer composition over complex monolithic components",
        "implementation": [
          "Break components into focused sub-components",
          "Use render props for complex logic sharing",
          "Implement hook-based state management",
          "Apply component factory patterns for variants"
        ],
        "benefits": [
          "Improved testability",
          "Better code reuse",
          "Easier maintenance",
          "Clearer separation of concerns"
        ]
      },
      "strategicComplexity": {
        "description": "When complexity is justified, manage it strategically",
        "implementation": [
          "Document complexity justification",
          "Add comprehensive tests",
          "Create detailed documentation",
          "Implement error boundaries",
          "Add performance monitoring"
        ],
        "reviewCriteria": [
          "Business value justification",
          "Performance requirements",
          "User experience impact",
          "Maintenance overhead assessment"
        ]
      }
    },

    "componentClassification": {
      "simple": {
        "description": "Simple presentational components",
        "characteristics": [
          "Single responsibility",
          "Minimal props",
          "No complex state",
          "Pure functions when possible"
        ],
        "examples": ["Button", "Input", "Badge", "Avatar"]
      },
      "complex": {
        "description": "Complex interactive components",
        "characteristics": [
          "Multiple responsibilities (justified)",
          "Complex state management",
          "Event handling",
          "Performance considerations"
        ],
        "examples": ["DataTable", "Chart", "Form", "Dashboard"],
        "requirements": [
          "Architectural review required",
          "Performance testing mandatory",
          "Comprehensive documentation",
          "Error handling strategy"
        ]
      },
      "framework": {
        "description": "Framework integration components",
        "characteristics": [
          "Framework-specific patterns",
          "Configuration handling",
          "Lifecycle management",
          "Convention compliance"
        ],
        "examples": ["NextPage", "Layout", "Provider", "Middleware"]
      }
    },

    "governanceProcess": {
      "preImplementation": {
        "steps": [
          "Complexity assessment",
          "Pattern selection",
          "Architecture review",
          "Performance planning"
        ],
        "criteria": [
          "Business justification",
          "Technical alternatives evaluation",
          "Maintenance impact assessment",
          "Team capability alignment"
        ]
      },
      "implementation": {
        "steps": [
          "Follow established patterns",
          "Implement error handling",
          "Add comprehensive tests",
          "Document decisions"
        ],
        "checkpoints": [
          "Code review approval",
          "Performance benchmarks",
          "Accessibility compliance",
          "Documentation completeness"
        ]
      },
      "postImplementation": {
        "steps": [
          "Monitor performance",
          "Gather usage metrics",
          "Review maintenance overhead",
          "Plan refactoring if needed"
        ],
        "schedule": [
          "Monthly: Performance review",
          "Quarterly: Architecture assessment",
          "Annually: Complete evaluation"
        ]
      }
    },

    "toolingIntegration": {
      "linting": {
        "rules": [
          "Enforce thresholds by component type",
          "Require documentation for exceptions",
          "Flag complexity increases",
          "Validate pattern compliance"
        ],
        "automation": [
          "Pre-commit complexity checks",
          "CI/CD complexity reporting",
          "Automated refactoring suggestions",
          "Performance regression detection"
        ]
      },
      "monitoring": {
        "metrics": [
          "Component complexity trends",
          "Performance impact correlation",
          "Maintenance effort tracking",
          "User experience metrics"
        ],
        "alerts": [
          "Complexity threshold violations",
          "Performance regressions",
          "Maintenance overhead increases",
          "Pattern compliance failures"
        ]
      }
    },

    "migrationStrategy": {
      "legacyComponents": {
        "assessment": [
          "Complexity measurement",
          "Business value analysis",
          "Technical debt quantification",
          "Refactoring effort estimation"
        ],
        "prioritization": [
          "High complexity, high maintenance",
          "Performance bottlenecks",
          "Frequent change requirements",
          "Security vulnerabilities"
        ],
        "approach": [
          "Incremental refactoring",
          "Feature-driven decomposition",
          "Test-first migration",
          "Performance benchmarking"
        ]
      }
    }
  }
}
