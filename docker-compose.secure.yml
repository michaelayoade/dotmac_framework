version: '3.8'

# Secure Docker Compose with secrets management
# Uses Docker secrets and removes hardcoded credentials

secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  openbao_token:
    file: ./secrets/openbao_token.txt

networks:
  dotmac_internal:
    driver: bridge
    internal: true  # No external access
  dotmac_gateway:
    driver: bridge

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dotmac_postgres
    restart: unless-stopped
    networks:
      - dotmac_internal
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-dotmac}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_DB: ${POSTGRES_DB:-dotmac_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-dotmac}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /run/postgresql

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dotmac_redis
    restart: unless-stopped
    networks:
      - dotmac_internal
    command: redis-server --requirepass /run/secrets/redis_password --appendonly yes
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
    security_opt:
      - no-new-privileges:true
    user: redis
    read_only: true

  # OpenBao (Vault fork) for secrets management
  openbao:
    image: openbao/openbao:latest
    container_name: dotmac_openbao
    restart: unless-stopped
    networks:
      - dotmac_internal
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID_FILE: /run/secrets/openbao_token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    secrets:
      - openbao_token
    volumes:
      - openbao_data:/vault/data
      - ./deployments/openbao/config:/vault/config:ro
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # API Gateway (exposed)
  api_gateway:
    build:
      context: .
      dockerfile: backend/dotmac_api_gateway/Dockerfile
      target: production
      args:
        - BUILD_ENV=production
    container_name: dotmac_api_gateway
    restart: unless-stopped
    networks:
      - dotmac_internal
      - dotmac_gateway
    environment:
      SERVICE_NAME: api_gateway
      DATABASE_URL: postgresql://${POSTGRES_USER}:@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:@redis:6379/0
      SECRET_KEY_FILE: /run/secrets/jwt_secret
      CORS_ORIGINS: ${CORS_ORIGINS:-}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost}
      RATE_LIMIT_ENABLED: "true"
      OPENBAO_URL: http://openbao:8200
      OPENBAO_TOKEN_FILE: /run/secrets/openbao_token
    secrets:
      - db_password
      - redis_password
      - jwt_secret
      - openbao_token
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      openbao:
        condition: service_healthy
    ports:
      - "127.0.0.1:8000:8000"  # Only bind to localhost
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp
    user: 1000:1000

  # Identity Service (internal only)
  identity:
    build:
      context: .
      dockerfile: backend/dotmac_identity/Dockerfile
      target: production
    container_name: dotmac_identity
    restart: unless-stopped
    networks:
      - dotmac_internal
    environment:
      SERVICE_NAME: identity
      DATABASE_URL: postgresql://${POSTGRES_USER}:@postgres:5432/identity_db
      REDIS_URL: redis://:@redis:6379/1
      SECRET_KEY_FILE: /run/secrets/jwt_secret
      OPENBAO_URL: http://openbao:8200
      OPENBAO_TOKEN_FILE: /run/secrets/openbao_token
    secrets:
      - db_password
      - redis_password
      - jwt_secret
      - openbao_token
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
    user: 1000:1000

  # Billing Service (internal only)
  billing:
    build:
      context: .
      dockerfile: backend/dotmac_billing/Dockerfile
      target: production
    container_name: dotmac_billing
    restart: unless-stopped
    networks:
      - dotmac_internal
    environment:
      SERVICE_NAME: billing
      DATABASE_URL: postgresql://${POSTGRES_USER}:@postgres:5432/billing_db
      REDIS_URL: redis://:@redis:6379/2
      SECRET_KEY_FILE: /run/secrets/jwt_secret
      OPENBAO_URL: http://openbao:8200
      OPENBAO_TOKEN_FILE: /run/secrets/openbao_token
    secrets:
      - db_password
      - redis_password
      - jwt_secret
      - openbao_token
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
    user: 1000:1000

  # Add similar configurations for other services...

  # Reverse Proxy (Traefik)
  traefik:
    image: traefik:v3.0
    container_name: dotmac_traefik
    restart: unless-stopped
    networks:
      - dotmac_gateway
      - dotmac_internal
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=dotmac_gateway"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--accesslog=true"
      - "--accesslog.format=json"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH:-admin:$$2y$$10$$...}"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    user: 1000:1000

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  openbao_data:
    driver: local
  traefik_certs:
    driver: local