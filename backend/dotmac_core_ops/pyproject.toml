[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dotmac-core-ops"
version = "0.1.0"
description = "Operations plane SDKs for workflow orchestration, task management, and automation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "DotMac Team", email = "team@dotmac.com"}
]
maintainers = [
    {name = "DotMac Team", email = "team@dotmac.com"}
]
keywords = [
    "workflow", "orchestration", "automation", "scheduler", 
    "state-machine", "saga", "job-queue", "task-management"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Monitoring",
]
requires-python = ">=3.8"
dependencies = [
    "pydantic>=2.0.0",
    "structlog>=23.0.0",
    "httpx>=0.24.0",
    "asyncio-mqtt>=0.13.0",
    "croniter>=1.3.0",
    "python-dateutil>=2.8.0",
    "tenacity>=8.2.0",
    "typing-extensions>=4.5.0",
]

[project.optional-dependencies]
redis = [
    "redis[hiredis]>=4.5.0",
]
kafka = [
    "aiokafka>=0.8.0",
]
postgres = [
    "asyncpg>=0.28.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "alembic>=1.11.0",
]
mongodb = [
    "motor>=3.2.0",
]
api = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "python-multipart>=0.0.6",
]
observability = [
    "prometheus-client>=0.17.0",
    "opentelemetry-api>=1.18.0",
    "opentelemetry-sdk>=1.18.0",
    "opentelemetry-instrumentation-fastapi>=0.39b0",
    "opentelemetry-instrumentation-httpx>=0.39b0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]
all = [
    "dotmac-core-ops[redis,kafka,postgres,mongodb,api,observability]"
]

[project.urls]
Homepage = "https://github.com/dotmac/dotmac-core-ops"
Documentation = "https://docs.dotmac.com/core-ops"
Repository = "https://github.com/dotmac/dotmac-core-ops"
Issues = "https://github.com/dotmac/dotmac-core-ops/issues"
Changelog = "https://github.com/dotmac/dotmac-core-ops/blob/main/CHANGELOG.md"

[project.scripts]
dotmac-ops = "dotmac_core_ops.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["dotmac_core_ops*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
dotmac_core_ops = ["py.typed"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["dotmac_core_ops"]
known_third_party = ["pydantic", "structlog", "httpx", "fastapi"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "aiokafka.*",
    "motor.*",
    "croniter.*",
    "tenacity.*",
    "prometheus_client.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "redis: Tests requiring Redis",
    "kafka: Tests requiring Kafka",
    "postgres: Tests requiring PostgreSQL",
    "mongodb: Tests requiring MongoDB",
]

# Coverage configuration
[tool.coverage.run]
source = ["dotmac_core_ops"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 80

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]

# COMPLEXITY RULES - NO LONGER IGNORED

[tool.ruff.lint]
select = []
ignore = []

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg",
]


# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "test"]
skips = ["B101"]  # Allow assert in tests
