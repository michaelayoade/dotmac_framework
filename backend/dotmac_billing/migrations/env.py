"""
Alembic environment configuration for DotMac Billing migrations.
"""

import os
import sys
from logging.config import fileConfig
from pathlib import Path

from alembic import context
from sqlalchemy import engine_from_config, pool

# Add the project root to the Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Import your models
from dotmac_billing.core.config import get_config
from dotmac_billing.models.base import Base

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Set target metadata for 'autogenerate' support
target_metadata = Base.metadata

# Override database URL from environment or configuration
def get_database_url():
    """Get database URL from environment or configuration."""
    # First try environment variable
    db_url = os.getenv("DATABASE_URL")
    if db_url:
        return db_url

    # Then try configuration
    try:
        billing_config = get_config()
        return billing_config.get_database_url()
    except Exception:
        # Fallback to alembic.ini setting
        return config.get_main_option("sqlalchemy.url")

# Set the database URL
config.set_main_option("sqlalchemy.url", get_database_url())


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        render_as_batch=True,  # Enable batch mode for better SQLite support
        compare_type=True,      # Compare column types
        compare_server_default=True,  # Compare server defaults
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """

    # Handle multi-tenant migrations
    def process_revision_directives(context, revision, directives):
        """Process revision directives to add tenant-specific operations."""
        migration_script = directives[0]

        # Add tenant isolation checks to migrations
        if migration_script.upgrade_ops:
            # You can add custom logic here for tenant-specific migrations
            pass

    configuration = config.get_section(config.config_ini_section)
    configuration["sqlalchemy.url"] = get_database_url()

    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            process_revision_directives=process_revision_directives,
            render_as_batch=True,
            compare_type=True,
            compare_server_default=True,
            # Include object filters for tenant-aware migrations
            include_object=include_object,
        )

        with context.begin_transaction():
            context.run_migrations()


def include_object(object, name, type_, reflected, compare_to):
    """Filter objects to include in migrations.

    This function allows you to filter what objects are included
    in autogenerated migrations.
    """

    # Skip temporary tables
    if type_ == "table" and name.startswith("temp_"):
        return False

    # Skip platform-specific tables that shouldn't be managed by billing
    platform_tables = ["platform_users", "platform_sessions", "platform_auth"]
    if type_ == "table" and name in platform_tables:
        return False

    # Include tenant_id columns in all billing tables
    if type_ == "column" and name == "tenant_id":
        return True

    return True


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
