#!/bin/bash
# Generate comprehensive test reports for DotMac Framework

set -e

# Create reports directory
mkdir -p test-reports/{coverage,performance,security}

echo "🧪 Generating comprehensive test reports..."

# Run tests with coverage and reporting
echo "📊 Running tests with coverage reporting..."
/root/.local/share/pypoetry/venv/bin/poetry run pytest \
    --cov-report=html:test-reports/coverage/html \
    --cov-report=xml:test-reports/coverage/coverage.xml \
    --cov-report=json:test-reports/coverage/coverage.json \
    --junit-xml=test-reports/junit.xml \
    --html=test-reports/test-report.html \
    --self-contained-html \
    --benchmark-json=test-reports/performance/benchmark.json

# Generate coverage badge
echo "🎯 Generating coverage badge..."
/root/.local/share/pypoetry/venv/bin/poetry run coverage-badge -o test-reports/coverage/badge.svg

# Generate performance summary
echo "⚡ Generating performance summary..."
cat > test-reports/performance/summary.md << EOF
# Performance Test Summary

Generated on: $(date -Iseconds)

## Test Execution Summary
- Total test duration: $(grep -o '"duration": [0-9.]*' test-reports/performance/benchmark.json | head -1 | cut -d' ' -f2)s
- Tests with performance benchmarks: $(grep -c '"benchmark"' test-reports/performance/benchmark.json || echo "0")

## Coverage Summary
$(grep -A 5 -B 5 "TOTAL" test-reports/coverage/coverage.xml | head -10 || echo "Coverage data not available")

## Test Categories Executed
$(grep -o 'markers="[^"]*"' test-reports/junit.xml | sort | uniq -c | sort -nr || echo "No markers found")

EOF

# Generate security test summary if available
if [ -f test-reports/security-scan.json ]; then
    echo "🔒 Generating security summary..."
    cat > test-reports/security/summary.md << EOF
# Security Test Summary

Generated on: $(date -Iseconds)

$(cat test-reports/security-scan.json | jq -r '.summary // "No security scan results available"')
EOF
fi

# Create overall summary
echo "📋 Creating overall test summary..."
cat > test-reports/README.md << EOF
# DotMac Framework Test Reports

Generated on: $(date -Iseconds)

## 📊 Coverage Report
- **HTML Report**: [coverage/html/index.html](coverage/html/index.html)
- **XML Report**: [coverage/coverage.xml](coverage/coverage.xml)
- **Coverage Badge**: ![Coverage](coverage/badge.svg)

## 🧪 Test Results
- **Detailed Test Report**: [test-report.html](test-report.html)
- **JUnit XML**: [junit.xml](junit.xml)

## ⚡ Performance Reports
- **Benchmark Results**: [performance/benchmark.json](performance/benchmark.json)
- **Performance Summary**: [performance/summary.md](performance/summary.md)

## 🔒 Security Reports
- **Security Summary**: [security/summary.md](security/summary.md)

## Test Categories

### ✅ Unit Tests
Fast, isolated tests of individual components

### 🔗 Integration Tests  
Tests of component interactions and service integrations

### 🚀 End-to-End Tests
Complete user workflow testing across all services

### 📊 Performance Tests
Load, stress, and database performance validation

### 🎯 Event-Driven Architecture Tests
Message ordering, saga patterns, and event sourcing validation

### 👤 User Journey Tests
Complete customer lifecycle testing

---
*Generated by DotMac Framework Test Suite*
EOF

echo "✅ Test reports generated successfully!"
echo "📁 Reports available in: test-reports/"
echo "🌐 Open test-reports/README.md for navigation"