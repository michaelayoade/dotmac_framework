# DotMac ISP Framework Environment Configuration
# Copy this file to .env and update with your actual values

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
APP_NAME="DotMac ISP Framework"
APP_VERSION="1.0.0"
ENVIRONMENT="development"  # development, staging, production
DEBUG="true"
HOST="0.0.0.0"
PORT="8000"

# =============================================================================
# SECURITY SETTINGS - CRITICAL: MUST BE SET IN PRODUCTION
# =============================================================================
# Generate a secure JWT secret key (use: openssl rand -hex 32)
JWT_SECRET_KEY="your-super-secret-jwt-key-change-immediately"
JWT_ALGORITHM="HS256"
JWT_ACCESS_TOKEN_EXPIRE_MINUTES="15"
JWT_REFRESH_TOKEN_EXPIRE_DAYS="7"

# =============================================================================
# DATABASE SETTINGS
# =============================================================================
# PostgreSQL (production-ready database)
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/dotmac_isp"
ASYNC_DATABASE_URL="postgresql+asyncpg://postgres:postgres@localhost:5432/dotmac_isp"

# For production, use proper credentials:
# DATABASE_URL="postgresql://username:password@localhost:5432/dotmac_isp"
# ASYNC_DATABASE_URL="postgresql+asyncpg://username:password@localhost:5432/dotmac_isp"

# =============================================================================
# REDIS SETTINGS
# =============================================================================
REDIS_URL="redis://localhost:6379/0"
CELERY_BROKER_URL="redis://localhost:6379/1"
CELERY_RESULT_BACKEND="redis://localhost:6379/2"

# =============================================================================
# CORS & SECURITY SETTINGS
# =============================================================================
# For development only - MUST be configured properly for production
CORS_ORIGINS="http://localhost:3000,http://localhost:8000"
ALLOWED_HOSTS="localhost,127.0.0.1"

# Production example:
# CORS_ORIGINS="https://yourdomain.com,https://api.yourdomain.com"
# ALLOWED_HOSTS="yourdomain.com,api.yourdomain.com"

# Email Configuration (SMTP)
SMTP_SERVER=
SMTP_PORT=587
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_TLS=true
FROM_EMAIL=

# SMS Configuration (Twilio)
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
TWILIO_PHONE_NUMBER=

# Payment Configuration (Stripe)
STRIPE_PUBLISHABLE_KEY=
STRIPE_SECRET_KEY=
STRIPE_WEBHOOK_SECRET=

# File Upload Settings
MAX_UPLOAD_SIZE=10485760
UPLOAD_DIRECTORY=uploads

# API Rate Limiting
RATE_LIMIT_PER_MINUTE=100

# Multi-tenancy
ENABLE_MULTI_TENANCY=true

# Logging
LOG_LEVEL=INFO

# =============================================================================
# STRATEGIC DNS MANAGEMENT - LEVERAGES EXISTING INFRASTRUCTURE
# =============================================================================

# Base domain for tenant subdomains (your main domain)
BASE_DOMAIN=dotmac.io

# Load balancer or main server IP where tenants will be accessed
LOAD_BALANCER_IP=127.0.0.1

# DNS Plugin Strategy (auto-detects best available infrastructure)
# Options: auto, local-dns, bind9, dnsmasq, systemd-resolved, hosts-file
DNS_STRATEGY=auto

# =============================================================================
# LOCAL DNS INFRASTRUCTURE SETTINGS (LEVERAGES EXISTING SYSTEMS)
# =============================================================================

# BIND9 Configuration (if you have existing BIND9 server)
BIND9_ZONE_DIR=/etc/bind/zones
BIND9_CONFIG_DIR=/etc/bind
BIND9_RELOAD_COMMAND=rndc reload

# DNSMasq Configuration (common on routers/firewalls)
DNSMASQ_CONFIG_DIR=/etc/dnsmasq.d
DNSMASQ_HOSTS_DIR=/etc/dnsmasq.hosts

# SystemD-Resolved (Ubuntu/Debian default)
SYSTEMD_RESOLVED_CONFIG_DIR=/etc/systemd/resolved.conf.d

# Development/Testing (uses hosts file)
DEV_HOSTS_FILE=/tmp/dotmac-local-dns

# =============================================================================
# STRATEGIC DEPLOYMENT OPTIONS
# =============================================================================

# Deployment Mode
DEPLOYMENT_MODE=development  # development, production, hybrid

# Use existing router/firewall DNS (pfSense, OPNsense, etc.)
ROUTER_DNS_ENABLED=false
ROUTER_DNS_API_URL=
ROUTER_DNS_API_KEY=

# Use Docker internal DNS with bridge (easiest for containerized deployments)
DOCKER_DNS_ENABLED=true
DOCKER_DNS_BRIDGE_IP=172.20.0.1

# Use existing Kubernetes DNS (if running in K8s)
K8S_DNS_ENABLED=false
K8S_DNS_SERVICE=kube-dns

# =============================================================================
# PLUGIN SYSTEM CONFIGURATION
# =============================================================================

# Enable DNS plugins for extensibility
DNS_PLUGINS_ENABLED=true
PLUGIN_CONFIG_DIR=./config/plugins

# =============================================================================
# MONITORING AND HEALTH CHECKS
# =============================================================================

# DNS health monitoring
DNS_HEALTH_CHECK_INTERVAL=300
DNS_QUERY_TIMEOUT=10
DNS_METRICS_ENABLED=true

# =============================================================================
# ADVANCED STRATEGIC OPTIONS
# =============================================================================

# Multi-DNS redundancy (use multiple providers)
MULTI_DNS_ENABLED=false
PRIMARY_DNS_PROVIDER=local-dns
SECONDARY_DNS_PROVIDER=hosts-file

# =============================================================================
# DEBUGGING AND DEVELOPMENT
# =============================================================================

# Debug DNS operations without making actual changes
DNS_DEBUG_LOGGING=false
DNS_TEST_MODE=false
DNS_DRY_RUN=false