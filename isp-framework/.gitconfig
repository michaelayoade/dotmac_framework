# Git configuration for DotMac ISP Framework
# This file contains project-specific git configuration

[core]
    # Use .gitignore for ignoring files
    excludesfile = ~/.gitignore_global
    
    # Automatically convert CRLF to LF on commit and LF to CRLF on checkout
    autocrlf = input
    
    # Ensure consistent line endings
    eol = lf
    
    # Use less as the default pager
    pager = less -FRX
    
    # Set default editor (override with environment variable if needed)
    editor = nano
    
    # Enable parallel index preload for operations like git diff
    preloadindex = true
    
    # Speed up commands involving untracked files
    untrackedCache = true

[push]
    # Push only the current branch by default
    default = simple
    
    # Automatically set up tracking branches
    autoSetupRemote = true

[pull]
    # Use rebase instead of merge when pulling
    rebase = true

[fetch]
    # Automatically prune deleted remote branches
    prune = true

[merge]
    # Use three-way merge tool
    tool = vimdiff
    
    # Automatically remove backup files created by merge tools
    keepBackup = false

[rebase]
    # Automatically stash uncommitted changes when rebasing
    autoStash = true
    
    # Use abbreviated commit hashes in rebase todo list
    abbreviateCommands = true

[status]
    # Show untracked files and directories
    showUntrackedFiles = all
    
    # Use short format by default
    short = true

[log]
    # Show dates in ISO format
    date = iso

[diff]
    # Use better algorithm for diffs
    algorithm = patience
    
    # Show renames and copies
    renames = copies
    
    # Use color in diff output
    colorMoved = default

[color]
    # Enable color output
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[alias]
    # Common shortcuts
    co = checkout
    br = branch
    ci = commit
    st = status
    
    # Enhanced shortcuts
    unstage = reset HEAD --
    last = log -1 HEAD
    visual = !gitk
    
    # Logging shortcuts
    lg = log --oneline --graph --decorate --all
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    
    # Show commit history with stats
    hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
    
    # Show changes in a commit
    show-commit = show --name-only
    
    # Show current branch
    current-branch = rev-parse --abbrev-ref HEAD
    
    # Clean up branches
    cleanup = "!git branch --merged | grep -v '\\*\\|main\\|develop' | xargs -n 1 git branch -d"
    
    # Quick commit with message
    cm = commit -m
    
    # Quick add and commit
    ac = !git add . && git commit -m
    
    # Show remote URLs
    remotes = remote -v
    
    # Show tags sorted by version
    tags = tag -l --sort=-version:refname
    
    # Create a new branch and switch to it
    nb = checkout -b
    
    # Delete a branch safely
    bd = branch -d
    
    # Force delete a branch
    bdf = branch -D
    
    # Show branches sorted by last commit date
    recent-branches = for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
    
    # Stash shortcuts
    ss = stash save
    sl = stash list
    sp = stash pop
    sa = stash apply
    
    # Find commits by commit message
    find = "!f() { git log --pretty=format:'%h %cd %s [%an]' --decorate --date=short -S\"$1\"; }; f"
    
    # Find commits by author
    author = "!f() { git log --pretty=format:'%h %cd %s [%an]' --decorate --date=short --author=\"$1\"; }; f"

[commit]
    # Use commit message template
    template = .gitmessage
    
    # Sign commits with GPG (uncomment if using GPG signing)
    # gpgsign = true

[tag]
    # Sort tags by version
    sort = -version:refname

[init]
    # Use main as default branch name
    defaultBranch = main

[filter "lfs"]
    # Git LFS configuration (if using large files)
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[rerere]
    # Remember how merge conflicts were resolved
    enabled = true

[help]
    # Automatically run suggested commands after a delay
    autocorrect = 1