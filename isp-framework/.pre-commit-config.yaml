repos:
  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=88]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]

  # Remove trailing whitespace and fix line endings
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: mixed-line-ending
        args: [--fix=lf]

  # Python linting (ENHANCED - catches undefined names and import errors)
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --max-complexity=10, --ignore=E203,W503, --select=E,W,F,B]
        additional_dependencies:
          - flake8-docstrings
          - flake8-complexity
          - flake8-bugbear  # Catches additional Python bugs

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, --skip=B101,B601]
        files: ^src/

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        files: ^src/
        args: [--ignore-missing-imports, --strict]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.1-beta
    hooks:
      - id: hadolint
        files: Dockerfile.*

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck

  # Commit message linting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # Python dependency security scanning
  - repo: https://github.com/pyupio/safety
    rev: 2.3.5
    hooks:
      - id: safety
        files: requirements.*\.txt$
        args: [--ignore=51668]  # Ignore specific false positive if needed

  # STRATEGIC VALIDATION HOOKS (prevent issues like we fixed)
  - repo: local
    hooks:
      # Validate Python imports can be resolved (prevents MetricType errors)
      - id: validate-imports
        name: Validate Python Imports
        entry: python3 -c "
import ast
import sys
import importlib.util

def check_imports(filename):
    try:
        with open(filename, 'r') as f:
            tree = ast.parse(f.read(), filename=filename)
        
        for node in ast.walk(tree):
            if isinstance(node, (ast.Import, ast.ImportFrom)):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        module_name = alias.name
                elif isinstance(node, ast.ImportFrom):
                    module_name = node.module
                    if module_name is None:
                        continue
                
                # Skip relative imports and dotmac modules (internal)
                if module_name and (module_name.startswith('dotmac_') or module_name.startswith('.')):
                    continue
                    
                # Try to find external module
                try:
                    importlib.util.find_spec(module_name.split('.')[0])
                except (ImportError, AttributeError, ValueError):
                    print(f'‚ùå Import error in {filename}: Cannot resolve {module_name}')
                    return False
        return True
    except Exception as e:
        print(f'‚ùå Syntax error in {filename}: {e}')
        return False

failed = False
for filename in sys.argv[1:]:
    if filename.endswith('.py'):
        if not check_imports(filename):
            failed = True

if failed:
    print('\\nüí° Fix import errors or run: make install-dev')
    sys.exit(1)
"
        language: system
        files: \.py$
        pass_filenames: true

      # Validate container versions are pinned (prevents PostgreSQL issues)
      - id: validate-pinned-versions
        name: Validate Container Versions
        entry: python3 -c "
import sys
import yaml

def check_pinned_versions(filename):
    try:
        with open(filename, 'r') as f:
            compose = yaml.safe_load(f)
        
        failed = False
        for service_name, service_config in compose.get('services', {}).items():
            image = service_config.get('image', '')
            if image and 'build' not in service_config:
                if image.endswith(':latest') or image.count(':') == 0:
                    print(f'‚ùå Unpinned version: {service_name} uses {image}')
                    failed = True
        
        return not failed
    except Exception as e:
        print(f'‚ùå Error checking {filename}: {e}')
        return False

for filename in sys.argv[1:]:
    if 'docker-compose' in filename and filename.endswith(('.yml', '.yaml')):
        if not check_pinned_versions(filename):
            sys.exit(1)
"
        language: system  
        files: docker-compose\.ya?ml$
        pass_filenames: true

      # Validate Docker Compose syntax
      - id: validate-docker-compose
        name: Validate Docker Compose
        entry: docker compose config --quiet
        language: system
        files: docker-compose\.ya?ml$
        pass_filenames: false

# Global settings
default_stages: [commit]
fail_fast: false