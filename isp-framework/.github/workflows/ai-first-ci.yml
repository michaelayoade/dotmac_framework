name: AI-First CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # STAGE 1: AI Safety Checks (Fast - 30 seconds)
  ai-safety-gate:
    name: AI Code Safety Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-ai-${{ hashFiles('**/requirements-ai.txt') }}

    - name: Install AI safety tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep safety
        make install-ai-tools

    - name: AI Safety Pipeline
      run: |
        # Run comprehensive AI safety validation pipeline
        python scripts/ai_safety_pipeline.py
      continue-on-error: false
      
    - name: Upload AI safety reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ai-safety-reports
        path: |
          ai-safety-report.json
          bandit-ai.json

  # STAGE 2: AI-Generated Testing (Medium - 2 minutes)
  ai-intelligent-testing:
    name: AI Test Generation & Execution
    runs-on: ubuntu-latest
    needs: ai-safety-gate
    
    strategy:
      fail-fast: false
      matrix:
        test-type: [property-based, contract, behavior]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_dotmac_ai
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 3
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        make install-ai-testing-tools
        pip install hypothesis schemathesis pytest-benchmark

    - name: Wait for services (fast)
      run: |
        timeout 30 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
        timeout 15 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'

    - name: Generate AI test cases
      run: |
        # AI generates thousands of test cases
        python scripts/ai_test_generator.py --type=${{ matrix.test-type }} --count=1000 --smart-coverage
        python scripts/generate_property_tests.py --module=all --output=tests/generated/
      
    - name: Run AI-generated tests
      run: |
        # Run AI-optimized test suite
        make test-${{ matrix.test-type }} --parallel --fail-fast
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_dotmac_ai
        REDIS_URL: redis://localhost:6379

    - name: Performance regression detection
      if: matrix.test-type == 'behavior'
      run: |
        # AI monitors for performance regressions
        pytest --benchmark-only --benchmark-json=benchmark.json
        python scripts/ai_performance_monitor.py --baseline --alert-regression

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ai-test-results-${{ matrix.test-type }}
        path: |
          tests/generated/
          test-results-*.xml
          benchmark.json

  # STAGE 3: Revenue-Critical Smoke Tests (Fast - 45 seconds)
  critical-business-validation:
    name: Revenue-Critical Path Validation
    runs-on: ubuntu-latest
    needs: ai-intelligent-testing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install minimal dependencies
      run: |
        pip install pytest pytest-xdist
        make install-critical-only

    - name: Revenue-critical smoke tests
      run: |
        # Only test paths that affect money/billing
        pytest -m "revenue_critical or billing_core or payment_flow" --maxfail=1 --tb=short
        
    - name: Data safety verification
      run: |
        # Ensure AI hasn't broken data integrity
        pytest -m "data_safety or customer_data_protection" --maxfail=1

  # STAGE 4: AI-Monitored Deployment
  ai-deploy:
    name: AI-Monitored Deployment
    runs-on: ubuntu-latest
    needs: critical-business-validation
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Docker images
      run: |
        make docker-build-ai-optimized
        
    - name: Deploy with AI monitoring
      run: |
        # Deploy with canary and AI monitoring
        make deploy-canary --ai-monitor --auto-rollback-on-regression
        
    - name: Establish AI performance baseline
      run: |
        # AI monitors deployment and establishes new performance baseline
        python scripts/ai_deployment_monitor.py --establish-baseline --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

  # STAGE 5: Optional Legacy Checks (Non-blocking)
  legacy-quality-optional:
    name: Legacy Quality Checks (Optional)
    runs-on: ubuntu-latest
    needs: ai-safety-gate
    if: github.event_name == 'pull_request'  # Only for PRs, not deployments
    continue-on-error: true  # Don't block deployment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install legacy tools
      run: |
        pip install black isort flake8 mypy
        
    - name: Run legacy linting (informational only)
      run: |
        echo "::notice::Running legacy quality checks for human reference only"
        make lint-legacy || true
        make type-check-legacy || true
        
    - name: Comment PR with legacy results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸ’¡ **Legacy Quality Check Results** (informational only - does not block deployment)\n\nSee workflow logs for details. These checks are optional in AI-first development.'
          })

  # STAGE 6: Release Management (AI-assisted)
  ai-release:
    name: AI-Assisted Release
    runs-on: ubuntu-latest
    needs: ai-deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release:')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate AI release notes
      run: |
        # AI analyzes commits and generates release notes
        python scripts/ai_release_notes_generator.py --since-last-release --output=release-notes.md
        
    - name: Create release with AI-generated notes
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: AI-Generated Release v${{ github.run_number }}
        body_path: release-notes.md
        draft: false
        prerelease: false