name: Test and Conditional Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'

jobs:
  # Code Quality and Linting
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run Black
        run: poetry run black --check src/ tests/

      - name: Run isort
        run: poetry run isort --check-only src/ tests/

      - name: Run Ruff
        run: poetry run ruff check src/ tests/

      - name: Run MyPy
        run: poetry run mypy src/ --ignore-missing-imports

      - name: Run Bandit Security Scan
        run: poetry run bandit -r src/ -f json -o bandit-report.json

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: code-quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: dotmac_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Wait for PostgreSQL
        run: |
          while ! pg_isready -h localhost -p 5432 -U test_user; do
            sleep 1
          done

      - name: Run Database Migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/dotmac_test
          REDIS_URL: redis://localhost:6379/0
        run: poetry run alembic upgrade head

      - name: Run Unit Tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/dotmac_test
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
        run: |
          poetry run pytest tests/unit/ \
            --cov=src/dotmac_isp \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --junit-xml=unit-test-results.xml \
            -v

      - name: Upload Unit Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            unit-test-results.xml
            htmlcov/
            coverage.xml

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: dotmac_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Wait for Services
        run: |
          while ! pg_isready -h localhost -p 5432 -U test_user; do
            sleep 1
          done

      - name: Run Database Migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/dotmac_test
          REDIS_URL: redis://localhost:6379/0
        run: poetry run alembic upgrade head

      - name: Run Integration Tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/dotmac_test
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
        run: |
          poetry run pytest tests/integration/ \
            --junit-xml=integration-test-results.xml \
            -v

      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: integration-test-results.xml

  # Business Logic Tests
  business-logic-tests:
    runs-on: ubuntu-latest
    name: Business Logic Tests
    needs: integration-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: dotmac_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Wait for Services
        run: |
          while ! pg_isready -h localhost -p 5432 -U test_user; do
            sleep 1
          done

      - name: Run Database Migrations
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/dotmac_test
          REDIS_URL: redis://localhost:6379/0
        run: poetry run alembic upgrade head

      - name: Run Business Logic Tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/dotmac_test
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
        run: |
          poetry run pytest tests/business_logic/ \
            --junit-xml=business-logic-test-results.xml \
            -v

      - name: Upload Business Logic Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: business-logic-test-results
          path: business-logic-test-results.xml

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    name: End-to-End Tests
    needs: business-logic-tests
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Build Docker Images
        run: docker-compose -f docker-compose.test.yml build

      - name: Run E2E Tests in Docker
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready
          
          docker-compose -f docker-compose.test.yml exec -T app \
            pytest tests/e2e/ \
              --junit-xml=e2e-test-results.xml \
              -v
          
          docker-compose -f docker-compose.test.yml down -v

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: e2e-test-results.xml

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: e2e-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Build and Start Test Environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 60  # Wait for full startup

      - name: Run Performance Tests
        run: |
          poetry run pytest tests/performance/ \
            --junit-xml=performance-test-results.xml \
            --benchmark-json=benchmark-results.json \
            -v

      - name: Upload Performance Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            performance-test-results.xml
            benchmark-results.json

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Security Tests
  security-tests:
    runs-on: ubuntu-latest
    name: Security Tests
    needs: performance-tests
    if: always() && (needs.performance-tests.result == 'success' || needs.e2e-tests.result == 'success')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dotmac-isp-framework:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Security Tests
        run: |
          poetry install --no-interaction
          poetry run pytest tests/security/ \
            --junit-xml=security-test-results.xml \
            -v

      - name: Upload Security Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: security-test-results.xml

  # TEST RESULTS ANALYSIS
  analyze-test-results:
    runs-on: ubuntu-latest
    name: Analyze Test Results
    needs: [unit-tests, integration-tests, business-logic-tests, e2e-tests, security-tests]
    if: always()
    steps:
      - name: Download All Test Results
        uses: actions/download-artifact@v3

      - name: Analyze Test Results
        id: test-analysis
        run: |
          echo "Analyzing test results..."
          
          # Check if all test result files exist and contain passing tests
          UNIT_PASSED=false
          INTEGRATION_PASSED=false
          BUSINESS_LOGIC_PASSED=false
          E2E_PASSED=false
          SECURITY_PASSED=false
          
          # Check unit tests
          if [ -f "unit-test-results/unit-test-results.xml" ]; then
            if grep -q 'failures="0".*errors="0"' unit-test-results/unit-test-results.xml; then
              UNIT_PASSED=true
              echo "✅ Unit tests passed"
            else
              echo "❌ Unit tests failed"
            fi
          else
            echo "❌ Unit test results not found"
          fi
          
          # Check integration tests
          if [ -f "integration-test-results/integration-test-results.xml" ]; then
            if grep -q 'failures="0".*errors="0"' integration-test-results/integration-test-results.xml; then
              INTEGRATION_PASSED=true
              echo "✅ Integration tests passed"
            else
              echo "❌ Integration tests failed"
            fi
          else
            echo "❌ Integration test results not found"
          fi
          
          # Check business logic tests
          if [ -f "business-logic-test-results/business-logic-test-results.xml" ]; then
            if grep -q 'failures="0".*errors="0"' business-logic-test-results/business-logic-test-results.xml; then
              BUSINESS_LOGIC_PASSED=true
              echo "✅ Business logic tests passed"
            else
              echo "❌ Business logic tests failed"
            fi
          else
            echo "❌ Business logic test results not found"
          fi
          
          # Check E2E tests
          if [ -f "e2e-test-results/e2e-test-results.xml" ]; then
            if grep -q 'failures="0".*errors="0"' e2e-test-results/e2e-test-results.xml; then
              E2E_PASSED=true
              echo "✅ E2E tests passed"
            else
              echo "❌ E2E tests failed"
            fi
          else
            echo "❌ E2E test results not found"
          fi
          
          # Check security tests
          if [ -f "security-test-results/security-test-results.xml" ]; then
            if grep -q 'failures="0".*errors="0"' security-test-results/security-test-results.xml; then
              SECURITY_PASSED=true
              echo "✅ Security tests passed"
            else
              echo "❌ Security tests failed"
            fi
          else
            echo "❌ Security test results not found"
          fi
          
          # Determine overall result
          if [ "$UNIT_PASSED" = true ] && [ "$INTEGRATION_PASSED" = true ] && [ "$BUSINESS_LOGIC_PASSED" = true ] && [ "$E2E_PASSED" = true ] && [ "$SECURITY_PASSED" = true ]; then
            echo "ALL_TESTS_PASSED=true" >> $GITHUB_OUTPUT
            echo "🎉 ALL TESTS PASSED! Ready for deployment."
          else
            echo "ALL_TESTS_PASSED=false" >> $GITHUB_OUTPUT
            echo "💥 Some tests failed. Deployment blocked."
          fi

    outputs:
      all_tests_passed: ${{ steps.test-analysis.outputs.ALL_TESTS_PASSED }}

  # CONDITIONAL DEPLOYMENT
  deploy:
    runs-on: ubuntu-latest
    name: Deploy Application
    needs: analyze-test-results
    if: needs.analyze-test-results.outputs.all_tests_passed == 'true' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Production Docker Image
        run: |
          docker build -t dotmac-isp-framework:${{ github.sha }} .
          docker tag dotmac-isp-framework:${{ github.sha }} dotmac-isp-framework:latest

      - name: Start Production Server
        run: |
          echo "🚀 Starting DotMac ISP Framework server..."
          echo "All tests passed - application is ready for production!"
          
          # In production, this would deploy to your infrastructure
          # For now, we'll just start the server locally
          docker-compose up -d
          
          echo "✅ DotMac ISP Framework is now running!"
          echo "📊 API Documentation: http://localhost:8000/docs"
          echo "🏥 Health Check: http://localhost:8000/health"

      - name: Verify Deployment
        run: |
          sleep 30  # Wait for startup
          
          # Health check
          if curl -f http://localhost:8000/health; then
            echo "✅ Health check passed - deployment successful!"
          else
            echo "❌ Health check failed - deployment issue!"
            exit 1
          fi

      - name: Notify Success
        if: success()
        run: |
          echo "🎉 DEPLOYMENT SUCCESSFUL!"
          echo "DotMac ISP Framework is now running and ready for use."

  # ALIGNMENT MODE - Continue fixing issues
  continue-alignment:
    runs-on: ubuntu-latest
    name: Continue Alignment
    needs: analyze-test-results
    if: needs.analyze-test-results.outputs.all_tests_passed != 'true'
    steps:
      - name: Download Test Results
        uses: actions/download-artifact@v3

      - name: Generate Failure Report
        run: |
          echo "🔧 CONTINUING ALIGNMENT MODE"
          echo "Some tests failed - deployment blocked until all tests pass."
          echo ""
          echo "Failed Test Summary:"
          echo "===================="
          
          # Generate detailed failure report
          find . -name "*.xml" -exec echo "Analyzing: {}" \; -exec grep -l 'failures="[^0]"\|errors="[^0]"' {} \; || true
          
          echo ""
          echo "Next Steps:"
          echo "1. Review test failures above"
          echo "2. Fix failing tests and business logic"
          echo "3. Commit fixes and push changes"
          echo "4. CI/CD will re-run and deploy when all tests pass"

      - name: Create Issue for Failed Tests
        uses: actions/github-script@v6
        if: github.ref == 'refs/heads/main'
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Test Failures - Deployment Blocked (${context.sha.substring(0, 7)})`,
              body: `
                ## Test Failure Report
                
                **Commit**: ${context.sha}
                **Branch**: ${context.ref}
                **Workflow**: ${context.workflow}
                
                ### Status
                ❌ Some tests failed - deployment has been blocked
                
                ### Action Required
                1. Review the failed test results in the Actions tab
                2. Fix the failing tests and business logic issues
                3. Push fixes to trigger a new build
                4. Server will start automatically when all tests pass
                
                ### Test Results
                Check the workflow run for detailed test failure information.
              `,
              labels: ['bug', 'ci-failure', 'deployment-blocked']
            })