# Strategic Validation Pipeline
# Prevents deployment issues by catching them early in CI/CD

name: Strategic Quality Gates

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONPATH: src
  DATABASE_URL: postgresql://test:test@localhost:5432/test_db
  REDIS_URL: redis://localhost:6379/0
  ENVIRONMENT: testing

jobs:
  # ===== STRATEGIC VALIDATION GATES =====
  
  strategic-validation:
    name: üîç Strategic Code Validation
    runs-on: ubuntu-latest
    
    services:
      # Test services for validation
      postgres:
        image: postgres:15.8-alpine
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7.4-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üì¶ Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: üîß Install dependencies
      run: |
        cd isp-framework
        poetry install --no-interaction --no-ansi

    # STRATEGIC GATE 1: Import Resolution Validation
    - name: üîç Validate Python Imports
      run: |
        cd isp-framework
        echo "üîç Validating all Python imports can be resolved..."
        
        python3 -c "
        import ast
        import sys
        import importlib.util
        import os
        from pathlib import Path
        
        failed_files = []
        
        def check_imports(filepath):
            try:
                with open(filepath, 'r') as f:
                    tree = ast.parse(f.read(), filename=str(filepath))
                
                for node in ast.walk(tree):
                    if isinstance(node, (ast.Import, ast.ImportFrom)):
                        if isinstance(node, ast.Import):
                            for alias in node.names:
                                module_name = alias.name
                        elif isinstance(node, ast.ImportFrom):
                            module_name = node.module
                            if module_name is None:
                                continue
                        
                        # Skip relative imports and internal dotmac modules
                        if module_name and (module_name.startswith('dotmac_') or module_name.startswith('.')):
                            continue
                            
                        # Try to find external module
                        try:
                            importlib.util.find_spec(module_name.split('.')[0])
                        except (ImportError, AttributeError, ValueError):
                            print(f'‚ùå Import error in {filepath}: Cannot resolve {module_name}')
                            return False
                return True
            except Exception as e:
                print(f'‚ùå Syntax error in {filepath}: {e}')
                return False
        
        # Check all Python files
        for py_file in Path('src').rglob('*.py'):
            if not check_imports(py_file):
                failed_files.append(str(py_file))
        
        if failed_files:
            print(f'\\n‚ùå Import validation failed for {len(failed_files)} files')
            print('üí° Run: make install-dev to fix missing dependencies')
            sys.exit(1)
        else:
            print('‚úÖ All imports validated successfully')
        "

    # STRATEGIC GATE 2: Container Version Validation  
    - name: üê≥ Validate Container Versions
      run: |
        cd isp-framework
        echo "üê≥ Validating container versions are pinned..."
        
        python3 -c "
        import yaml
        import sys
        
        with open('docker-compose.yml', 'r') as f:
            compose = yaml.safe_load(f)
        
        failed_services = []
        
        for service_name, service_config in compose.get('services', {}).items():
            image = service_config.get('image', '')
            if image and 'build' not in service_config:
                if image.endswith(':latest') or image.count(':') == 0:
                    print(f'‚ùå Unpinned version: {service_name} uses {image}')
                    failed_services.append(service_name)
                else:
                    print(f'‚úÖ {service_name}: {image}')
        
        if failed_services:
            print(f'\\n‚ùå Found {len(failed_services)} services with unpinned versions')
            print('üí° Pin versions to prevent compatibility issues')
            sys.exit(1)
        else:
            print('\\n‚úÖ All container versions are properly pinned')
        "

    # STRATEGIC GATE 3: Dependency Health Validation
    - name: üè• Validate Service Dependencies
      run: |
        cd isp-framework
        echo "üè• Testing service dependency health checks..."
        
        # Test that our health monitoring can connect to services
        poetry run python3 -c "
        import asyncio
        import sys
        import os
        
        # Set up test environment
        os.environ['DATABASE_URL'] = 'postgresql://test:test@localhost:5432/test_db'
        os.environ['REDIS_URL'] = 'redis://localhost:6379/0'
        os.environ['ENVIRONMENT'] = 'testing'
        
        async def test_health_system():
            try:
                from dotmac_isp.core.dependency_health import get_dependency_health_monitor
                
                health_monitor = get_dependency_health_monitor()
                
                # Test database health check
                db_health = await health_monitor.check_database_health()
                print(f'üìä Database Health: {db_health.status.value} ({db_health.response_time_ms:.1f}ms)')
                
                # Test Redis health check  
                redis_health = await health_monitor.check_redis_health()
                print(f'üìä Redis Health: {redis_health.status.value} ({redis_health.response_time_ms:.1f}ms)')
                
                # Validate health monitoring works
                if db_health.status.value in ['healthy', 'degraded'] and redis_health.status.value in ['healthy', 'degraded']:
                    print('‚úÖ Health monitoring system validated successfully')
                    return True
                else:
                    print('‚ùå Health monitoring system failed validation')
                    return False
                    
            except Exception as e:
                print(f'‚ùå Health monitoring validation failed: {e}')
                return False
        
        result = asyncio.run(test_health_system())
        if not result:
            sys.exit(1)
        "

    # STRATEGIC GATE 4: Security Validation
    - name: üîí Security Validation
      run: |
        cd isp-framework
        echo "üîí Running security validation..."
        
        # Check for common security issues
        poetry run bandit -r src/ -f json -o bandit-report.json || true
        
        # Validate secret management patterns
        poetry run python3 -c "
        import os
        import sys
        from pathlib import Path
        
        print('üîç Checking for hardcoded secrets...')
        
        # Common secret patterns to avoid
        danger_patterns = [
            'password=',
            'secret=', 
            'token=',
            'key=',
            'localhost:6379',  # Our specific Redis issue
            'localhost:5432',  # Our specific PostgreSQL issue
        ]
        
        found_issues = []
        
        for py_file in Path('src').rglob('*.py'):
            with open(py_file, 'r') as f:
                content = f.read().lower()
                for pattern in danger_patterns:
                    if pattern in content and 'test' not in str(py_file).lower():
                        found_issues.append(f'{py_file}: Found \"{pattern}\"')
        
        if found_issues:
            print('‚ö†Ô∏è Potential hardcoded credentials found:')
            for issue in found_issues[:5]:  # Show first 5
                print(f'  {issue}')
            print('üí° Use SecretManager or environment variables instead')
        else:
            print('‚úÖ No hardcoded credentials detected')
        "

    # STRATEGIC GATE 5: Configuration Validation
    - name: ‚öôÔ∏è Configuration Validation
      run: |
        cd isp-framework
        echo "‚öôÔ∏è Validating configuration management..."
        
        poetry run python3 -c "
        import sys
        import os
        
        # Test settings can be loaded without errors
        try:
            os.environ['ENVIRONMENT'] = 'testing'
            from dotmac_isp.core.settings import get_settings
            from dotmac_isp.core.secret_manager import get_secret_manager
            
            settings = get_settings()
            secret_manager = get_secret_manager()
            
            print(f'‚úÖ Settings loaded: Environment = {settings.environment}')
            print(f'‚úÖ Secret manager loaded: Environment = {secret_manager.environment}')
            print('‚úÖ Configuration system validated')
            
        except Exception as e:
            print(f'‚ùå Configuration validation failed: {e}')
            sys.exit(1)
        "

  # ===== OPTIONAL QUALITY GATES (NON-BLOCKING) =====
  
  optional-quality-checks:
    name: üìä Optional Quality Checks
    runs-on: ubuntu-latest
    continue-on-error: true  # Non-blocking
    
    steps:
    - name: üì• Checkout code  
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üì¶ Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: üîß Install dependencies
      run: |
        cd isp-framework
        poetry install --no-interaction --no-ansi

    # Optional: Code formatting (non-blocking)
    - name: üé® Check Code Formatting
      continue-on-error: true
      run: |
        cd isp-framework
        echo "üé® Checking code formatting (optional)..."
        poetry run black --check --diff src/ || echo "‚ö†Ô∏è Code formatting issues found (non-blocking)"

    # Optional: Linting (non-blocking) 
    - name: üîç Linting
      continue-on-error: true
      run: |
        cd isp-framework
        echo "üîç Running linting checks (optional)..."
        poetry run ruff check src/ || echo "‚ö†Ô∏è Linting issues found (non-blocking)"

    # Optional: Type checking (non-blocking)
    - name: üè∑Ô∏è Type Checking  
      continue-on-error: true
      run: |
        cd isp-framework
        echo "üè∑Ô∏è Running type checks (optional)..."
        poetry run mypy src/ --ignore-missing-imports || echo "‚ö†Ô∏è Type checking issues found (non-blocking)"

  # ===== RESULTS SUMMARY =====
  
  validation-summary:
    name: üìã Validation Summary
    runs-on: ubuntu-latest
    needs: [strategic-validation, optional-quality-checks]
    if: always()
    
    steps:
    - name: üìã Summary
      run: |
        echo "## üéØ Strategic Validation Results"
        echo ""
        echo "‚úÖ **Strategic Gates (Required):**"
        echo "- Import Resolution: ${{ needs.strategic-validation.result }}"
        echo "- Container Versions: ${{ needs.strategic-validation.result }}"  
        echo "- Dependency Health: ${{ needs.strategic-validation.result }}"
        echo "- Security Validation: ${{ needs.strategic-validation.result }}"
        echo "- Configuration: ${{ needs.strategic-validation.result }}"
        echo ""
        echo "üìä **Optional Quality Checks:**"
        echo "- Code Quality: ${{ needs.optional-quality-checks.result }} (non-blocking)"
        echo ""
        if [[ "${{ needs.strategic-validation.result }}" == "success" ]]; then
          echo "üéâ **All strategic validation gates passed!**"
          echo "Code is ready for deployment."
        else
          echo "‚ùå **Strategic validation failed**"
          echo "Review and fix issues before deployment."
        fi