# AI-First Deployment Readiness Testing
# =====================================
# Usage: make -f Makefile.readiness deployment-ready
#
# This ensures 100% application readiness before deployment.
# No traditional tests should pass if these fail.

.PHONY: deployment-ready startup-check schema-check ai-validation clean-test-artifacts

# Main target - ensures 100% deployment readiness
deployment-ready: startup-check schema-check ai-validation
	@echo "🎉 APPLICATION IS 100% DEPLOYMENT READY"
	@echo "✅ All critical systems validated"
	@echo "✅ Database schema aligned"  
	@echo "✅ AI validation passed"
	@echo "📊 See deployment_readiness_report.json for details"

# Phase 1: Critical startup validation
startup-check:
	@echo "🚀 Phase 1: Critical Startup Validation"
	pytest tests/startup/test_application_readiness.py \
		-v \
		--tb=short \
		--maxfail=1 \
		-m startup_critical \
		|| (echo "❌ STARTUP FAILED - Cannot proceed"; exit 1)
	@echo "✅ Phase 1 Complete: Application startup validated"

# Phase 2: Database schema validation
schema-check:
	@echo "🗄️  Phase 2: Database Schema Validation"  
	pytest tests/startup/test_application_readiness.py::TestModelMigrationAlignment \
		-v \
		--tb=short \
		|| (echo "❌ SCHEMA VALIDATION FAILED"; exit 1)
	@echo "✅ Phase 2 Complete: Database schema aligned"

# Phase 3: AI-guided comprehensive validation
ai-validation:
	@echo "🤖 Phase 3: AI-Guided Comprehensive Validation"
	pytest tests/ai_readiness/test_deployment_readiness_ai.py \
		-v \
		--tb=short \
		-m ai_readiness \
		|| (echo "❌ AI VALIDATION FAILED"; exit 1)
	@echo "✅ Phase 3 Complete: AI validation passed"

# Run only if deployment-ready passes
test-legacy: deployment-ready
	@echo "🧪 Running Legacy Test Suite (deployment-ready passed)"
	pytest \
		-v \
		--tb=short \
		--maxfail=10 \
		-m "not startup_critical and not ai_readiness" \
		--cov=dotmac_isp \
		--cov-report=html:htmlcov \
		--cov-report=term-missing \
		--cov-fail-under=80

# Clean test artifacts
clean-test-artifacts:
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -f deployment_readiness_report.json
	rm -f deployment_readiness.json
	rm -rf .hypothesis/
	rm -f .coverage

# Quick health check (for CI/CD)
health-check:
	@echo "🏥 Quick Health Check"
	python -c "from dotmac_isp.main import app; print('✅ App imports successfully')"
	python -c "from dotmac_isp.core.database import get_database_url; print('✅ Database config valid')"
	python -c "from dotmac_isp.core.settings import get_settings; s=get_settings(); print('✅ Settings loaded')"

# Development workflow
dev-ready: clean-test-artifacts deployment-ready test-legacy
	@echo "🛠️  DEVELOPMENT ENVIRONMENT READY"
	@echo "✅ All systems operational"
	@echo "✅ Legacy tests passing"
	@echo "📊 Coverage report: htmlcov/index.html"

# CI/CD pipeline integration
ci-ready: health-check deployment-ready
	@echo "🔄 CI/CD PIPELINE READY"
	@if [ -f deployment_readiness_report.json ]; then \
		echo "📊 Deployment Report:"; \
		cat deployment_readiness_report.json | python -m json.tool; \
	fi

# Stress test the deployment readiness
stress-test: deployment-ready
	@echo "💪 Stress Testing Deployment Readiness"
	for i in {1..5}; do \
		echo "🔄 Iteration $$i/5"; \
		make -f Makefile.readiness deployment-ready || exit 1; \
	done
	@echo "✅ Stress test passed - deployment is stable"

# Help
help:
	@echo "AI-First Deployment Readiness Testing"
	@echo "====================================="
	@echo ""
	@echo "Main targets:"
	@echo "  deployment-ready  - Ensure 100% deployment readiness (MUST pass)"
	@echo "  test-legacy       - Run legacy tests (only if deployment-ready passes)"
	@echo "  dev-ready         - Full development environment validation"
	@echo "  ci-ready          - CI/CD pipeline integration"
	@echo ""
	@echo "Individual phases:"
	@echo "  startup-check     - Critical startup validation" 
	@echo "  schema-check      - Database schema validation"
	@echo "  ai-validation     - AI-guided comprehensive validation"
	@echo ""
	@echo "Utilities:"
	@echo "  health-check      - Quick health check"
	@echo "  stress-test       - Stress test deployment readiness"
	@echo "  clean-test-artifacts - Clean test artifacts"
	@echo ""
	@echo "Usage: make -f Makefile.readiness [target]"