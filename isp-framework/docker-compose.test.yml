version: '3.8'

services:
  # Core Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: dotmac-test-postgres
    environment:
      POSTGRES_DB: dotmac_isp_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: dotmac_isp_test_integration,dotmac_isp_test_performance
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./tests/fixtures/sql:/docker-entrypoint-initdb.d/
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dotmac_isp_test"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dotmac-test-network

  # Test-specific Redis instance
  redis-test:
    image: redis:7-alpine
    container_name: dotmac-test-redis
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --maxmemory 256mb
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - dotmac-test-network

  # Mock Payment Processor  
  mock-payment:
    image: python:3.11-slim
    container_name: dotmac-mock-payment
    command: sh -c "pip install fastapi uvicorn && python -c 'from fastapi import FastAPI; from pydantic import BaseModel; import uvicorn, random, time; app = FastAPI(); class PaymentRequest(BaseModel): amount:float; card_number:str; customer_id:str; app.get(\"/health\")(lambda: {\"status\": \"ok\"}); app.post(\"/process-payment\")(lambda payment: {\"status\": \"success\", \"transaction_id\": f\"txn_{int(time.time())}_{random.randint(1000,9999)}\", \"amount\": payment.amount} if random.random() < 0.95 else {\"status\": \"failed\", \"error\": \"Card declined\", \"amount\": payment.amount}); uvicorn.run(app, host=\"0.0.0.0\", port=8080)'"
    ports:
      - "8080:8080"
    networks:
      - dotmac-test-network

  # Main test runner container
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: dotmac-test-runner
    environment:
      # Database configuration for tests
      POSTGRES_TEST_HOST: postgres-test
      POSTGRES_TEST_PORT: 5432
      POSTGRES_TEST_USER: postgres
      POSTGRES_TEST_PASSWORD: postgres
      POSTGRES_TEST_DB: dotmac_isp_test
      
      # Redis configuration for tests
      REDIS_TEST_URL: redis://redis-test:6379/15
      
      # Application settings for testing
      ENVIRONMENT: testing
      DEBUG: "false"
      TESTING: "true"
      
      # Disable external services in tests
      ENABLE_OBSERVABILITY: "false"
      ENABLE_SECRETS_MANAGEMENT: "false"
      
      # Test-specific settings
      JWT_SECRET_KEY: "test_jwt_secret_key_for_testing_only_32_chars_minimum"
      API_V1_PREFIX: "/api/v1"
      
    volumes:
      - .:/app
      - /app/venv  # Prevent overwriting venv in container
    working_dir: /app
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - dotmac-test-network
    command: tail -f /dev/null  # Keep container running for interactive testing

  # Mock SNMP Device Simulator
  mock-snmp:
    image: python:3.11-slim
    container_name: dotmac-mock-snmp
    command: >
      sh -c "
        pip install fastapi uvicorn &&
        python -c \"
from fastapi import FastAPI
import uvicorn
import random
import json

app = FastAPI()

@app.get('/devices')
def get_devices():
    devices = []
    for i in range(10):
        devices.append({
            'device_id': f'device_{i:03d}',
            'ip': f'192.168.1.{i+10}',
            'type': random.choice(['router', 'switch', 'ont', 'olt']),
            'status': random.choice(['online', 'online', 'online', 'offline']),
            'uptime': random.randint(1000, 100000),
            'bandwidth_in': random.randint(1000000, 10000000),
            'bandwidth_out': random.randint(1000000, 10000000)
        })
    return devices

@app.get('/device/{device_id}/metrics')
def get_device_metrics(device_id: str):
    return {
        'device_id': device_id,
        'cpu_usage': random.randint(10, 90),
        'memory_usage': random.randint(30, 80),
        'interface_stats': {
            'bytes_in': random.randint(1000000, 100000000),
            'bytes_out': random.randint(1000000, 100000000),
            'packets_in': random.randint(1000, 100000),
            'packets_out': random.randint(1000, 100000)
        }
    }

if __name__ == '__main__':
    uvicorn.run(app, host='0.0.0.0', port=8161)
        \" &
        sleep infinity
      "
    ports:
      - "8161:8161"
    networks:
      - dotmac-test-network

  # Test Data Generator
  test-data-generator:
    image: python:3.11-slim
    container_name: dotmac-test-data-generator
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    command: >
      sh -c "
        pip install psycopg2-binary redis faker &&
        python -c \"
import psycopg2
import redis
from faker import Faker
import json
import random
from datetime import datetime, timedelta

fake = Faker()

# Connect to databases
pg_conn = psycopg2.connect(
    host='postgres-test',
    database='dotmac_isp_test',
    user='postgres',
    password='postgres'
)
redis_conn = redis.Redis(host='redis-test', port=6379, decode_responses=True)

print('Generating test customers...')
customers = []
for i in range(100):
    customer = {
        'id': fake.uuid4(),
        'customer_number': f'CUS-{i:06d}',
        'display_name': fake.name(),
        'email': fake.email(),
        'phone': fake.phone_number(),
        'status': random.choice(['active', 'active', 'suspended']),
        'created_at': fake.date_time_between('-2y', 'now')
    }
    customers.append(customer)

print('Generating test services...')
services = []
service_types = ['internet', 'phone', 'tv', 'bundle']
for i in range(250):
    customer = random.choice(customers)
    service = {
        'id': fake.uuid4(),
        'customer_id': customer['id'],
        'service_type': random.choice(service_types),
        'monthly_cost': round(random.uniform(29.99, 199.99), 2),
        'bandwidth_mbps': random.choice([25, 50, 100, 200, 500, 1000]) if random.choice(service_types) == 'internet' else None,
        'status': 'active',
        'created_at': fake.date_time_between('-1y', 'now')
    }
    services.append(service)

print('Generating test invoices...')
invoices = []
for i in range(500):
    service = random.choice(services)
    amount = service['monthly_cost']
    tax_amount = round(amount * 0.08, 2)
    
    invoice = {
        'id': fake.uuid4(),
        'customer_id': service['customer_id'],
        'service_id': service['id'],
        'amount': amount,
        'tax_amount': tax_amount,
        'total_amount': amount + tax_amount,
        'due_date': fake.date_between('-6m', '+1m'),
        'status': random.choice(['paid', 'paid', 'paid', 'pending', 'overdue']),
        'created_at': fake.date_time_between('-6m', 'now')
    }
    invoices.append(invoice)

# Store in Redis for test access
redis_conn.set('test:customers', json.dumps(customers, default=str))
redis_conn.set('test:services', json.dumps(services, default=str))
redis_conn.set('test:invoices', json.dumps(invoices, default=str))

print(f'Generated {len(customers)} customers, {len(services)} services, {len(invoices)} invoices')
print('Test data stored in Redis with keys: test:customers, test:services, test:invoices')
        \"
      "
    networks:
      - dotmac-test-network

  # Integration test runner with realistic data
  test-integration:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: dotmac-test-integration
    environment:
      # Use separate database for integration tests
      POSTGRES_TEST_HOST: postgres-test
      POSTGRES_TEST_PORT: 5432
      POSTGRES_TEST_USER: postgres
      POSTGRES_TEST_PASSWORD: postgres
      POSTGRES_TEST_DB: dotmac_isp_test_integration
      
      REDIS_TEST_URL: redis://redis-test:6379/14
      ENVIRONMENT: testing
      TESTING: "true"
      
      # Enable more services for integration tests
      ENABLE_OBSERVABILITY: "false"  # Still disabled for testing
      ENABLE_SECRETS_MANAGEMENT: "false"
      
    volumes:
      - .:/app
      - /app/venv
    working_dir: /app
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - dotmac-test-network
    command: >
      sh -c "
        echo 'Running integration tests...' &&
        python -m pytest tests/integration/ -v --tb=short --maxfail=5 &&
        echo 'Integration tests completed.'
      "

  # Test Metrics Collector (Simple Prometheus Alternative)
  metrics-collector:
    image: python:3.11-slim
    container_name: dotmac-metrics-collector
    command: >
      sh -c "
        pip install fastapi uvicorn &&
        python -c \"
from fastapi import FastAPI
import uvicorn
import time
import json
from datetime import datetime

app = FastAPI()
metrics_store = {}

@app.post('/metrics')
def collect_metrics(metric_data: dict):
    timestamp = datetime.now().isoformat()
    metrics_store[timestamp] = metric_data
    return {'status': 'collected', 'timestamp': timestamp}

@app.get('/metrics')
def get_metrics():
    return metrics_store

@app.get('/metrics/summary')
def get_metrics_summary():
    if not metrics_store:
        return {'total_metrics': 0, 'latest': None}
    
    latest_key = max(metrics_store.keys())
    return {
        'total_metrics': len(metrics_store),
        'latest': latest_key,
        'latest_data': metrics_store[latest_key]
    }

if __name__ == '__main__':
    uvicorn.run(app, host='0.0.0.0', port=9090)
        \" &
        sleep infinity
      "
    ports:
      - "9090:9090"
    networks:
      - dotmac-test-network

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local

networks:
  dotmac-test-network:
    driver: bridge